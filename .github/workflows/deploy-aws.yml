name: Deploy to AWS

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ENVIRONMENT: dev

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 instance info
        id: ec2-info
        run: |
          cd terraform
          echo "instance_id=$(terraform output -raw ec2_instance_id)" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t harena-backend:${{ github.sha }} .
          docker tag harena-backend:${{ github.sha }} harena-backend:latest

      - name: Save Docker image
        run: |
          docker save harena-backend:latest | gzip > /tmp/backend.tar.gz

      - name: Upload to S3
        run: |
          aws s3 cp /tmp/backend.tar.gz s3://harena-deployments-temp/backend-${{ github.sha }}.tar.gz

      - name: Deploy to EC2
        run: |
          aws ssm send-command \
            --instance-ids "${{ steps.ec2-info.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws s3 cp s3://harena-deployments-temp/backend-${{ github.sha }}.tar.gz /tmp/backend.tar.gz",
              "cd /opt/harena",
              "docker load < /tmp/backend.tar.gz",
              "docker-compose down backend || true",
              "docker-compose up -d backend",
              "docker-compose exec -T backend alembic upgrade head",
              "rm /tmp/backend.tar.gz"
            ]' \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          for i in {1..10}; do
            if curl -f "http://${{ steps.ec2-info.outputs.public_ip }}:8000/health"; then
              echo "✅ Backend healthy"
              exit 0
            fi
            echo "Waiting for backend... ($i/10)"
            sleep 3
          done
          echo "❌ Backend health check failed"
          exit 1

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get infrastructure info
        id: infra
        run: |
          cd terraform
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_id)" >> $GITHUB_OUTPUT
          echo "backend_url=$(terraform output -raw backend_url)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: harena_front/package-lock.json

      - name: Build frontend
        working-directory: ./harena_front
        env:
          VITE_API_URL: ${{ steps.infra.outputs.backend_url }}
        run: |
          npm ci --prefer-offline --no-audit
          npm run build

      - name: Deploy to S3
        working-directory: ./harena_front
        run: |
          aws s3 sync dist/ s3://${{ steps.infra.outputs.s3_bucket }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"

          aws s3 cp dist/index.html s3://${{ steps.infra.outputs.s3_bucket }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infra.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Deployment summary
        run: |
          echo "✅ Deployment complete!"
          echo "Backend: ${{ steps.infra.outputs.backend_url }}"
          echo "Frontend: https://$(cd terraform && terraform output -raw cloudfront_domain)"
