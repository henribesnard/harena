name: Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: harena_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          # Installer les dépendances de chaque service
          if [ -f user_service/requirements.txt ]; then
            pip install -r user_service/requirements.txt
          fi
          if [ -f conversation_service_v3/requirements.txt ]; then
            pip install -r conversation_service_v3/requirements.txt
          fi

      - name: 🗄️ Setup database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/harena_test
        run: |
          # Appliquer les migrations
          # cd user_service && alembic upgrade head

      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/harena_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci
          ENVIRONMENT: test
        run: |
          # Lancer les tests
          pytest --cov=. --cov-report=xml --cov-report=term-missing || true

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: 📝 Test summary
        if: always()
        run: |
          echo "### Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
