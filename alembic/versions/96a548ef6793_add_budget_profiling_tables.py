"""Add budget profiling tables

Revision ID: 96a548ef6793
Revises: e28857c31199
Create Date: 2025-10-18 20:38:47.490649

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '96a548ef6793'
down_revision: Union[str, None] = 'e28857c31199'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('budget_recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('recommendation_type', sa.String(length=100), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('estimated_savings', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('actions', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('feedback_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_impact', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fixed_charges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('merchant_name', sa.String(length=255), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('avg_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('amount_variance', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('recurrence_day', sa.Integer(), nullable=True),
    sa.Column('recurrence_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('validated_by_user', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('first_detected_date', sa.Date(), nullable=True),
    sa.Column('last_transaction_date', sa.Date(), nullable=True),
    sa.Column('transaction_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'merchant_name', name='uq_user_merchant')
    )
    op.create_table('savings_goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('goal_name', sa.String(length=255), nullable=True),
    sa.Column('target_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('target_date', sa.Date(), nullable=True),
    sa.Column('current_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('monthly_contribution', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('suggested_categories', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('seasonal_patterns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.Column('pattern_type', sa.String(length=50), nullable=True),
    sa.Column('avg_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('variance_vs_avg', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('key_expenses', sa.JSON(), nullable=True),
    sa.Column('confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('years_data', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'month', 'pattern_type', name='uq_user_month_pattern')
    )
    op.create_table('user_budget_profile',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_segment', sa.String(length=50), nullable=True),
    sa.Column('behavioral_pattern', sa.String(length=50), nullable=True),
    sa.Column('avg_monthly_income', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('avg_monthly_expenses', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('avg_monthly_savings', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('savings_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('fixed_charges_total', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('semi_fixed_charges_total', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('variable_charges_total', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('remaining_to_live', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('profile_completeness', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('last_analyzed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    with op.batch_alter_table('account_information', schema=None) as batch_op:
        batch_op.alter_column('account_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('bridge_insights', schema=None) as batch_op:
        batch_op.alter_column('global_kpis',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('monthly_kpis',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('conversation_turns', schema=None) as batch_op:
        batch_op.alter_column('data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.alter_column('total_turns',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
        batch_op.drop_constraint('conversations_conversation_id_key', type_='unique')
        batch_op.drop_index('ix_conversations_conversation_id')
        batch_op.create_index(batch_op.f('ix_conversations_conversation_id'), ['conversation_id'], unique=True)

    with op.batch_alter_table('raw_stocks', schema=None) as batch_op:
        batch_op.alter_column('deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)

    with op.batch_alter_table('raw_transactions', schema=None) as batch_op:
        batch_op.alter_column('deleted',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
        batch_op.alter_column('future',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)

    with op.batch_alter_table('sync_stats', schema=None) as batch_op:
        batch_op.alter_column('metrics',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)

    with op.batch_alter_table('sync_tasks', schema=None) as batch_op:
        batch_op.alter_column('parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('result_summary',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.alter_column('notification_settings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('display_preferences',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.alter_column('budget_settings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
        batch_op.alter_column('is_superuser',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
        batch_op.drop_constraint('users_email_key', type_='unique')
        batch_op.drop_index('ix_users_email')
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    with op.batch_alter_table('webhook_events', schema=None) as batch_op:
        batch_op.alter_column('event_content',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
        batch_op.alter_column('processed',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('webhook_events', schema=None) as batch_op:
        batch_op.alter_column('processed',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
        batch_op.alter_column('event_content',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_index('ix_users_email', ['email'], unique=False)
        batch_op.create_unique_constraint('users_email_key', ['email'])
        batch_op.alter_column('is_superuser',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)

    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.alter_column('budget_settings',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('display_preferences',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('notification_settings',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('sync_tasks', schema=None) as batch_op:
        batch_op.alter_column('result_summary',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('parameters',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('sync_stats', schema=None) as batch_op:
        batch_op.alter_column('metrics',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)

    with op.batch_alter_table('raw_transactions', schema=None) as batch_op:
        batch_op.alter_column('future',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
        batch_op.alter_column('deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)

    with op.batch_alter_table('raw_stocks', schema=None) as batch_op:
        batch_op.alter_column('deleted',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_conversations_conversation_id'))
        batch_op.create_index('ix_conversations_conversation_id', ['conversation_id'], unique=False)
        batch_op.create_unique_constraint('conversations_conversation_id_key', ['conversation_id'])
        batch_op.alter_column('data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
        batch_op.alter_column('total_turns',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)

    with op.batch_alter_table('conversation_turns', schema=None) as batch_op:
        batch_op.alter_column('data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)

    with op.batch_alter_table('bridge_insights', schema=None) as batch_op:
        batch_op.alter_column('monthly_kpis',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('global_kpis',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    with op.batch_alter_table('account_information', schema=None) as batch_op:
        batch_op.alter_column('account_details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)

    op.drop_table('user_budget_profile')
    op.drop_table('seasonal_patterns')
    op.drop_table('savings_goals')
    op.drop_table('fixed_charges')
    op.drop_table('budget_recommendations')
    # ### end Alembic commands ###
