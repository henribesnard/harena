# Configuration des Entités Harena - Version Autonome
# Version: 2.0.0
# Date: 2025-01-XX
# Approche: Few-shot learning pour autonomie LLM

metadata:
  version: "2.0.0"
  description: "Configuration allégée pour extraction autonome par LLM"
  approach: "few_shot_learning"
  last_updated: "2025-01-XX"

# ============================================================================
# ENTITÉS ALIGNÉES SEARCH_SERVICE
# ============================================================================

search_service_fields:
  description: "Champs réels disponibles dans search_service"
  temporal_fields:
    - "date"  # Format ISO 8601, ranges supportés
  monetary_fields:
    - "amount"      # Montant signé 
    - "amount_abs"  # Montant absolu pour filtres ranges
  text_fields:
    - "merchant_name"        # Nom marchand (textuel + .keyword)
    - "category_name"        # Catégorie (textuel + .keyword)
    - "primary_description"  # Description transaction
    - "operation_type"       # Type opération bancaire
  enum_fields:
    - "transaction_type"  # "credit" | "debit"
    - "account_id"        # ID numérique compte
    - "account_type"      # Type compte
  derived_fields:
    - "weekday"     # Jour semaine (.keyword pour agrégations)
    - "month_year"  # Date pour agrégations temporelles

# ============================================================================
# ENTITÉS TEMPORELLES - PATTERNS GÉNÉRIQUES
# ============================================================================
temporal_entities:
  periode_temporelle:
    description: "Expressions temporelles à normaliser en ranges ISO 8601"
    type: "temporal_range"
    target_field: "date"
    
    few_shot_examples:
      - input: "le mois dernier"
        output: {"gte": "2024-12-01", "lte": "2024-12-31"}
        explanation: "Mois précédent complet"
      
      - input: "ces 30 derniers jours"
        output: {"gte": "2025-01-10", "lte": "2025-02-09"}
        explanation: "Range relatif depuis aujourd'hui"
      
      - input: "en mai 2024"
        output: {"gte": "2024-05-01", "lte": "2024-05-31"}
        explanation: "Mois spécifique d'une année"
      
      - input: "depuis janvier"
        output: {"gte": "2025-01-01"}
        explanation: "Range ouvert depuis date"
      
      - input: "avant le 15 mars"
        output: {"lte": "2025-03-15"}
        explanation: "Range ouvert jusqu'à date"

    extraction_guidance:
      - "Convertir toutes expressions temporelles en ranges ISO 8601"
      - "Gérer les expressions relatives ('cette semaine', 'le mois dernier')"
      - "Interpréter les expressions floues ('récemment' = 7 derniers jours)"
      - "Distinguer entre dates absolues et relatives"

  granularite_temporelle:
    description: "Granularité pour agrégations temporelles"
    type: "aggregation_interval"
    target_aggregation: "date_histogram.calendar_interval"
    
    few_shot_examples:
      - input: "par mois"
        output: "1M"
      - input: "quotidien" 
        output: "1d"
      - input: "hebdomadaire"
        output: "1w"
      - input: "trimestriel"
        output: "quarter"

# ============================================================================
# ENTITÉS MONÉTAIRES - PATTERNS GÉNÉRIQUES
# ============================================================================
monetary_entities:
  montant:
    description: "Montants avec opérateurs de comparaison"
    type: "monetary_range"
    target_fields: ["amount", "amount_abs"]
    
    few_shot_examples:
      - input: "plus de 100 euros"
        output: {"amount_abs": {"gte": 100}}
        explanation: "Opérateur supérieur avec montant absolu"
      
      - input: "entre 50 et 200€"
        output: {"amount_abs": {"gte": 50, "lte": 200}}
        explanation: "Range de montants"
      
      - input: "moins de 25 euros"
        output: {"amount_abs": {"lte": 25}}
        explanation: "Opérateur inférieur"
      
      - input: "exactement 75€"
        output: {"amount_abs": 75}
        explanation: "Montant exact"
      
      - input: "mes plus gros achats"
        output: {"sort": [{"amount_abs": {"order": "desc"}}]}
        explanation: "Tri par montant décroissant"

    extraction_guidance:
      - "Utiliser amount_abs pour filtres de montants (toujours positif)"
      - "Utiliser amount pour tri si le signe importe"
      - "Détecter opérateurs: plus de/moins de/entre/exactement"
      - "Normaliser devises vers EUR par défaut"

# ============================================================================
# ENTITÉS TEXTUELLES - PATTERNS GÉNÉRIQUES
# ============================================================================
textual_entities:
  merchant_search:
    description: "Recherche de marchands par nom"
    type: "text_search"
    target_field: "merchant_name"
    
    few_shot_examples:
      - input: "mes achats chez Amazon"
        output: {"query": "Amazon"}
        explanation: "Recherche textuelle libre"
      
      - input: "transactions Carrefour"
        output: {"filters": {"merchant_name": "Carrefour"}}
        explanation: "Filtre exact sur marchand"
      
      - input: "tous mes restaurants"
        output: {"query": "restaurant"}
        explanation: "Recherche textuelle large"

    extraction_guidance:
      - "Préférer query textuelle pour noms partiels"
      - "Utiliser filtre exact si nom complet mentionné"
      - "Gérer les variations orthographiques"

  category_search:
    description: "Recherche par catégorie de transaction"
    type: "category_filter"
    target_field: "category_name"
    
    few_shot_examples:
      - input: "dépenses alimentaires"
        output: {"query": "food alimentation"}
        explanation: "Recherche textuelle sur catégories liées"
      
      - input: "frais de transport"
        output: {"query": "transport mobilité"}
        explanation: "Recherche avec synonymes"

    extraction_guidance:
      - "Ne pas imposer de liste fixe de catégories"
      - "Laisser l'agent identifier les synonymes naturellement"
      - "Utiliser recherche textuelle pour flexibilité"

# ============================================================================
# ENTITÉS MÉTIER - PATTERNS GÉNÉRIQUES
# ============================================================================
business_entities:
  transaction_type:
    description: "Type de transaction (crédit/débit)"
    type: "enum_filter"
    target_field: "transaction_type"
    
    few_shot_examples:
      - input: "mes dépenses"
        output: {"transaction_type": "debit"}
      
      - input: "mes revenus"
        output: {"transaction_type": "credit"}
      
      - input: "mes virements reçus"
        output: {"transaction_type": "credit"}

    extraction_guidance:
      - "Débit = sorties d'argent, dépenses, achats"
      - "Crédit = entrées d'argent, revenus, versements"

  account_reference:
    description: "Référence à un compte spécifique"
    type: "account_filter"
    target_field: "account_id"
    
    few_shot_examples:
      - input: "mon compte courant"
        output: {"account_type": "checking"}
        explanation: "Filtre par type si pas d'ID spécifique"
      
      - input: "compte 12345"
        output: {"account_id": 12345}
        explanation: "Filtre par ID si fourni"

    extraction_guidance:
      - "Utiliser account_id si ID numérique fourni"
      - "Sinon utiliser account_type pour types génériques"

# ============================================================================
# ENTITÉS CONTEXTUELLES - PATTERNS GÉNÉRIQUES
# ============================================================================
contextual_entities:
  reference_contextuelle:
    description: "Références au contexte conversationnel précédent"
    type: "context_reference"
    
    few_shot_examples:
      - input: "et pour avril ?"
        context_modification: {"date": {"gte": "2025-04-01", "lte": "2025-04-30"}}
        explanation: "Modification du paramètre temporel"
      
      - input: "pareil pour Amazon"
        context_modification: {"merchant_name": "Amazon"}
        explanation: "Modification du marchand"
      
      - input: "la même chose mais en 2023"
        context_modification: {"date": {"gte": "2023-01-01", "lte": "2023-12-31"}}
        explanation: "Modification de l'année"

    extraction_guidance:
      - "Identifier les références au contexte précédent"
      - "Détecter les modifications de paramètres"
      - "Préserver la structure de requête de base"

# ============================================================================
# ENTITÉS ANALYTIQUES - PATTERNS GÉNÉRIQUES
# ============================================================================
analytical_entities:
  aggregation_request:
    description: "Demandes d'analyses et d'agrégations"
    type: "aggregation_intent"
    
    few_shot_examples:
      - input: "répartition par catégorie"
        output: {
          "aggregations": {
            "categories": {
              "terms": {"field": "category_name.keyword"},
              "aggs": {"total": {"sum": {"field": "amount_abs"}}}
            }
          }
        }
      
      - input: "évolution mensuelle"
        output: {
          "aggregations": {
            "monthly_trend": {
              "date_histogram": {"field": "date", "calendar_interval": "1M"},
              "aggs": {"total": {"sum": {"field": "amount_abs"}}}
            }
          }
        }
      
      - input: "top 10 marchands"
        output: {
          "aggregations": {
            "top_merchants": {
              "terms": {"field": "merchant_name.keyword", "size": 10},
              "aggs": {"spending": {"sum": {"field": "amount_abs"}}}
            }
          }
        }

    extraction_guidance:
      - "Identifier les demandes d'analyses"
      - "Mapper vers agrégations Elasticsearch appropriées"
      - "Utiliser .keyword pour termes exacts dans agrégations"

# ============================================================================
# STRATÉGIES D'EXTRACTION AUTONOME
# ============================================================================
extraction_strategies:
  llm_autonomy:
    description: "Stratégies pour autonomie maximum de l'agent LLM"
    principles:
      - "Favoriser few-shot learning sur des listes prédéfinies"
      - "Permettre à l'agent d'inférer les entités du contexte"
      - "Gérer les variations naturelles du langage"
      - "S'adapter aux nouveaux cas non prévus"
    
    fallback_strategies:
      - "Si entité non reconnue → recherche textuelle libre"
      - "Si montant ambigu → utiliser amount_abs par défaut"
      - "Si date imprécise → appliquer range large"
      - "Si marchand inconnu → recherche partielle"

  validation_approach:
    description: "Validation légère plutôt que contraignante"
    rules:
      - "Valider la syntaxe JSON de sortie"
      - "Vérifier que les champs existent dans search_service"
      - "Permettre les requêtes créatives non prévues"
      - "Logger les nouveaux patterns pour apprentissage"

# ============================================================================
# CONFIGURATION GLOBALE
# ============================================================================
global_settings:
  extraction_method: "llm_autonomous_with_few_shot"
  validation_level: "permissive"
  learning_enabled: true
  context_window: 5  # Garder 5 échanges pour contexte
  
output_format:
  target: "SearchServiceQuery"
  required_fields: ["user_id"]
  optional_fields: ["query", "filters", "aggregations", "sort", "page_size"]
  
performance:
  cache_patterns: true
  adaptive_learning: true
  pattern_recognition: true