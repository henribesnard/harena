"""
üîç Script de Diagnostic Package intent_rules

Ce script diagnostique pourquoi les fonctions package ne fonctionnent pas
malgr√© la pr√©sence des fichiers JSON.
"""

import json
from pathlib import Path
import sys

# Ajout du path
sys.path.append(str(Path(__file__).parent))

def diagnose_files():
    """Diagnostic des fichiers JSON"""
    print("üîç DIAGNOSTIC DES FICHIERS JSON")
    print("=" * 50)
    
    intent_rules_dir = Path("intent_rules")
    
    files_to_check = [
        "financial_patterns.json",
        "conversational_patterns.json", 
        "entity_patterns.json"
    ]
    
    for filename in files_to_check:
        file_path = intent_rules_dir / filename
        print(f"\nüìÅ Checking {filename}:")
        
        if not file_path.exists():
            print(f"  ‚ùå File not found: {file_path}")
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"  ‚úÖ File exists and valid JSON")
            print(f"  üìä File size: {file_path.stat().st_size} bytes")
            
            if filename == "financial_patterns.json":
                intents = data.get("intents", {})
                print(f"  üí∞ Financial intents: {len(intents)}")
                for intent_name in intents.keys():
                    print(f"     - {intent_name}")
            
            elif filename == "conversational_patterns.json":
                intents = data.get("intents", {})
                print(f"  üí¨ Conversational intents: {len(intents)}")
                for intent_name in intents.keys():
                    print(f"     - {intent_name}")
            
            elif filename == "entity_patterns.json":
                entities = data.get("entity_types", {})
                print(f"  üìù Entity types: {len(entities)}")
                for entity_name in entities.keys():
                    print(f"     - {entity_name}")
                    
        except Exception as e:
            print(f"  ‚ùå Error reading file: {e}")

def diagnose_package_loading():
    """Diagnostic du chargement du package"""
    print("\n\nüîç DIAGNOSTIC DU CHARGEMENT PACKAGE")
    print("=" * 50)
    
    try:
        # Import direct du package
        import intent_rules
        print("‚úÖ Package intent_rules imported successfully")
        
        # Test get_default_loader
        print("\nüìã Testing get_default_loader:")
        loader = intent_rules.get_default_loader()
        print(f"  ‚úÖ Loader created")
        print(f"  üìä Financial rules: {len(loader.financial_rules)}")
        print(f"  üìä Conversational rules: {len(loader.conversational_rules)}")
        print(f"  üìä Entity patterns: {len(loader.entity_patterns)}")
        
        # Affichage des r√®gles conversationnelles
        print(f"\nüí¨ Conversational rules details:")
        for name, rule in loader.conversational_rules.items():
            print(f"     - {name}: category={rule.intent_category}, confidence={rule.confidence}")
        
        # Test get_package_info
        print(f"\nüì¶ Testing get_package_info:")
        info = intent_rules.get_package_info()
        print(f"  üìä Package info rules count:")
        print(f"     - Financial: {info['rules']['financial_count']}")
        print(f"     - Conversational: {info['rules']['conversational_count']}")
        print(f"     - Entity types: {info['rules']['entity_types_count']}")
        
        # Test quick_detect_intent
        print(f"\nüéØ Testing quick_detect_intent:")
        test_cases = ["bonjour", "salut", "aide", "help", "hello"]
        
        for test_case in test_cases:
            match = intent_rules.quick_detect_intent(test_case)
            if match:
                print(f"  ‚úÖ '{test_case}' -> {match.intent} (conf: {match.confidence:.3f})")
            else:
                print(f"  ‚ùå '{test_case}' -> NO MATCH")
        
        # Test manual engine
        print(f"\nüîß Testing manual engine creation:")
        engine = intent_rules.create_rule_engine(loader)
        
        for test_case in test_cases:
            match = engine.match_intent(test_case)
            if match:
                print(f"  ‚úÖ '{test_case}' -> {match.intent} (conf: {match.confidence:.3f})")
            else:
                print(f"  ‚ùå '{test_case}' -> NO MATCH")
                
    except Exception as e:
        print(f"‚ùå Error in package loading: {e}")
        import traceback
        traceback.print_exc()

def diagnose_rule_validation():
    """Diagnostic de validation des r√®gles"""
    print("\n\nüîç DIAGNOSTIC VALIDATION DES R√àGLES")
    print("=" * 50)
    
    try:
        from intent_rules.rule_loader import RuleLoader
        
        # Chargement direct avec path explicite
        rules_dir = Path("intent_rules")
        loader = RuleLoader(rules_dir)
        
        print(f"‚úÖ Direct RuleLoader created")
        print(f"üìä Rules loaded:")
        print(f"   - Financial: {len(loader.financial_rules)}")
        print(f"   - Conversational: {len(loader.conversational_rules)}")
        print(f"   - Entity patterns: {len(loader.entity_patterns)}")
        
        # Validation des r√®gles
        errors = loader.validate_rules()
        print(f"\nüîç Validation results:")
        
        for category, error_list in errors.items():
            if error_list:
                print(f"   ‚ùå {category}: {len(error_list)} errors")
                for error in error_list[:3]:  # Afficher les 3 premi√®res erreurs
                    print(f"      - {error}")
            else:
                print(f"   ‚úÖ {category}: no errors")
        
        # Test d'un cas simple
        from intent_rules.rule_engine import create_rule_engine
        engine = create_rule_engine(loader)
        
        print(f"\nüéØ Testing simple cases with direct engine:")
        simple_cases = ["bonjour", "aide"]
        
        for case in simple_cases:
            match = engine.match_intent(case)
            if match:
                print(f"   ‚úÖ '{case}' -> {match.intent}")
            else:
                print(f"   ‚ùå '{case}' -> NO MATCH")
                
    except Exception as e:
        print(f"‚ùå Error in rule validation: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fonction principale de diagnostic"""
    print("üöÄ DIAGNOSTIC COMPLET PACKAGE INTENT_RULES")
    print("=" * 70)
    
    # 1. Diagnostic des fichiers
    diagnose_files()
    
    # 2. Diagnostic du chargement package
    diagnose_package_loading()
    
    # 3. Diagnostic validation des r√®gles
    diagnose_rule_validation()
    
    print("\n" + "=" * 70)
    print("üîç Diagnostic termin√© !")

if __name__ == "__main__":
    main()