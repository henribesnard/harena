{
  "version": "1.0",
  "last_updated": "2025-01-30",
  "description": "Patterns de détection d'intentions financières pour recherche de transactions",
  "intents": {
    "SEARCH_BY_TEXT": {
      "description": "Recherche textuelle libre dans les transactions",
      "intent_category": "SEARCH",
      "confidence": 0.75,
      "priority": 5,
      "patterns": [
        {
          "regex": "\\b(recherche|cherche|trouve|voir)\\s+(.+)\\b",
          "case_sensitive": false,
          "weight": 0.8,
          "extract_query": true,
          "extract_group": 2
        },
        {
          "regex": "\\b(transactions?|opérations?)\\s+(.+)\\b",
          "case_sensitive": false,
          "weight": 0.9,
          "extract_query": true,
          "extract_group": 2
        }
      ],
      "exact_matches": [
        "recherche",
        "cherche transactions",
        "voir opérations"
      ],
      "search_parameters": {
        "query_type": "text_search",
        "primary_fields": ["searchable_text", "primary_description", "merchant_name"],
        "fuzziness": "AUTO",
        "minimum_should_match": "75%"
      },
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        }
      ],
      "examples": [
        "recherche pizza",
        "transactions pharmacie",
        "voir mes achats électronique"
      ]
    },

    "SEARCH_BY_MERCHANT": {
      "description": "Recherche par marchand ou enseigne spécifique",
      "intent_category": "SEARCH",
      "confidence": 0.90,
      "priority": 2,
      "patterns": [
        {
          "regex": "\\b(amazon|Netflix|carrefour|uber|sncf|mcdo|mcdonald|apple|google)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "merchant", "normalize": "uppercase"}
        },
        {
          "regex": "\\b(mes\\s+)?(achats?|transactions?|dépenses?)\\s+(amazon|netflix|carrefour|uber|sncf|mcdo|apple|google)\\b",
          "case_sensitive": false,
          "weight": 0.95,
          "entity_extract": {"type": "merchant", "extract_group": 3, "normalize": "uppercase"}
        },
        {
          "regex": "\\b(chez|à)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)?)\\b",
          "case_sensitive": false,
          "weight": 0.7,
          "entity_extract": {"type": "merchant", "extract_group": 2}
        }
      ],
      "exact_matches": [
        "amazon",
        "netflix",
        "mes achats amazon",
        "transactions netflix",
        "dépenses carrefour",
        "chez uber",
        "mcdo",
        "sncf"
      ],
      "search_parameters": {
        "query_type": "text_search_with_filters",
        "primary_fields": ["primary_description", "merchant_name"],
        "boost_merchant": true
      },
      "entity_patterns": [
        {
          "regex": "\\b(amazon)\\b",
          "type": "merchant",
          "normalized_value": "AMAZON"
        },
        {
          "regex": "\\b(netflix)\\b",
          "type": "merchant", 
          "normalized_value": "NETFLIX"
        },
        {
          "regex": "\\b(carrefour)\\b",
          "type": "merchant",
          "normalized_value": "CARREFOUR"
        },
        {
          "regex": "\\b(uber)\\b",
          "type": "merchant",
          "normalized_value": "UBER"
        },
        {
          "regex": "\\b(sncf)\\b",
          "type": "merchant",
          "normalized_value": "SNCF"
        },
        {
          "regex": "\\b(mcdo|mcdonald)\\b",
          "type": "merchant",
          "normalized_value": "MCDONALD'S"
        }
      ],
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        },
        {
          "field": "operation_type.keyword",
          "operator": "eq", 
          "value": "card"
        }
      ],
      "examples": [
        "mes achats Amazon",
        "transactions Netflix ce mois",
        "dépenses chez Carrefour",
        "uber cette semaine"
      ]
    },

    "SEARCH_BY_CATEGORY": {
      "description": "Recherche par catégorie de dépense",
      "intent_category": "SEARCH", 
      "confidence": 0.88,
      "priority": 3,
      "patterns": [
        {
          "regex": "\\b(restaurant|resto|repas|dîner|déjeuner|manger)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "restaurant"}
        },
        {
          "regex": "\\b(courses|alimentation|supermarché|épicerie|nourriture)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "alimentation"}
        },
        {
          "regex": "\\b(transport|essence|carburant|taxi|métro|bus|train)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "transport"}
        },
        {
          "regex": "\\b(santé|pharmacie|médecin|dentiste|hôpital|clinique)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "santé"}
        },
        {
          "regex": "\\b(shopping|vêtements|habits|chaussures|mode)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "shopping"}
        },
        {
          "regex": "\\b(loisirs|cinéma|sport|gym|divertissement)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "category", "value": "loisirs"}
        }
      ],
      "exact_matches": [
        "mes restaurants",
        "dépenses restaurant",
        "mes courses",
        "alimentation",
        "transport",
        "mes transports",
        "pharmacie",
        "santé",
        "shopping",
        "loisirs"
      ],
      "search_parameters": {
        "query_type": "filtered_search",
        "primary_fields": ["category_name", "primary_description"]
      },
      "category_mappings": {
        "restaurant": ["restaurant", "resto", "repas", "dîner", "déjeuner", "manger"],
        "alimentation": ["courses", "alimentation", "supermarché", "épicerie", "nourriture"],
        "transport": ["transport", "essence", "carburant", "taxi", "métro", "bus", "train"],
        "santé": ["santé", "pharmacie", "médecin", "dentiste", "hôpital", "clinique"],
        "shopping": ["shopping", "vêtements", "habits", "chaussures", "mode"],
        "loisirs": ["loisirs", "cinéma", "sport", "gym", "divertissement"]
      },
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        }
      ],
      "examples": [
        "mes restaurants",
        "dépenses restaurant ce mois",
        "mes courses",
        "transport cette semaine",
        "pharmacie"
      ]
    },

    "SEARCH_BY_AMOUNT": {
      "description": "Recherche par montant ou plage de montants",
      "intent_category": "SEARCH",
      "confidence": 0.85,
      "priority": 4,
      "patterns": [
        {
          "regex": "\\b(plus\\s+de|supérieur|>)\\s+(\\d+(?:[,.]\\d+)?)\\s*(?:euros?|€)?\\b",
          "case_sensitive": false,
          "weight": 0.9,
          "entity_extract": {"type": "amount_filter", "operator": "gt", "extract_group": 2}
        },
        {
          "regex": "\\b(moins\\s+de|inférieur|<)\\s+(\\d+(?:[,.]\\d+)?)\\s*(?:euros?|€)?\\b",
          "case_sensitive": false,
          "weight": 0.9,
          "entity_extract": {"type": "amount_filter", "operator": "lt", "extract_group": 2}
        },
        {
          "regex": "\\b(entre)\\s+(\\d+(?:[,.]\\d+)?)\\s*(?:et|-)\\s*(\\d+(?:[,.]\\d+)?)\\s*(?:euros?|€)?\\b",
          "case_sensitive": false,
          "weight": 0.95,
          "entity_extract": {"type": "amount_range", "extract_groups": [2, 3]}
        },
        {
          "regex": "\\b(\\d+(?:[,.]\\d+)?)\\s*(?:euros?|€)\\b",
          "case_sensitive": false,
          "weight": 0.7,
          "entity_extract": {"type": "amount_exact", "extract_group": 1}
        }
      ],
      "exact_matches": [
        "plus de 50 euros",
        "moins de 100€",
        "entre 10 et 50 euros",
        "50 euros",
        "100€"
      ],
      "search_parameters": {
        "query_type": "filtered_search",
        "primary_fields": ["amount", "amount_abs"]
      },
      "amount_operators": {
        "gt": "gte",
        "lt": "lte", 
        "eq": "eq",
        "between": "range"
      },
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        }
      ],
      "examples": [
        "plus de 50 euros",
        "transactions supérieures à 100€",
        "entre 20 et 80 euros",
        "dépenses de 25€"
      ]
    },

    "SEARCH_BY_DATE": {
      "description": "Recherche par période temporelle",
      "intent_category": "SEARCH",
      "confidence": 0.87,
      "priority": 3,
      "patterns": [
        {
          "regex": "\\b(ce\\s+mois|mois\\s+en\\s+cours)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "period", "value": "current_month"}
        },
        {
          "regex": "\\b(mois\\s+dernier|dernier\\s+mois)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "period", "value": "last_month"}
        },
        {
          "regex": "\\b(cette\\s+semaine|semaine\\s+en\\s+cours)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "period", "value": "current_week"}
        },
        {
          "regex": "\\b(semaine\\s+dernière|dernière\\s+semaine)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "period", "value": "last_week"}
        },
        {
          "regex": "\\b(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)\\b",
          "case_sensitive": false,
          "weight": 0.9,
          "entity_extract": {"type": "month", "extract_group": 0}
        },
        {
          "regex": "\\b(hier|avant-hier)\\b",
          "case_sensitive": false,
          "weight": 0.8,
          "entity_extract": {"type": "day", "extract_group": 0}
        },
        {
          "regex": "\\b(\\d{4})\\b",
          "case_sensitive": false,
          "weight": 0.7,
          "entity_extract": {"type": "year", "extract_group": 1}
        }
      ],
      "exact_matches": [
        "ce mois",
        "mois dernier",
        "cette semaine",
        "semaine dernière",
        "janvier",
        "février",
        "mars",
        "avril",
        "mai",
        "juin",
        "juillet",
        "août",
        "septembre",
        "octobre",
        "novembre",
        "décembre",
        "hier",
        "2025"
      ],
      "search_parameters": {
        "query_type": "temporal_search",
        "primary_fields": ["date", "month_year"]
      },
      "date_mappings": {
        "current_month": "2025-01",
        "last_month": "2024-12",
        "current_week": "current_week_calculation",
        "last_week": "last_week_calculation",
        "janvier": "2025-01",
        "février": "2025-02",  
        "mars": "2025-03",
        "avril": "2025-04",
        "mai": "2025-05",
        "juin": "2025-06",
        "juillet": "2025-07",
        "août": "2025-08",
        "septembre": "2025-09",
        "octobre": "2025-10",
        "novembre": "2025-11",
        "décembre": "2025-12",
        "hier": "yesterday_calculation"
      },
      "default_filters": [],
      "examples": [
        "transactions ce mois",
        "dépenses mois dernier",
        "opérations janvier",
        "cette semaine",
        "hier"
      ]
    },

    "SEARCH_BY_OPERATION_TYPE": {
      "description": "Recherche par type d'opération bancaire",
      "intent_category": "SEARCH",
      "confidence": 0.90,
      "priority": 2,
      "patterns": [
        {
          "regex": "\\b(carte|paiement\\s+carte|cb|carte\\s+bleue)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "operation_type", "value": "card"}
        },
        {
          "regex": "\\b(virement|virements?)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "operation_type", "value": "transfer"}
        },
        {
          "regex": "\\b(prélèvement|prélèvements?)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "operation_type", "value": "direct_debit"}
        },
        {
          "regex": "\\b(chèque|chèques?)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "operation_type", "value": "check"}
        },
        {
          "regex": "\\b(retrait|retraits?|distributeur|dab)\\b",
          "case_sensitive": false,
          "weight": 1.0,
          "entity_extract": {"type": "operation_type", "value": "withdrawal"}
        }
      ],
      "exact_matches": [
        "mes cartes",
        "paiements carte",
        "cb",
        "virements",
        "prélèvements",
        "chèques",
        "retraits",
        "distributeur"
      ],
      "search_parameters": {
        "query_type": "filtered_search",
        "primary_fields": ["operation_type", "primary_description"]
      },
      "operation_type_mappings": {
        "card": ["carte", "cb", "carte bleue", "paiement carte"],
        "transfer": ["virement", "virements"],
        "direct_debit": ["prélèvement", "prélèvements"],
        "check": ["chèque", "chèques"],
        "withdrawal": ["retrait", "retraits", "distributeur", "dab"]
      },
      "default_filters": [],
      "examples": [
        "mes paiements carte",
        "virements reçus",
        "prélèvements ce mois",
        "retraits distributeur"
      ]
    },

    "ANALYZE_SPENDING": {
      "description": "Analyse des dépenses avec calculs et agrégations",
      "intent_category": "ANALYZE",
      "confidence": 0.85,
      "priority": 3,
      "patterns": [
        {
          "regex": "\\b(combien|montant|total|somme)\\s+(j'ai\\s+)?dépensé\\b",
          "case_sensitive": false,
          "weight": 1.0
        },
        {
          "regex": "\\b(dépenses?\\s+totales?|budget\\s+utilisé|coût\\s+total)\\b",
          "case_sensitive": false,
          "weight": 0.9
        },
        {
          "regex": "\\b(analyse|bilan|résumé)\\s+(dépenses?|budget)\\b",
          "case_sensitive": false,
          "weight": 0.8
        },
        {
          "regex": "\\bdépensé\\s+en\\s+(\\w+)\\b",
          "case_sensitive": false,
          "weight": 0.95,
          "entity_extract": {"type": "category", "extract_group": 1}
        }
      ],
      "exact_matches": [
        "combien j'ai dépensé",
        "total dépenses",
        "montant dépensé",
        "budget utilisé",
        "analyse dépenses",
        "bilan financier",
        "dépensé en restaurant"
      ],
      "search_parameters": {
        "query_type": "aggregation_search",
        "aggregations_enabled": true,
        "metrics": ["sum", "count", "avg"]
      },
      "default_aggregations": [
        {
          "type": "sum",
          "field": "amount_abs"
        },
        {
          "type": "count", 
          "field": "transaction_id"
        }
      ],
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        }
      ],
      "examples": [
        "combien j'ai dépensé ce mois",
        "total dépenses restaurant",
        "analyse budget janvier",
        "combien j'ai dépensé en restaurant"
      ]
    },

    "ANALYZE_TRENDS": {
      "description": "Analyse évolution et tendances dépenses",
      "intent_category": "ANALYZE",
      "confidence": 0.80,
      "priority": 4,
      "patterns": [
        {
          "regex": "\\b(évolution|tendance|progression)\\s+(dépenses?|budget)\\b",
          "case_sensitive": false,
          "weight": 1.0
        },
        {
          "regex": "\\b(comparaison|comparer)\\s+(mois|année|période)\\b",
          "case_sensitive": false,
          "weight": 0.9
        },
        {
          "regex": "\\b(historique|suivi)\\s+(dépenses?|budget)\\b",
          "case_sensitive": false,
          "weight": 0.8
        }
      ],
      "exact_matches": [
        "évolution dépenses",
        "tendance budget",
        "comparaison mensuelle",
        "historique dépenses"
      ],
      "search_parameters": {
        "query_type": "temporal_aggregation",
        "aggregations_enabled": true,
        "group_by": ["month_year"]
      },
      "default_aggregations": [
        {
          "type": "sum",
          "field": "amount_abs",
          "group_by": "month_year"
        }
      ],
      "default_filters": [
        {
          "field": "transaction_type.keyword",
          "operator": "eq",
          "value": "debit"
        }
      ],
      "examples": [
        "évolution dépenses mensuelle",
        "comparaison avec mois dernier",
        "tendance budget 2025"
      ]
    },

    "COUNT_TRANSACTIONS": {
      "description": "Comptage d'opérations et transactions",
      "intent_category": "ANALYZE",
      "confidence": 0.88,
      "priority": 2,
      "patterns": [
        {
          "regex": "\\b(combien|nombre)\\s+(d'opérations?|de\\s+transactions?|d'achats?)\\b",
          "case_sensitive": false,
          "weight": 1.0
        },
        {
          "regex": "\\b(comptage|décompte)\\s+(opérations?|transactions?)\\b",
          "case_sensitive": false,
          "weight": 0.9
        }
      ],
      "exact_matches": [
        "combien d'opérations",
        "nombre de transactions",
        "combien d'achats",
        "comptage opérations"
      ],
      "search_parameters": {
        "query_type": "count_aggregation",
        "aggregations_enabled": true,
        "metrics": ["count"]
      },
      "default_aggregations": [
        {
          "type": "count",
          "field": "transaction_id"
        }
      ],
      "default_filters": [],
      "examples": [
        "combien d'opérations ce mois",
        "nombre de transactions restaurant",
        "combien d'achats Amazon"
      ]
    }
  },
  
  "global_settings": {
    "default_limit": 25,
    "default_offset": 0,
    "default_sort": [
      {"field": "_score", "order": "desc"},
      {"field": "date", "order": "desc"}
    ],
    "required_filters": [
      {
        "field": "user_id",
        "description": "Isolation utilisateur obligatoire"
      }
    ],
    "boost_settings": {
      "primary_description": 1.5,
      "merchant_name": 1.8,
      "searchable_text": 2.0,
      "category_name": 1.0
    }
  }
}