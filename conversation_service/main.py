# conversation_service/main.py
import logging
import sys
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from datetime import datetime
import time

from .config.settings import settings
from .api.routes import router
from .clients.deepseek_client import deepseek_client
from .agents.intent_classifier import intent_classifier

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(module)s:%(lineno)d - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger("conversation_service")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire du cycle de vie de l'application.
    Initialise les ressources au d√©marrage et les lib√®re √† l'arr√™t.
    """
    logger.info("üöÄ D√©marrage du Conversation Service...")
    
    try:
        # Validation de la configuration
        validation = settings.validate_configuration()
        if not validation["valid"]:
            logger.error(f"Configuration invalide: {validation['errors']}")
            raise RuntimeError(f"Configuration invalide: {validation['errors']}")
        
        if validation["warnings"]:
            logger.warning(f"Avertissements configuration: {validation['warnings']}")
        
        # Test de connexion DeepSeek
        logger.info("üîç Test de connexion DeepSeek...")
        health_check = await deepseek_client.health_check()
        
        if health_check["status"] != "healthy":
            logger.error(f"‚ùå DeepSeek non disponible: {health_check.get('error', 'Unknown error')}")
            raise RuntimeError("DeepSeek API non disponible")
        
        logger.info(f"‚úÖ DeepSeek connect√© - Temps de r√©ponse: {health_check['response_time']:.2f}s")
        
        # Initialisation de l'agent
        logger.info("ü§ñ Initialisation de l'agent de classification...")
        agent_metrics = intent_classifier.get_metrics()
        logger.info(f"‚úÖ Agent initialis√© - Seuil confiance: {settings.MIN_CONFIDENCE_THRESHOLD}")
        
        # Service pr√™t
        logger.info(f"üéâ Conversation Service d√©marr√© avec succ√®s!")
        logger.info(f"üìä Configuration: Port {settings.PORT}, Debug: {settings.DEBUG}")
        logger.info(f"üéØ Mod√®le: {settings.DEEPSEEK_CHAT_MODEL}")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage: {str(e)}")
        raise
    
    finally:
        # Nettoyage lors de l'arr√™t
        logger.info("üõë Arr√™t du Conversation Service...")
        
        # Affichage des m√©triques finales
        try:
            agent_metrics = intent_classifier.get_metrics()
            deepseek_metrics = deepseek_client.get_metrics()
            
            logger.info("üìä M√©triques finales:")
            logger.info(f"  - Classifications totales: {agent_metrics['total_classifications']}")
            logger.info(f"  - Taux de succ√®s: {agent_metrics['success_rate']:.1%}")
            logger.info(f"  - Confiance moyenne: {agent_metrics['avg_confidence']:.2f}")
            logger.info(f"  - Temps moyen: {agent_metrics['avg_processing_time']:.2f}s")
            logger.info(f"  - Cache hit rate: {deepseek_metrics['cache_hit_rate']:.1%}")
            
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage des m√©triques: {str(e)}")
        
        logger.info("üëã Service arr√™t√© proprement")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=settings.API_TITLE,
    version=settings.API_VERSION,
    description=settings.API_DESCRIPTION,
    debug=settings.DEBUG,
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware pour logger toutes les requ√™tes"""
    start_time = time.time()
    
    # Log de la requ√™te entrante
    logger.info(f"üì• {request.method} {request.url.path} - {request.client.host}")
    
    try:
        response = await call_next(request)
        
        # Calcul du temps de traitement
        process_time = time.time() - start_time
        
        # Log de la r√©ponse
        logger.info(f"üì§ {request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s")
        
        # Ajout du header de temps de traitement
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
        
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"‚ùå {request.method} {request.url.path} - Error: {str(e)} - {process_time:.3f}s")
        raise

# Gestionnaire d'exceptions global
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire personnalis√© pour les exceptions HTTP"""
    
    logger.warning(f"HTTP Exception: {exc.status_code} - {exc.detail} - {request.url.path}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "status_code": exc.status_code,
            "message": exc.detail,
            "path": str(request.url.path),
            "timestamp": datetime.utcnow().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Gestionnaire pour les exceptions non g√©r√©es"""
    
    logger.error(f"Unhandled exception: {str(exc)} - {request.url.path}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "status_code": 500,
            "message": "Internal server error" if not settings.DEBUG else str(exc),
            "path": str(request.url.path),
            "timestamp": datetime.utcnow().isoformat()
        }
    )

# Inclusion des routes
app.include_router(router)

# Endpoint racine
@app.get("/")
async def root():
    """Endpoint racine du service"""
    return {
        "service": settings.API_TITLE,
        "version": settings.API_VERSION,
        "status": "running",
        "timestamp": datetime.utcnow().isoformat(),
        "endpoints": {
            "health": "/health",
            "metrics": "/metrics",
            "conversation": "/api/v1/conversation/chat",
            "config": "/api/v1/conversation/config"
        }
    }

# Point d'entr√©e principal pour ex√©cution directe
if __name__ == "__main__":
    logger.info(f"üöÄ D√©marrage du serveur sur {settings.HOST}:{settings.PORT}")
    
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
        access_log=True
    )