"""Pydantic models for flexible financial data structures."""

from __future__ import annotations

from datetime import date
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, ConfigDict, field_validator


class FlexibleFinancialTransaction(BaseModel):
    """Represents a financial transaction with flexible metadata."""

    transaction_id: str = Field(
        ..., min_length=1, description="Unique identifier for the transaction"
    )
    amount: float = Field(..., gt=0, description="Transaction amount")
    currency: str = Field(..., min_length=1, description="ISO currency code")
    description: Optional[str] = Field(
        None, description="Optional description of the transaction"
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional transaction metadata"
    )

    @field_validator("transaction_id", "currency")
    @classmethod
    def _not_empty(cls, value: str) -> str:
        if not value:
            raise ValueError("must not be empty")
        return value

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "transaction_id": "txn_123",
                "amount": 99.99,
                "currency": "EUR",
                "description": "Dinner at restaurant",
                "metadata": {"category": "food"},
            }
        }
    )


class DynamicSpendingAnalysis(BaseModel):
    """Aggregated spending information by category and timeframe."""

    total_spent: float = Field(
        ..., ge=0, description="Total amount spent in the analysis period"
    )
    category_breakdown: Dict[str, float] = Field(
        default_factory=dict, description="Amount spent per category"
    )
    timeframe: Optional[str] = Field(
        None, description="Human-readable timeframe of the analysis"
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional analysis metadata"
    )

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "total_spent": 1500.0,
                "category_breakdown": {"food": 500.0, "rent": 1000.0},
                "timeframe": "2024-01",
            }
        }
    )


class FlexibleSearchCriteria(BaseModel):
    """Criteria for searching transactions with flexible fields."""

    keywords: List[str] = Field(
        default_factory=list, description="Keywords to look for in transactions"
    )
    min_amount: Optional[float] = Field(
        None, ge=0, description="Minimum transaction amount to include"
    )
    max_amount: Optional[float] = Field(
        None, ge=0, description="Maximum transaction amount to include"
    )
    start_date: Optional[date] = Field(
        None, description="Start date for the search period"
    )
    end_date: Optional[date] = Field(None, description="End date for the search period")
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional search metadata"
    )

    @field_validator("keywords", mode="before")
    @classmethod
    def _ensure_list(cls, value: Any) -> List[str]:
        if value is None:
            return []
        return list(value)

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "keywords": ["rent", "utilities"],
                "min_amount": 10.0,
                "max_amount": 500.0,
                "start_date": "2024-01-01",
                "end_date": "2024-01-31",
            }
        }
    )


class LLMExtractedInsights(BaseModel):
    """Insights extracted from transactions using an LLM."""

    summary: str = Field(..., description="Textual summary generated by the LLM")
    topics: List[str] = Field(
        default_factory=list, description="List of topics identified in data"
    )
    sentiment: Optional[str] = Field(
        None, description="Overall sentiment assessment"
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional insights metadata"
    )

    @field_validator("summary")
    @classmethod
    def _summary_not_empty(cls, value: str) -> str:
        if not value:
            raise ValueError("must not be empty")
        return value

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "summary": "Spending increased in travel category",
                "topics": ["travel", "entertainment"],
                "sentiment": "positive",
            }
        }
    )

