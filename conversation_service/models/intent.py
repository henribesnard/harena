"""
üìã Mod√®les Pydantic - Structures de donn√©es API

Mod√®les de requ√™tes et r√©ponses pour l'API de d√©tection d'intention.
Bas√©s sur le code fonctionnel existant avec extensions modulaires.
"""

import time
from typing import Dict, List, Optional, Any, Union
from pydantic import BaseModel, Field, validator, root_validator
from .enums import IntentType, EntityType, DetectionMethod, ConfidenceLevel


class IntentRequest(BaseModel):
    """Requ√™te de d√©tection d'intention"""
    
    query: str = Field(
        ..., 
        min_length=1, 
        max_length=500,
        description="Texte utilisateur √† analyser"
    )
    user_id: Optional[Union[str, int]] = Field(
        None, 
        description="Identifiant utilisateur optionnel"
    )
    use_deepseek_fallback: bool = Field(
        True, 
        description="Autoriser fallback DeepSeek si r√®gles insuffisantes"
    )
    force_method: Optional[DetectionMethod] = Field(
        None,
        description="Forcer utilisation m√©thode sp√©cifique (debug)"
    )
    enable_cache: bool = Field(
        True,
        description="Utiliser cache si disponible"
    )
    context: Optional[Dict[str, Any]] = Field(
        None,
        description="Contexte conversationnel optionnel"
    )
    
    @validator('query')
    def validate_query(cls, v):
        """Validation et nettoyage basique de la requ√™te"""
        if not v or not v.strip():
            raise ValueError("Query ne peut pas √™tre vide")
        return v.strip()
    
    @validator('user_id')
    def validate_user_id(cls, v):
        """Validation user_id"""
        if v is not None:
            if isinstance(v, str) and not v.strip():
                raise ValueError("user_id string ne peut pas √™tre vide")
            if isinstance(v, int) and v <= 0:
                raise ValueError("user_id integer doit √™tre positif")
        return v


class IntentResponse(BaseModel):
    """R√©ponse de d√©tection d'intention"""
    
    intent: IntentType = Field(..., description="Intention d√©tect√©e")
    intent_code: str = Field(..., description="Code intention pour search service")
    confidence: float = Field(
        ..., 
        ge=0.0, 
        le=1.0, 
        description="Score de confiance [0-1]"
    )
    processing_time_ms: float = Field(..., description="Temps traitement en ms")
    method_used: DetectionMethod = Field(..., description="M√©thode de d√©tection utilis√©e")
    query: str = Field(..., description="Requ√™te originale")
    entities: Dict[str, Any] = Field(
        default_factory=dict, 
        description="Entit√©s extraites"
    )
    suggestions: List[str] = Field(
        default_factory=list, 
        description="Suggestions contextuelles"
    )
    cost_estimate: float = Field(
        default=0.0, 
        description="Co√ªt estim√© de la requ√™te"
    )
    confidence_level: Optional[ConfidenceLevel] = Field(
        None,
        description="Niveau de confiance cat√©goris√©"
    )
    cached: bool = Field(default=False, description="R√©sultat provient du cache")
    
    @root_validator
    def set_confidence_level(cls, values):
        """Calcule automatiquement le niveau de confiance"""
        confidence = values.get('confidence', 0.0)
        values['confidence_level'] = ConfidenceLevel.from_score(confidence)
        return values


class EntityExtractionRequest(BaseModel):
    """Requ√™te d'extraction d'entit√©s seule"""
    
    query: str = Field(..., min_length=1, max_length=500)
    intent_context: Optional[IntentType] = Field(
        None,
        description="Contexte d'intention pour extraction cibl√©e"
    )
    expected_entities: Optional[List[EntityType]] = Field(
        None,
        description="Types d'entit√©s attendues"
    )


class EntityExtractionResponse(BaseModel):
    """R√©ponse d'extraction d'entit√©s"""
    
    entities: Dict[str, Any] = Field(..., description="Entit√©s extraites")
    confidence_per_entity: Dict[str, float] = Field(
        default_factory=dict,
        description="Confiance par entit√© extraite"
    )
    processing_time_ms: float = Field(..., description="Temps traitement")
    method_used: str = Field(default="pattern_matching", description="M√©thode extraction")


class BatchIntentRequest(BaseModel):
    """Requ√™te de traitement par batch"""
    
    queries: List[str] = Field(
        ..., 
        min_items=1, 
        max_items=100,
        description="Liste des requ√™tes √† traiter"
    )
    user_id: Optional[Union[str, int]] = None
    use_deepseek_fallback: bool = True
    enable_cache: bool = True
    parallel_processing: bool = Field(
        True,
        description="Traitement parall√®le des requ√™tes"
    )
    
    @validator('queries')
    def validate_queries(cls, v):
        """Validation des requ√™tes batch"""
        if not v:
            raise ValueError("Liste de requ√™tes ne peut pas √™tre vide")
        
        # Validation de chaque requ√™te
        for i, query in enumerate(v):
            if not query or not query.strip():
                raise ValueError(f"Requ√™te {i} ne peut pas √™tre vide")
            if len(query) > 500:
                raise ValueError(f"Requ√™te {i} trop longue (max 500 caract√®res)")
        
        return [q.strip() for q in v]


class BatchIntentResponse(BaseModel):
    """R√©ponse de traitement par batch"""
    
    results: List[IntentResponse] = Field(..., description="R√©sultats par requ√™te")
    batch_metrics: Dict[str, Any] = Field(
        default_factory=dict,
        description="M√©triques du batch"
    )
    total_processing_time_ms: float = Field(..., description="Temps total traitement")
    successful_requests: int = Field(..., description="Nombre requ√™tes r√©ussies")
    failed_requests: int = Field(default=0, description="Nombre requ√™tes √©chou√©es")


class HealthResponse(BaseModel):
    """R√©ponse de sant√© du service"""
    
    status: str = Field(default="healthy", description="Statut g√©n√©ral")
    service_name: str = Field(default="conversation-service")
    version: str = Field(default="2.0.0")
    timestamp: float = Field(default_factory=time.time)
    
    # Statuts des composants
    rule_engine_status: str = Field(default="operational")
    deepseek_client_status: str = Field(default="unknown")
    cache_status: str = Field(default="operational")
    
    # M√©triques de base
    total_requests: int = Field(default=0)
    average_latency_ms: float = Field(default=0.0)
    cache_hit_rate: float = Field(default=0.0)
    
    # Configuration active
    deepseek_fallback_enabled: bool = Field(default=True)
    cache_enabled: bool = Field(default=True)


class MetricsResponse(BaseModel):
    """R√©ponse d√©taill√©e des m√©triques"""
    
    # M√©triques de performance
    total_requests: int = Field(default=0)
    avg_latency_ms: float = Field(default=0.0)
    total_cost: float = Field(default=0.0)
    
    # M√©triques de qualit√©
    performance: Dict[str, Any] = Field(default_factory=dict)
    distribution: Dict[str, int] = Field(default_factory=dict)
    cache_metrics: Dict[str, Any] = Field(default_factory=dict)
    efficiency: Dict[str, float] = Field(default_factory=dict)
    
    # M√©triques temporelles
    last_hour_requests: int = Field(default=0)
    last_hour_avg_latency: float = Field(default=0.0)
    
    # Statuts des seuils
    meets_latency_target: bool = Field(default=True)
    meets_accuracy_target: bool = Field(default=True)
    target_latency_ms: float = Field(default=50.0)
    target_accuracy: float = Field(default=0.85)


class IntentSuggestion(BaseModel):
    """Suggestion d'intention avec contexte"""
    
    suggestion_text: str = Field(..., description="Texte de la suggestion")
    target_intent: IntentType = Field(..., description="Intention cible")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confiance suggestion")
    context_relevant: bool = Field(default=True, description="Pertinence contextuelle")


class IntentClassificationResult(BaseModel):
    """R√©sultat d√©taill√© de classification (pour debug)"""
    
    intent: IntentType
    confidence: float
    method: DetectionMethod
    rule_scores: Optional[Dict[str, float]] = None
    ml_scores: Optional[Dict[str, float]] = None
    llm_response: Optional[str] = None
    entities_raw: Optional[Dict[str, Any]] = None
    processing_steps: List[str] = Field(default_factory=list)


class ErrorResponse(BaseModel):
    """R√©ponse d'erreur structur√©e"""
    
    error: str = Field(..., description="Type d'erreur")
    message: str = Field(..., description="Message d'erreur d√©taill√©") 
    details: Optional[Dict[str, Any]] = Field(None, description="D√©tails techniques")
    timestamp: float = Field(default_factory=time.time)
    request_id: Optional[str] = Field(None, description="ID de la requ√™te √©chou√©e")


# Mod√®les utilitaires pour cache et m√©triques
class CacheEntry(BaseModel):
    """Entr√©e du cache avec m√©tadonn√©es"""
    
    query: str
    result: IntentResponse
    created_at: float = Field(default_factory=time.time)
    hit_count: int = Field(default=1)
    last_accessed: float = Field(default_factory=time.time)


class RequestMetadata(BaseModel):
    """M√©tadonn√©es d'une requ√™te pour analytics"""
    
    request_id: str = Field(..., description="ID unique requ√™te")
    user_id: Optional[Union[str, int]] = None
    timestamp: float = Field(default_factory=time.time)
    query_length: int = Field(..., description="Longueur caract√®res")
    detected_intent: IntentType
    confidence: float
    method_used: DetectionMethod
    processing_time_ms: float
    cost: float = Field(default=0.0)
    cached: bool = Field(default=False)
    entities_count: int = Field(default=0)


# Exports publics
__all__ = [
    # Mod√®les de requ√™te principaux
    "IntentRequest",
    "EntityExtractionRequest", 
    "BatchIntentRequest",
    
    # Mod√®les de r√©ponse principaux
    "IntentResponse",
    "EntityExtractionResponse",
    "BatchIntentResponse",
    "HealthResponse",
    "MetricsResponse",
    "ErrorResponse",
    
    # Mod√®les utilitaires
    "IntentSuggestion",
    "IntentClassificationResult",
    "CacheEntry",
    "RequestMetadata"
]