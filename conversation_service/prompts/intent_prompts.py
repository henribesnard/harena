"""
üß† Intent Detection Prompts

Ce module contient les prompts optimis√©s DeepSeek pour la d√©tection d'intention
dans les conversations financi√®res.

Responsabilit√© :
- Classification pr√©cise des intentions utilisateur
- Extraction des entit√©s financi√®res associ√©es
- Gestion du contexte conversationnel
- Format de sortie standardis√© pour les agents AutoGen
"""

from typing import Dict, List, Optional, Any
import json
import logging

logger = logging.getLogger(__name__)

# =============================================================================
# PROMPTS SYST√àME PRINCIPAUX
# =============================================================================

INTENT_SYSTEM_PROMPT = """Vous √™tes un expert en classification d'intentions pour un assistant financier personnel.

VOTRE MISSION :
Analyser les messages utilisateur et identifier pr√©cis√©ment leur intention financi√®re, m√™me quand le message est ambigu, conversationnel, ou complexe.

TAXONOMIE DES INTENTIONS :
1. **transaction_query** - Recherche de transactions sp√©cifiques
2. **spending_analysis** - Analyse des d√©penses et habitudes
3. **budget_inquiry** - Questions sur budget et planification
4. **category_analysis** - Analyse par cat√©gorie de d√©penses
5. **merchant_inquiry** - Questions sur marchands sp√©cifiques
6. **balance_inquiry** - Consultation soldes et positions
7. **trend_analysis** - Analyse tendances et √©volutions
8. **comparison_query** - Comparaisons temporelles ou cat√©gorielles
9. **goal_tracking** - Suivi objectifs financiers
10. **alert_management** - Gestion alertes et notifications
11. **conversational** - √âchange conversationnel sans intention financi√®re sp√©cifique
12. **other** - Intentions non classifiables dans les cat√©gories pr√©c√©dentes

ENTIT√âS FINANCI√àRES √Ä EXTRAIRE :
- **montants** : 50‚Ç¨, 1000 euros, moins de 100‚Ç¨
- **dates** : hier, janvier, le 15/03, cette semaine
- **marchands** : Carrefour, Amazon, restaurant
- **cat√©gories** : alimentation, transport, loisirs
- **comptes** : compte courant, √©pargne, carte
- **p√©riodes** : mensuel, hebdomadaire, ce trimestre

FORMAT DE R√âPONSE OBLIGATOIRE :
```json
{
  "intent": "[intention_identifi√©e]",
  "confidence": [0.0-1.0],
  "entities": {json_des_entit√©s_extraites},
  "reasoning": "[explication_courte_du_raisonnement]"
}
```

R√àGLES IMPORTANTES :
- Soyez pr√©cis mais pas trop restrictif dans la classification
- Si l'intention est ambigu√´, choisissez la plus probable et r√©duisez la confidence
- Extrayez TOUTES les entit√©s financi√®res m√™me approximatives
- En cas d'incertitude majeure, utilisez "conversational" avec confidence < 0.5
- Gardez le REASONING concis (max 1 phrase)
- Respectez EXACTEMENT le format de sortie"""

# =============================================================================
# TEMPLATE UTILISATEUR AVEC CONTEXTE
# =============================================================================

INTENT_USER_TEMPLATE = """Analysez ce message utilisateur et identifiez son intention financi√®re :

MESSAGE: "{user_message}"

{context_section}

Analysez pr√©cis√©ment l'intention et extrayez toutes les entit√©s financi√®res pertinentes.
R√©pondez dans le format requis."""

# =============================================================================
# EXEMPLES FEW-SHOT POUR AM√âLIORER LA PR√âCISION
# =============================================================================

INTENT_EXAMPLES_FEW_SHOT = """EXEMPLES DE CLASSIFICATION :

**Exemple 1 - Transaction Query Simple :**
MESSAGE: "Mes achats chez Carrefour le mois dernier"
INTENT: transaction_query
CONFIDENCE: 0.95
ENTITIES: {"merchants": ["Carrefour"], "periods": ["mois dernier"]}
REASONING: Recherche explicite de transactions avec marchand et p√©riode sp√©cifi√©s.

**Exemple 2 - Spending Analysis Complexe :**
MESSAGE: "J'ai l'impression de trop d√©penser en restaurant ces derniers temps"
INTENT: spending_analysis
CONFIDENCE: 0.85
ENTITIES: {"categories": ["restaurant"], "periods": ["ces derniers temps"], "sentiment": ["trop d√©penser"]}
REASONING: Analyse subjective des habitudes de d√©pense dans une cat√©gorie.

**Exemple 3 - Budget Inquiry :**
MESSAGE: "Il me reste combien sur mon budget courses ce mois-ci ?"
INTENT: budget_inquiry
CONFIDENCE: 0.90
ENTITIES: {"categories": ["courses"], "periods": ["ce mois-ci"], "budget_type": ["remaining"]}
REASONING: Question directe sur le budget restant dans une cat√©gorie.

**Exemple 4 - Conversational Ambigu :**
MESSAGE: "Salut ! Comment √ßa va ?"
INTENT: conversational
CONFIDENCE: 0.30
ENTITIES: {}
REASONING: Salutation sans intention financi√®re identifiable.

**Exemple 5 - Trend Analysis avec Montants :**
MESSAGE: "Est-ce que je d√©pense plus que 500‚Ç¨ par mois en moyenne ?"
INTENT: trend_analysis
CONFIDENCE: 0.88
ENTITIES: {"amounts": ["500‚Ç¨"], "periods": ["par mois"], "analysis_type": ["average", "comparison"]}
REASONING: Analyse comparative des d√©penses avec seuil mon√©taire.

**Exemple 6 - Merchant Inquiry avec Salutation :**
MESSAGE: "Salut, combien ai-je d√©pens√© chez Amazon cette semaine ?"
INTENT: merchant_inquiry
CONFIDENCE: 0.92
ENTITIES: {"merchants": ["Amazon"], "periods": ["cette semaine"]}
REASONING: Recherche de d√©penses pour un marchand sp√©cifique apr√®s salutation.

**Exemple 7 - Balance Inquiry :**
MESSAGE: "Quel est le solde de mon compte √©pargne ?"
INTENT: balance_inquiry
CONFIDENCE: 0.93
ENTITIES: {"accounts": ["compte √©pargne"]}
REASONING: Demande directe de consultation de solde.

**Exemple 8 - Goal Tracking :**
MESSAGE: "Suis-je proche de mon objectif d'√©pargne de 5000‚Ç¨ ?"
INTENT: goal_tracking
CONFIDENCE: 0.89
ENTITIES: {"amounts": ["5000‚Ç¨"], "goal_type": ["√©pargne"]}
REASONING: V√©rification de la progression vers un objectif financier."""

# =============================================================================
# FONCTIONS DE FORMATAGE
# =============================================================================

def format_intent_prompt(user_message: str, context: str = "") -> str:
    """
    Formate le prompt complet pour la d√©tection d'intention.
    
    Args:
        user_message: Message utilisateur √† analyser
        context: Contexte conversationnel optionnel
        
    Returns:
        Prompt format√© pr√™t pour DeepSeek
        
    Example:
        >>> prompt = format_intent_prompt("Mes achats Amazon", "L'utilisateur cherchait ses factures")
        >>> # Utilisation avec DeepSeek client
    """
    if not user_message or not user_message.strip():
        raise ValueError("user_message ne peut pas √™tre vide")
    
    # Construction de la section contexte
    context_section = ""
    if context and context.strip():
        context_section = f"\nCONTEXTE CONVERSATIONNEL:\n{context.strip()}\n"
    
    # Formatage du prompt utilisateur
    user_prompt = INTENT_USER_TEMPLATE.format(
        user_message=user_message.strip(),
        context_section=context_section
    )
    
    return user_prompt

def build_context_summary(conversation_history: List[Dict[str, Any]], max_tokens: int = 500) -> str:
    """
    Construit un r√©sum√© du contexte conversationnel en respectant la limite de tokens.
    
    Args:
        conversation_history: Historique des √©changes [{"user": "...", "assistant": "..."}]
        max_tokens: Limite approximative en tokens pour le contexte
        
    Returns:
        R√©sum√© contexte format√© ou string vide si pas d'historique
        
    Example:
        >>> history = [{"user": "Mes achats", "assistant": "Voici vos transactions..."}]
        >>> context = build_context_summary(history)
    """
    if not conversation_history:
        return ""
    
    # Estimation approximative : 1 token ‚âà 4 caract√®res en fran√ßais
    max_chars = max_tokens * 4
    
    context_parts = []
    current_length = 0
    
    # Prendre les √©changes les plus r√©cents en premier
    for turn in reversed(conversation_history[-5:]):  # Max 5 derniers √©changes
        user_msg = turn.get("user", "")
        assistant_msg = turn.get("assistant", "")
        
        turn_text = f"User: {user_msg}\nAssistant: {assistant_msg[:100]}..."
        turn_length = len(turn_text)
        
        if current_length + turn_length > max_chars:
            break
            
        context_parts.insert(0, turn_text)  # Ins√©rer au d√©but pour garder l'ordre chronologique
        current_length += turn_length
    
    if not context_parts:
        return ""
    
    context_summary = "\n---\n".join(context_parts)
    
    # Alerte si contexte trop long
    if len(conversation_history) > 10:
        logger.warning(f"Contexte conversationnel tr√®s long ({len(conversation_history)} √©changes). "
                      f"Consid√©rez proposer une nouvelle conversation.")
        context_summary += "\n\n[CONTEXTE TRONQU√â - Conversation longue d√©tect√©e]"
    
    return context_summary

def parse_intent_response(response: str) -> Dict[str, Any]:
    """
    Parse la r√©ponse JSON de DeepSeek pour extraire les composants structur√©s.

    Args:
        response: R√©ponse brute de DeepSeek

    Returns:
        Dict avec intent, confidence, entities, reasoning

    Raises:
        ValueError: Si le format de r√©ponse est invalide

    Example:
        >>> response = '{"intent": "transaction_query", "confidence": 0.9, "entities": {}, "reasoning": "ok"}'
        >>> parsed = parse_intent_response(response)
        >>> print(parsed["intent"])  # "transaction_query"
    """
    if not response or not response.strip():
        raise ValueError("R√©ponse vide de DeepSeek")

    try:
        cleaned = response.strip()
        if cleaned.startswith("```"):
            lines = cleaned.splitlines()
            if lines[0].startswith("```"):
                lines = lines[1:]
            if lines and lines[-1].startswith("```"):
                lines = lines[:-1]
            cleaned = "\n".join(lines)
        data = json.loads(cleaned)
        result = {
            "intent": data.get("intent"),
            "confidence": float(data.get("confidence", 0.0)),
            "entities": data.get("entities", {}),
            "reasoning": data.get("reasoning", ""),
        }
        if not result["intent"]:
            raise ValueError("Intent manquant dans la r√©ponse")
        if not 0.0 <= result["confidence"] <= 1.0:
            raise ValueError(f"Confidence invalide: {result['confidence']}")
        return result
    except (json.JSONDecodeError, ValueError, KeyError, TypeError) as e:
        logger.error(f"Erreur parsing r√©ponse intent: {e}")
        logger.error(f"R√©ponse brute: {response}")
        return {
            "intent": "other",
            "confidence": 0.1,
            "entities": {},
            "reasoning": f"Erreur parsing: {str(e)}",
        }
# =============================================================================
# CONSTANTES UTILES
# =============================================================================

VALID_INTENTS = {
    "transaction_query", "spending_analysis", "budget_inquiry", 
    "category_analysis", "merchant_inquiry", "balance_inquiry",
    "trend_analysis", "comparison_query", "goal_tracking",
    "alert_management", "conversational", "other"
}

FINANCIAL_ENTITY_TYPES = {
    "amounts", "dates", "merchants", "categories", 
    "accounts", "periods", "sentiment", "budget_type", 
    "analysis_type"
}

# Export des √©l√©ments principaux
__all__ = [
    "INTENT_SYSTEM_PROMPT",
    "INTENT_USER_TEMPLATE",
    "INTENT_EXAMPLES_FEW_SHOT",
    "format_intent_prompt",
    "build_context_summary",
    "parse_intent_response",
    "VALID_INTENTS",
    "FINANCIAL_ENTITY_TYPES"
]
