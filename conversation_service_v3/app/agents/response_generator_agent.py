"""
Response Generator Agent - G√©n√®re la r√©ponse finale
Utilise les agr√©gations + r√©sum√© + transactions pour cr√©er une r√©ponse pertinente
"""
import logging
import json
import os
from typing import Dict, Any, List, Optional
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI

from ..models import SearchResults, AgentResponse, AgentRole, ConversationResponse

logger = logging.getLogger(__name__)


class ResponseGeneratorAgent:
    """
    Agent de g√©n√©ration de r√©ponse finale

    Responsabilit√©s:
    - Analyser les agr√©gations Elasticsearch
    - R√©sumer les r√©sultats de recherche
    - Cr√©er une r√©ponse naturelle et pertinente
    - Inclure les d√©tails des premi√®res transactions si pertinent
    """

    def __init__(self, llm_model: str = "gpt-4o", temperature: float = 0.3):
        # ChatOpenAI charge automatiquement OPENAI_API_KEY depuis l'environnement
        self.llm = ChatOpenAI(
            model=llm_model,
            temperature=temperature
        )

        # Prompt pour la g√©n√©ration de r√©ponse
        self.prompt = ChatPromptTemplate.from_messages([
            ("system", """Tu es un assistant financier personnel expert en analyse de donn√©es.

IMPORTANT - Utilisation des donn√©es:
- Les AGR√âGATIONS contiennent les STATISTIQUES GLOBALES sur TOUS les r√©sultats
- Les transactions d√©taill√©es sont des EXEMPLES ILLUSTRATIFS (limit√©s √† {transactions_count})
- TOUJOURS utiliser les AGR√âGATIONS pour les chiffres totaux et statistiques
- JAMAIS dire "j'ai trouv√© {transactions_count} transactions" si le total est diff√©rent
- Les agr√©gations sont PRIORITAIRES sur les transactions d√©taill√©es

Ton r√¥le est de cr√©er une r√©ponse claire, pr√©cise et utile bas√©e sur:
1. Les agr√©gations Elasticsearch (totaux, moyennes, statistiques) - SOURCE DE V√âRIT√â
2. Un r√©sum√© des r√©sultats de recherche
3. Les premi√®res transactions d√©taill√©es (exemples illustratifs)

R√®gles de r√©ponse:
- Commence TOUJOURS par les chiffres des AGR√âGATIONS
- Utilise "vos/votre" (jamais "utilisateur 123")
- Mentionne les insights importants des agr√©gations
- Inclus des exemples de transactions SI pertinent
- Sois naturel et conversationnel
- Si aucun r√©sultat, explique pourquoi et propose des alternatives

Format de r√©ponse:
1. R√©ponse directe √† la question avec les chiffres cl√©s
2. Insights et observations
3. D√©tails des principales transactions (si pertinent)
4. Suggestion d'action ou question de suivi (optionnel)

Exemples de bonnes r√©ponses:

Question: "Combien j'ai d√©pens√© en courses ce mois-ci ?"
Agr√©gations: total_spent: 342.50, transaction_count: 12, avg_transaction: 28.54
‚úÖ BON: "Vous avez d√©pens√© **342,50 ‚Ç¨** en courses ce mois-ci (bas√© sur 12 transactions).
         D√©pense moyenne: 28,54‚Ç¨ par visite."
‚ùå MAUVAIS: "J'ai trouv√© 10 transactions pour un total de 250‚Ç¨"
            (si les agr√©gations montrent 12 transactions et 342,50‚Ç¨)

Question: "Montre-moi mes achats Amazon"
Agr√©gations: total: 456.80, count: 8
Transactions d√©taill√©es: 5 affich√©es
‚úÖ BON: "Vous avez **8 transactions** chez Amazon pour un total de **456,80‚Ç¨**.
         Voici vos principales transactions: [liste des 5 transactions]"
‚ùå MAUVAIS: "Voici vos 5 transactions Amazon pour 250‚Ç¨"
            (si les agr√©gations en montrent 8 pour 456,80‚Ç¨)

Question: "R√©partition de mes d√©penses par cat√©gorie"
Agr√©gations: by_category avec 15 cat√©gories, totaux et comptages
‚úÖ BON: "Voici la r√©partition compl√®te de vos d√©penses par cat√©gorie (15 cat√©gories analys√©es):
         1. Alimentation: 342,50‚Ç¨ (12 transactions)
         2. Transport: 156,80‚Ç¨ (8 transactions)
         ..."
‚ùå MAUVAIS: "D'apr√®s les 10 transactions que je vois..."
            (les agr√©gations contiennent TOUTES les cat√©gories)
"""),
            ("user", """Question utilisateur: {user_message}

**Agr√©gations Elasticsearch:**
{aggregations}

**R√©sum√© des r√©sultats:**
- Nombre total de r√©sultats: {total_results}
- Nombre de transactions retourn√©es: {transactions_count}

**Transactions (premi√®res {transactions_count}):**
{transactions}

G√©n√®re une r√©ponse compl√®te et utile.""")
        ])

        self.chain = self.prompt | self.llm

        self.stats = {
            "responses_generated": 0,
            "avg_response_length": 0
        }

        logger.info(f"ResponseGeneratorAgent initialized with model {llm_model}")

    async def generate_response(
        self,
        user_message: str,
        search_results: SearchResults,
        original_query_analysis: Optional[Dict[str, Any]] = None
    ) -> AgentResponse:
        """
        G√©n√®re une r√©ponse finale bas√©e sur les r√©sultats de recherche

        OPTIMISATION: Ne met en contexte que:
        - Le r√©sum√© de la recherche (total, etc.)
        - Les agr√©gations compl√®tes
        - Les N premi√®res transactions (d√©fini par MAX_TRANSACTIONS_IN_CONTEXT)

        Args:
            user_message: Message original de l'utilisateur
            search_results: R√©sultats Elasticsearch (hits + agr√©gations)
            original_query_analysis: Analyse originale (pour contexte)

        Returns:
            AgentResponse contenant ConversationResponse
        """
        try:
            logger.info(f"Generating response for query: {user_message[:100]}")

            from ..config.settings import settings

            # Pr√©parer les agr√©gations pour le LLM (toujours compl√®tes)
            aggs_summary = self._format_aggregations(search_results.aggregations)

            # Limiter le nombre de transactions dans le contexte
            max_transactions = min(settings.MAX_TRANSACTIONS_IN_CONTEXT, len(search_results.hits))
            limited_transactions = search_results.hits[:max_transactions]

            # DEBUG: Log pour identifier le probl√®me
            logger.info(f"Transactions received: {len(search_results.hits)}, Limited to: {len(limited_transactions)}")
            if len(limited_transactions) > 0:
                logger.info(f"üîç First transaction keys: {list(limited_transactions[0].keys())}")
                logger.debug(f"üîç First transaction full: {json.dumps(limited_transactions[0], indent=2, default=str)}")
            else:
                logger.warning("‚ö†Ô∏è No transactions in search_results.hits despite total > 0")

            if len(search_results.hits) > max_transactions:
                logger.debug(
                    f"Context limitation: {len(search_results.hits)} ‚Üí {max_transactions} transactions"
                )

            # Pr√©parer les transactions pour le LLM (limit√©es)
            transactions_text = self._format_transactions(limited_transactions)

            # DEBUG: Log formatted transactions
            logger.info(f"üîç Formatted transactions (first 500 chars): {transactions_text[:500]}")

            # Invoquer le LLM
            result = await self.chain.ainvoke({
                "user_message": user_message,
                "aggregations": aggs_summary,
                "total_results": search_results.total,
                "transactions_count": len(limited_transactions),
                "transactions": transactions_text
            })

            response_text = result.content

            # Cr√©er la r√©ponse de conversation
            conversation_response = ConversationResponse(
                success=True,
                message=response_text,
                search_results=search_results,
                aggregations_summary=aggs_summary,
                metadata={
                    "total_results": search_results.total,
                    "response_length": len(response_text),
                    "took_ms": search_results.took_ms
                }
            )

            # Mise √† jour des stats
            self.stats["responses_generated"] += 1
            current_avg = self.stats["avg_response_length"]
            total_responses = self.stats["responses_generated"]
            self.stats["avg_response_length"] = (
                (current_avg * (total_responses - 1) + len(response_text)) / total_responses
            )

            logger.info(f"Response generated successfully. Length: {len(response_text)} chars")

            return AgentResponse(
                success=True,
                data=conversation_response,
                agent_role=AgentRole.RESPONSE_GENERATOR,
                metadata={
                    "response_length": len(response_text),
                    "total_results": search_results.total
                }
            )

        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            return AgentResponse(
                success=False,
                data=None,
                agent_role=AgentRole.RESPONSE_GENERATOR,
                error=str(e)
            )

    def _format_aggregations(self, aggregations: Optional[Dict[str, Any]]) -> str:
        """
        Formate les agr√©gations Elasticsearch de mani√®re d√©taill√©e pour le LLM

        VERSION AM√âLIOR√âE avec interpr√©tation et contexte enrichi

        Args:
            aggregations: Agr√©gations brutes d'Elasticsearch

        Returns:
            String format√©e avec contexte enrichi
        """
        if not aggregations:
            return "Aucune agr√©gation disponible"

        formatted_lines = []
        formatted_lines.append("üìä R√âSUM√â STATISTIQUE COMPLET (SOURCE DE V√âRIT√â):\n")

        for agg_name, agg_data in aggregations.items():
            if isinstance(agg_data, dict):
                # Agr√©gation de valeur unique (sum, avg, etc.)
                if "value" in agg_data:
                    value = agg_data['value']
                    if value is not None:
                        formatted_lines.append(f"‚úÖ {agg_name}: {value:.2f}")

                        # Ajouter interpr√©tation
                        if "total" in agg_name.lower() or "sum" in agg_name.lower():
                            formatted_lines.append(f"   ‚Üí Montant total calcul√© sur tous les r√©sultats")
                        elif "avg" in agg_name.lower() or "moyenne" in agg_name.lower():
                            formatted_lines.append(f"   ‚Üí Moyenne calcul√©e")
                        elif "count" in agg_name.lower():
                            formatted_lines.append(f"   ‚Üí Nombre total de transactions")

                # Statistiques compl√®tes (stats aggregation)
                elif "count" in agg_data and "sum" in agg_data:
                    formatted_lines.append(f"\nüìà {agg_name} (Statistiques compl√®tes):")
                    formatted_lines.append(f"   ‚Ä¢ Nombre: {agg_data.get('count', 0)}")
                    formatted_lines.append(f"   ‚Ä¢ Total: {agg_data.get('sum', 0):.2f}‚Ç¨")
                    formatted_lines.append(f"   ‚Ä¢ Moyenne: {agg_data.get('avg', 0):.2f}‚Ç¨")
                    formatted_lines.append(f"   ‚Ä¢ Min: {agg_data.get('min', 0):.2f}‚Ç¨")
                    formatted_lines.append(f"   ‚Ä¢ Max: {agg_data.get('max', 0):.2f}‚Ç¨")

                # Terms aggregation (groupements par cat√©gorie, marchand, etc.)
                elif "buckets" in agg_data:
                    buckets = agg_data["buckets"]
                    total_buckets = len(buckets)
                    displayed_buckets = buckets[:15]  # Top 15

                    formatted_lines.append(f"\nüè∑Ô∏è  {agg_name} ({total_buckets} groupes au total):")

                    for idx, bucket in enumerate(displayed_buckets, 1):
                        key = bucket.get("key", "Unknown")
                        doc_count = bucket.get("doc_count", 0)

                        line = f"   {idx}. {key}: {doc_count} transactions"

                        # Sous-agr√©gations (montants, moyennes, etc.)
                        sub_agg_parts = []
                        for sub_agg_name, sub_agg_data in bucket.items():
                            if sub_agg_name not in ["key", "doc_count", "key_as_string"]:
                                if isinstance(sub_agg_data, dict) and "value" in sub_agg_data:
                                    value = sub_agg_data['value']
                                    if value is not None:
                                        sub_agg_parts.append(f"{sub_agg_name}: {value:.2f}‚Ç¨")

                        if sub_agg_parts:
                            line += f" | {' | '.join(sub_agg_parts)}"

                        formatted_lines.append(line)

                    if total_buckets > 15:
                        formatted_lines.append(f"   ... et {total_buckets - 15} autres groupes")

                # Date histogram aggregation (tendances temporelles)
                elif agg_data.get("buckets") and len(agg_data.get("buckets", [])) > 0 and "key_as_string" in agg_data["buckets"][0]:
                    formatted_lines.append(f"\nüìÖ {agg_name} (√âvolution temporelle):")
                    buckets = agg_data.get("buckets", [])

                    for bucket in buckets[:12]:  # Max 12 p√©riodes
                        period = bucket.get("key_as_string", bucket.get("key", "Unknown"))
                        doc_count = bucket.get("doc_count", 0)

                        line = f"   ‚Ä¢ {period}: {doc_count} transactions"

                        # Sous-agr√©gations
                        for sub_agg_name, sub_agg_data in bucket.items():
                            if sub_agg_name not in ["key", "doc_count", "key_as_string"]:
                                if isinstance(sub_agg_data, dict) and "value" in sub_agg_data:
                                    value = sub_agg_data['value']
                                    if value is not None:
                                        line += f" | {sub_agg_name}: {value:.2f}‚Ç¨"

                        formatted_lines.append(line)

        formatted_lines.append(f"\nüí° IMPORTANT: Ces statistiques couvrent TOUS les r√©sultats, pas seulement les exemples de transactions list√©s ci-dessous.")

        return "\n".join(formatted_lines)

    def _format_transactions(self, transactions: List[Dict[str, Any]]) -> str:
        """
        Formate les transactions de mani√®re lisible pour le LLM

        Args:
            transactions: Liste des transactions

        Returns:
            String format√©e
        """
        if not transactions:
            return "Aucune transaction trouv√©e"

        formatted_lines = []

        for idx, transaction in enumerate(transactions[:50], 1):  # Max 50
            # search_service retourne les transactions avec les champs directement
            # (pas de wrapper _source comme Elasticsearch brut)

            # Extraire les informations cl√©s
            date = transaction.get("date", "Date inconnue")
            amount = transaction.get("amount", 0)
            merchant = transaction.get("merchant_name", "Marchand inconnu")
            category = transaction.get("category_name", "")
            description = transaction.get("primary_description", "")

            # Formater le montant
            amount_str = f"{abs(amount):.2f} ‚Ç¨"
            if amount < 0:
                amount_str = f"-{amount_str}"

            # Ligne de transaction
            line = f"{idx}. {date} - {merchant} - {amount_str}"
            if category:
                line += f" ({category})"

            formatted_lines.append(line)

            # Ajouter description si disponible et diff√©rente du marchand
            if description and description.lower() != merchant.lower():
                formatted_lines.append(f"   Description: {description[:100]}")

        return "\n".join(formatted_lines)

    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de l'agent"""
        return {
            "agent": "response_generator",
            "model": self.llm.model_name,
            **self.stats
        }
