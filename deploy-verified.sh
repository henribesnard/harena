#!/bin/bash

# ============================================
# SCRIPT DE D√âPLOIEMENT S√âCURIS√â AVEC V√âRIFICATIONS
# ============================================
# Ce script d√©ploie ET v√©rifie l'infrastructure

set -e  # Arr√™ter en cas d'erreur

echo "============================================"
echo "üöÄ D√âPLOIEMENT HARENA - VERSION S√âCURIS√âE"
echo "============================================"
echo ""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ============================================
# √âTAPE 1: Mise √† jour du code
# ============================================
echo -e "${YELLOW}üì• √âtape 1/6 : Mise √† jour du code depuis git...${NC}"
cd /home/ec2-user/harena
git fetch origin
git pull origin main

# Afficher le commit actuel
CURRENT_COMMIT=$(git log --oneline -1)
echo -e "${GREEN}‚úÖ Code mis √† jour : $CURRENT_COMMIT${NC}"
echo ""

# ============================================
# √âTAPE 2: Arr√™t propre des services
# ============================================
echo -e "${YELLOW}üõë √âtape 2/6 : Arr√™t des services actuels...${NC}"
docker-compose -f docker-compose.prod.yml down
echo -e "${GREEN}‚úÖ Services arr√™t√©s${NC}"
echo ""

# ============================================
# √âTAPE 3: Rebuild complet des images
# ============================================
echo -e "${YELLOW}üî® √âtape 3/6 : Rebuild des images Docker...${NC}"
docker-compose -f docker-compose.prod.yml build --no-cache
echo -e "${GREEN}‚úÖ Images reconstruites${NC}"
echo ""

# ============================================
# √âTAPE 4: D√©marrage des services
# ============================================
echo -e "${YELLOW}‚ñ∂Ô∏è  √âtape 4/6 : D√©marrage des services...${NC}"
docker-compose -f docker-compose.prod.yml up -d

# Attendre le d√©marrage
echo "‚è≥ Attente du d√©marrage des services (30s)..."
sleep 30

echo -e "${GREEN}‚úÖ Services d√©marr√©s${NC}"
echo ""

# ============================================
# √âTAPE 5: V√âRIFICATIONS CRITIQUES
# ============================================
echo -e "${YELLOW}üîç √âtape 5/6 : V√©rifications de stabilit√©...${NC}"

# V√©rification 1: Tous les conteneurs sont UP
echo "  [1/5] V√©rification des conteneurs..."
STOPPED_CONTAINERS=$(docker ps -a --filter "status=exited" --filter "name=harena" --format "{{.Names}}")
if [ -z "$STOPPED_CONTAINERS" ]; then
    echo -e "  ${GREEN}‚úÖ Tous les conteneurs sont UP${NC}"
else
    echo -e "  ${RED}‚ùå ERREUR: Conteneurs arr√™t√©s d√©tect√©s:${NC}"
    echo "$STOPPED_CONTAINERS"
    exit 1
fi

# V√©rification 2: Tous les healthchecks sont HEALTHY
echo "  [2/5] V√©rification des healthchecks..."
sleep 10  # Attendre que les healthchecks passent
UNHEALTHY=$(docker ps --filter "health=unhealthy" --filter "name=harena" --format "{{.Names}}")
if [ -z "$UNHEALTHY" ]; then
    echo -e "  ${GREEN}‚úÖ Tous les healthchecks sont HEALTHY${NC}"
else
    echo -e "  ${RED}‚ùå ERREUR: Services unhealthy d√©tect√©s:${NC}"
    echo "$UNHEALTHY"
    exit 1
fi

# V√©rification 3: Tous les ports sont sur 0.0.0.0 (pas 127.0.0.1)
echo "  [3/5] V√©rification des port bindings..."
LOCALHOST_PORTS=$(docker ps --format "{{.Names}}: {{.Ports}}" | grep "127.0.0.1" || true)
if [ -z "$LOCALHOST_PORTS" ]; then
    echo -e "  ${GREEN}‚úÖ Tous les ports sont correctement expos√©s (0.0.0.0)${NC}"
else
    echo -e "  ${RED}‚ùå ATTENTION: Services sur localhost d√©tect√©s:${NC}"
    echo "$LOCALHOST_PORTS"
    echo -e "  ${YELLOW}‚ö†Ô∏è  Ces services ne seront pas accessibles de l'ext√©rieur${NC}"
fi

# V√©rification 4: Test des endpoints critiques
echo "  [4/5] Test des endpoints HTTP..."
ENDPOINTS=(
    "http://localhost:3000/health:user_service"
    "http://localhost:3001/api/v1/search/health:search_service"
    "http://localhost:3002/health:metric_service"
    "http://localhost:3006/health:budget_service"
    "http://localhost:3008/health:conversation_v3"
)

ALL_ENDPOINTS_OK=true
for endpoint_pair in "${ENDPOINTS[@]}"; do
    IFS=':' read -r url service <<< "$endpoint_pair"
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    if [ "$HTTP_CODE" = "200" ]; then
        echo -e "    ${GREEN}‚úÖ $service${NC} ($HTTP_CODE)"
    else
        echo -e "    ${RED}‚ùå $service${NC} ($HTTP_CODE)"
        ALL_ENDPOINTS_OK=false
    fi
done

if [ "$ALL_ENDPOINTS_OK" = true ]; then
    echo -e "  ${GREEN}‚úÖ Tous les endpoints r√©pondent${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  Certains endpoints ne r√©pondent pas (peut √™tre normal au d√©marrage)${NC}"
fi

# V√©rification 5: Utilisation des ressources
echo "  [5/5] V√©rification des ressources syst√®me..."
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
DISK_USAGE=$(df -h / | tail -1 | awk '{print $5}' | sed 's/%//')

echo "    üíæ M√©moire utilis√©e: ${MEMORY_USAGE}%"
echo "    üíø Disque utilis√©: ${DISK_USAGE}%"

if [ "$MEMORY_USAGE" -gt 85 ]; then
    echo -e "    ${YELLOW}‚ö†Ô∏è  Utilisation m√©moire √©lev√©e${NC}"
fi

if [ "$DISK_USAGE" -gt 85 ]; then
    echo -e "    ${YELLOW}‚ö†Ô∏è  Utilisation disque √©lev√©e${NC}"
fi

echo ""

# ============================================
# √âTAPE 6: R√©sum√© final
# ============================================
echo -e "${YELLOW}üìä √âtape 6/6 : R√©sum√© du d√©ploiement${NC}"
echo ""
echo "Services en cours d'ex√©cution :"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep harena

echo ""
echo "============================================"
echo -e "${GREEN}‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !${NC}"
echo "============================================"
echo ""
echo "üîó Endpoints disponibles :"
echo "  - User Service:        http://63.35.52.216/api/v1/users"
echo "  - Search Service:      http://63.35.52.216/api/v1/search"
echo "  - Metric Service:      http://63.35.52.216/api/v1/metrics"
echo "  - Budget Service:      http://63.35.52.216/api/v1/budget"
echo "  - Conversation V3:     http://63.35.52.216/api/v3"
echo ""
echo "üìù Logs en direct :"
echo "  docker-compose -f docker-compose.prod.yml logs -f [service]"
echo ""
echo "üéâ Infrastructure stable et op√©rationnelle !"
