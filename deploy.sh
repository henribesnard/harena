#!/bin/bash

# ============================================
# SCRIPT DE D√âPLOIEMENT HARENA BACKEND
# ============================================
# Ce script d√©ploie les 5 services backend sur AWS EC2
# sans √©craser PostgreSQL et Redis existants.
#
# Pr√©requis :
# - Instance EC2 avec Docker et Docker Compose install√©s
# - PostgreSQL et Redis d√©j√† d√©ploy√©s
# - Elasticsearch migr√© vers Bonsai (Heroku)
# - Nginx install√©
# ============================================

set -e  # Arr√™ter en cas d'erreur

echo "============================================"
echo "üöÄ D√âPLOIEMENT HARENA BACKEND - AWS EC2"
echo "============================================"
echo ""

# ============================================
# 1. V√©rification des pr√©requis
# ============================================
echo "üìã √âtape 1/7 : V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©. Installation..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    echo "‚úÖ Docker install√©"
else
    echo "‚úÖ Docker d√©j√† install√©"
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©. Installation..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "‚úÖ Docker Compose install√©"
else
    echo "‚úÖ Docker Compose d√©j√† install√©"
fi

# V√©rifier Nginx
if ! command -v nginx &> /dev/null; then
    echo "‚ùå Nginx n'est pas install√©. Installation..."
    sudo yum install -y nginx  # Amazon Linux 2023
    echo "‚úÖ Nginx install√©"
else
    echo "‚úÖ Nginx d√©j√† install√©"
fi

echo ""

# ============================================
# 2. V√©rification des conteneurs existants
# ============================================
echo "üì¶ √âtape 2/7 : V√©rification des conteneurs existants..."

if docker ps | grep -q "harena-postgres"; then
    echo "‚úÖ PostgreSQL d√©tect√© (harena-postgres) - √Ä CONSERVER"
else
    echo "‚ö†Ô∏è  PostgreSQL (harena-postgres) non trouv√©. V√©rifiez votre configuration."
fi

if docker ps | grep -q "harena-redis"; then
    echo "‚úÖ Redis d√©tect√© (harena-redis) - √Ä CONSERVER"
else
    echo "‚ö†Ô∏è  Redis (harena-redis) non trouv√©. V√©rifiez votre configuration."
fi

if docker ps | grep -q "harena-elasticsearch"; then
    echo "‚ö†Ô∏è  Elasticsearch local d√©tect√©. Arr√™t recommand√© pour lib√©rer de la RAM..."
    read -p "Voulez-vous arr√™ter Elasticsearch local ? (o/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Oo]$ ]]; then
        docker stop harena-elasticsearch
        docker rm harena-elasticsearch
        echo "‚úÖ Elasticsearch local arr√™t√©. Utilisez Bonsai (Heroku)."
    fi
fi

echo ""

# ============================================
# 3. V√©rification du fichier .env
# ============================================
echo "üîë √âtape 3/7 : V√©rification du fichier .env..."

if [ ! -f .env ]; then
    echo "‚ùå Fichier .env manquant. Cr√©ation depuis le template..."
    cp .env.example .env
    echo "‚ö†Ô∏è  IMPORTANT : Configurez le fichier .env avant de continuer !"
    exit 1
else
    echo "‚úÖ Fichier .env trouv√©"

    # V√©rifier les variables critiques
    if ! grep -q "DATABASE_URL=" .env; then
        echo "‚ö†Ô∏è  DATABASE_URL manquant dans .env"
    fi

    if ! grep -q "REDIS_URL=" .env; then
        echo "‚ö†Ô∏è  REDIS_URL manquant dans .env"
    fi

    if ! grep -q "ELASTICSEARCH_URL=" .env; then
        echo "‚ö†Ô∏è  ELASTICSEARCH_URL manquant dans .env (utilisez Bonsai)"
    fi
fi

echo ""

# ============================================
# 4. Configuration Nginx
# ============================================
echo "üåê √âtape 4/7 : Configuration Nginx..."

if [ -f nginx.conf ]; then
    sudo cp nginx.conf /etc/nginx/conf.d/harena.conf

    # Tester la configuration Nginx
    if sudo nginx -t; then
        echo "‚úÖ Configuration Nginx valide"
        sudo systemctl reload nginx
        echo "‚úÖ Nginx recharg√©"
    else
        echo "‚ùå Configuration Nginx invalide. V√©rifiez nginx.conf"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Fichier nginx.conf manquant. Utilisation de la configuration par d√©faut."
fi

echo ""

# ============================================
# 5. Build des images Docker
# ============================================
echo "üî® √âtape 5/7 : Build des images Docker..."

docker-compose -f docker-compose.prod.yml build

echo "‚úÖ Images Docker build√©es"
echo ""

# ============================================
# 6. D√©marrage des services
# ============================================
echo "‚ñ∂Ô∏è  √âtape 6/7 : D√©marrage des services..."

docker-compose -f docker-compose.prod.yml up -d

echo "‚úÖ Services d√©marr√©s"
echo ""

# ============================================
# 7. V√©rification du d√©ploiement
# ============================================
echo "üîç √âtape 7/7 : V√©rification du d√©ploiement..."

sleep 10  # Attendre le d√©marrage des services

echo ""
echo "Conteneurs en cours d'ex√©cution :"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "Logs des services (derni√®res lignes) :"
docker-compose -f docker-compose.prod.yml logs --tail=5

echo ""
echo "============================================"
echo "‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !"
echo "============================================"
echo ""
echo "üìä Ressources syst√®me :"
free -h
echo ""
echo "üîó Points d'acc√®s :"
echo "  - User Service:      http://63.35.52.216/api/v1/users"
echo "  - Metric Service:    http://63.35.52.216/api/v1/metrics"
echo "  - Budget Service:    http://63.35.52.216/api/v1/budget"
echo "  - Search Service:    http://63.35.52.216/api/v1/search"
echo "  - Conversation V3:   http://63.35.52.216/api/v3"
echo ""
echo "üìù Commandes utiles :"
echo "  - Voir les logs :    docker-compose -f docker-compose.prod.yml logs -f [service]"
echo "  - Red√©marrer :       docker-compose -f docker-compose.prod.yml restart"
echo "  - Arr√™ter :          docker-compose -f docker-compose.prod.yml down"
echo "  - Mettre √† jour :    git pull && docker-compose -f docker-compose.prod.yml up -d --build"
echo ""
echo "üéâ Votre backend Harena est maintenant en production !"
