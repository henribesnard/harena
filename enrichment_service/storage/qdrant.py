"""
Interface de stockage vectoriel avec Qdrant.

Ce module g√®re les op√©rations de stockage et de recherche dans Qdrant
pour les transactions enrichies.
"""
import logging
from typing import List, Dict, Any, Optional
from qdrant_client import AsyncQdrantClient
from qdrant_client.models import (
    CollectionInfo, VectorParams, Distance, PointStruct,
    Filter, FieldCondition, Match, Range, SearchRequest,
    PayloadSchemaType
)
from qdrant_client.http.exceptions import UnexpectedResponse

from config_service.config import settings
from enrichment_service.models import VectorizedTransaction, SearchResult
from enrichment_service.core.embeddings import embedding_service

logger = logging.getLogger(__name__)

class QdrantStorage:
    """Interface pour le stockage vectoriel avec Qdrant."""
    
    def __init__(self):
        self.client = None
        self.collection_name = "financial_transactions"
        self.vector_dimension = None  # Sera d√©fini dynamiquement
    
    async def initialize(self):
        """Initialise la connexion Qdrant et cr√©e les collections."""
        if not settings.QDRANT_URL:
            raise ValueError("QDRANT_URL is required")
        
        # R√©cup√©rer la dimension des embeddings depuis le service
        self.vector_dimension = embedding_service.get_embedding_dimension()
        logger.info(f"Dimension des vecteurs configur√©e: {self.vector_dimension}")
        
        # Initialiser le client
        if settings.QDRANT_API_KEY:
            self.client = AsyncQdrantClient(
                url=settings.QDRANT_URL,
                api_key=settings.QDRANT_API_KEY,
                timeout=30.0
            )
        else:
            self.client = AsyncQdrantClient(
                url=settings.QDRANT_URL,
                timeout=30.0
            )
        
        logger.info(f"Connexion Qdrant √©tablie: {settings.QDRANT_URL}")
        
        # Cr√©er la collection si elle n'existe pas
        await self._setup_collection()
    
    async def _setup_collection(self):
        """Cr√©e la collection pour les transactions financi√®res."""
        try:
            # V√©rifier si la collection existe
            collections = await self.client.get_collections()
            collection_names = [col.name for col in collections.collections]
            
            if self.collection_name not in collection_names:
                logger.info(f"Cr√©ation de la collection {self.collection_name}")
                
                await self.client.create_collection(
                    collection_name=self.collection_name,
                    vectors_config=VectorParams(
                        size=self.vector_dimension,
                        distance=Distance.COSINE
                    )
                )
                
                logger.info(f"Collection {self.collection_name} cr√©√©e avec succ√®s (dimension: {self.vector_dimension})")
                
                # Cr√©er les index pour les champs de filtrage
                await self._create_payload_indexes()
                
            else:
                logger.info(f"Collection {self.collection_name} existe d√©j√†")
                
                # V√©rifier que la dimension est correcte
                collection_info = await self.client.get_collection(self.collection_name)
                existing_dimension = collection_info.config.params.vectors.size
                
                if existing_dimension != self.vector_dimension:
                    logger.warning(
                        f"Dimension mismatch: collection existante ({existing_dimension}) "
                        f"vs configuration ({self.vector_dimension})"
                    )
                
                # S'assurer que les index existent m√™me pour une collection existante
                await self._create_payload_indexes()
                
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de la collection: {e}")
            raise

    async def _create_payload_indexes(self):
        """Cr√©e les index sur les champs payload pour acc√©l√©rer les recherches filtr√©es."""
        try:
            # Index obligatoire pour user_id (utilis√© dans tous les filtres)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="user_id",
                field_schema=PayloadSchemaType.INTEGER
            )
            logger.info("‚úÖ Index cr√©√© sur user_id")
            
            # Index pour is_deleted (utilis√© dans les filtres)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="is_deleted",
                field_schema=PayloadSchemaType.BOOL
            )
            logger.info("‚úÖ Index cr√©√© sur is_deleted")
            
            # Index pour amount_abs (filtres par montant)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="amount_abs",
                field_schema=PayloadSchemaType.FLOAT
            )
            logger.info("‚úÖ Index cr√©√© sur amount_abs")
            
            # Index pour transaction_type (filtres par type)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="transaction_type",
                field_schema=PayloadSchemaType.KEYWORD
            )
            logger.info("‚úÖ Index cr√©√© sur transaction_type")
            
            # Index pour timestamp (filtres par date)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="timestamp",
                field_schema=PayloadSchemaType.DATETIME
            )
            logger.info("‚úÖ Index cr√©√© sur timestamp")
            
            # Index pour transaction_id (recherches par ID)
            await self.client.create_payload_index(
                collection_name=self.collection_name,
                field_name="transaction_id",
                field_schema=PayloadSchemaType.INTEGER
            )
            logger.info("‚úÖ Index cr√©√© sur transaction_id")
            
            logger.info("üéØ Tous les index payload cr√©√©s avec succ√®s")
            
        except Exception as e:
            # Si l'index existe d√©j√†, Qdrant retourne une erreur, mais c'est OK
            if "already exists" in str(e).lower() or "index_already_exists" in str(e).lower():
                logger.info("‚ÑπÔ∏è Certains index existent d√©j√† - OK")
            else:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la cr√©ation des index: {e}")
                # Ne pas lever l'exception car les index peuvent d√©j√† exister
    
    async def store_transaction(self, transaction: VectorizedTransaction) -> bool:
        """
        Stocke une transaction vectoris√©e dans Qdrant.
        
        Args:
            transaction: Transaction vectoris√©e √† stocker
            
        Returns:
            bool: True si le stockage a r√©ussi
        """
        if not self.client:
            raise ValueError("QdrantStorage not initialized")
        
        try:
            point = PointStruct(
                id=transaction.id,
                vector=transaction.vector,
                payload=transaction.payload
            )
            
            result = await self.client.upsert(
                collection_name=self.collection_name,
                points=[point]
            )
            
            logger.debug(f"Transaction {transaction.id} stock√©e avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors du stockage de la transaction {transaction.id}: {e}")
            return False
    
    async def store_transactions_batch(self, transactions: List[VectorizedTransaction]) -> Dict[str, Any]:
        """
        Stocke un lot de transactions dans Qdrant.
        
        Args:
            transactions: Liste des transactions √† stocker
            
        Returns:
            Dict: R√©sum√© du stockage
        """
        if not self.client:
            raise ValueError("QdrantStorage not initialized")
        
        if not transactions:
            return {"stored": 0, "errors": 0, "total": 0}
        
        try:
            # Convertir en PointStruct
            points = []
            for tx in transactions:
                point = PointStruct(
                    id=tx.id,
                    vector=tx.vector,
                    payload=tx.payload
                )
                points.append(point)
            
            # Stocker par lots pour √©viter les timeouts
            batch_size = min(100, len(points))  # Limiter √† 100 par lot
            stored_count = 0
            error_count = 0
            
            for i in range(0, len(points), batch_size):
                batch = points[i:i + batch_size]
                
                try:
                    result = await self.client.upsert(
                        collection_name=self.collection_name,
                        points=batch
                    )
                    stored_count += len(batch)
                    logger.debug(f"Lot {i//batch_size + 1} stock√©: {len(batch)} transactions")
                    
                except Exception as e:
                    logger.error(f"Erreur lors du stockage du lot {i//batch_size + 1}: {e}")
                    error_count += len(batch)
            
            result_summary = {
                "stored": stored_count,
                "errors": error_count,
                "total": len(transactions)
            }
            
            logger.info(f"Stockage en lot termin√©: {result_summary}")
            return result_summary
            
        except Exception as e:
            logger.error(f"Erreur g√©n√©rale lors du stockage en lot: {e}")
            return {"stored": 0, "errors": len(transactions), "total": len(transactions)}
    
    async def search_transactions(
        self,
        query_vector: List[float],
        user_id: int,
        limit: int = 10,
        filters: Optional[Dict[str, Any]] = None
    ) -> List[SearchResult]:
        """
        Recherche des transactions par similarit√© vectorielle.
        
        Args:
            query_vector: Vecteur de la requ√™te
            user_id: ID de l'utilisateur (filtrage obligatoire)
            limit: Nombre maximum de r√©sultats
            filters: Filtres additionnels
            
        Returns:
            List[SearchResult]: R√©sultats de recherche
        """
        if not self.client:
            raise ValueError("QdrantStorage not initialized")
        
        try:
            # Construire les filtres
            search_filter = Filter(
                must=[
                    FieldCondition(
                        key="user_id",
                        match=Match(value=user_id)
                    ),
                    FieldCondition(
                        key="is_deleted",
                        match=Match(value=False)
                    )
                ]
            )
            
            # Ajouter des filtres additionnels si fournis
            if filters:
                if "amount_min" in filters:
                    search_filter.must.append(
                        FieldCondition(
                            key="amount_abs",
                            range=Range(gte=filters["amount_min"])
                        )
                    )
                
                if "amount_max" in filters:
                    search_filter.must.append(
                        FieldCondition(
                            key="amount_abs",
                            range=Range(lte=filters["amount_max"])
                        )
                    )
                
                if "transaction_type" in filters:
                    search_filter.must.append(
                        FieldCondition(
                            key="transaction_type",
                            match=Match(value=filters["transaction_type"])
                        )
                    )
                
                if "date_from" in filters:
                    search_filter.must.append(
                        FieldCondition(
                            key="timestamp",
                            range=Range(gte=filters["date_from"])
                        )
                    )
                
                if "date_to" in filters:
                    search_filter.must.append(
                        FieldCondition(
                            key="timestamp",
                            range=Range(lte=filters["date_to"])
                        )
                    )
            
            # Effectuer la recherche
            search_result = await self.client.search(
                collection_name=self.collection_name,
                query_vector=query_vector,
                query_filter=search_filter,
                limit=limit,
                with_payload=True,
                with_vectors=False
            )
            
            # Convertir en SearchResult
            results = []
            for point in search_result:
                result = SearchResult(
                    transaction_id=point.payload["transaction_id"],
                    user_id=point.payload["user_id"],
                    score=point.score,
                    primary_description=point.payload["primary_description"],
                    amount=point.payload["amount"],
                    date=point.payload["date"],
                    transaction_type=point.payload["transaction_type"],
                    metadata=point.payload
                )
                results.append(result)
            
            logger.debug(f"Recherche effectu√©e: {len(results)} r√©sultats trouv√©s")
            return results
            
        except Exception as e:
            logger.error(f"Erreur lors de la recherche: {e}")
            return []
    
    async def delete_user_transactions(self, user_id: int) -> bool:
        """
        Supprime toutes les transactions d'un utilisateur.
        
        Args:
            user_id: ID de l'utilisateur
            
        Returns:
            bool: True si la suppression a r√©ussi
        """
        if not self.client:
            raise ValueError("QdrantStorage not initialized")
        
        try:
            # Supprimer par filtre
            await self.client.delete(
                collection_name=self.collection_name,
                points_selector=Filter(
                    must=[
                        FieldCondition(
                            key="user_id",
                            match=Match(value=user_id)
                        )
                    ]
                )
            )
            
            logger.info(f"Transactions supprim√©es pour l'utilisateur {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression pour l'utilisateur {user_id}: {e}")
            return False
    
    async def get_collection_info(self) -> Optional[CollectionInfo]:
        """R√©cup√®re les informations de la collection."""
        if not self.client:
            return None
        
        try:
            return await self.client.get_collection(self.collection_name)
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des infos de collection: {e}")
            return None
    
    async def close(self):
        """Ferme la connexion Qdrant."""
        if self.client:
            await self.client.close()
            logger.info("Connexion Qdrant ferm√©e")