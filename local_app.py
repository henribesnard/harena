"""
Application Harena pour d√©veloppement local.
Structure adapt√©e pour le nouveau conversation_service avec TinyBERT minimaliste.

‚úÖ CONVERSATION SERVICE CORRIG√â:
- Router direct dans local_app.py (pas de mount)
- TinyBERT partag√© via app.state
- Fix du probl√®me "Mod√®le TinyBERT non charg√©"
"""

import logging
import os
import sys
from pathlib import Path
from fastapi import FastAPI, APIRouter, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv

# Charger le fichier .env en priorit√©
load_dotenv()

# Configuration du logging simple
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger("harena_local")

# Fix DATABASE_URL pour d√©veloppement local
DATABASE_URL = os.environ.get("DATABASE_URL")
if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    os.environ["DATABASE_URL"] = DATABASE_URL.replace("postgres://", "postgresql://", 1)

# Ajouter le r√©pertoire courant au path
current_dir = Path(__file__).parent.absolute()
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

class ServiceLoader:
    """Chargeur de services avec nouveau conversation_service TinyBERT"""
    
    def __init__(self):
        self.services_status = {}
        self.search_service_initialized = False
        self.search_service_error = None
        self.conversation_service_initialized = False
        self.conversation_service_error = None
    
    async def initialize_search_service(self, app: FastAPI):
        """Initialise le search_service - COPIE EXACTE"""
        logger.info("üîç Initialisation du search_service...")
        
        try:
            # V√©rifier BONSAI_URL
            bonsai_url = os.environ.get("BONSAI_URL")
            if not bonsai_url:
                raise ValueError("BONSAI_URL n'est pas configur√©e")
            
            logger.info(f"üì° BONSAI_URL configur√©e: {bonsai_url[:50]}...")
            
            # Import des modules search_service avec nouvelle architecture
            from search_service.core import initialize_default_client
            from search_service.api import initialize_search_engine
            
            # Initialiser le client Elasticsearch
            logger.info("üì° Initialisation du client Elasticsearch...")
            elasticsearch_client = await initialize_default_client()
            logger.info("‚úÖ Client Elasticsearch initialis√©")
            
            # Test de connexion
            health = await elasticsearch_client.health_check()
            if health.get("status") != "healthy":
                logger.warning(f"‚ö†Ô∏è Elasticsearch health: {health}")
            else:
                logger.info("‚úÖ Test de connexion Elasticsearch r√©ussi")
            
            # Initialiser le moteur de recherche
            logger.info("üîç Initialisation du moteur de recherche...")
            initialize_search_engine(elasticsearch_client)
            logger.info("‚úÖ Moteur de recherche initialis√©")
            
            # Mettre les composants dans app.state pour les routes
            app.state.service_initialized = True
            app.state.elasticsearch_client = elasticsearch_client
            app.state.initialization_error = None
            
            self.search_service_initialized = True
            self.search_service_error = None
            
            logger.info("üéâ Search Service compl√®tement initialis√©!")
            return True
            
        except Exception as e:
            error_msg = f"Erreur initialisation search_service: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            
            # Marquer l'√©chec dans app.state
            app.state.service_initialized = False
            app.state.elasticsearch_client = None
            app.state.initialization_error = error_msg
            
            self.search_service_initialized = False
            self.search_service_error = error_msg
            return False
    
    async def initialize_conversation_service(self, app: FastAPI):
        """‚úÖ NOUVEAU: Initialise le conversation_service TinyBERT minimaliste"""
        logger.info("ü§ñ Initialisation du conversation_service - TinyBERT Minimaliste")
        
        try:
            logger.info("üéØ Chargement TinyBERT Detector...")
            from conversation_service.intent_detector import TinyBERTDetector
            
            # ‚úÖ Cr√©er l'instance TinyBERT Detector
            detector = TinyBERTDetector()
            
            # ‚úÖ Charger le mod√®le TinyBERT
            logger.info("ü§ñ Chargement mod√®le TinyBERT...")
            await detector.load_model()
            logger.info("‚úÖ TinyBERT charg√© et pr√™t")
            
            # ‚úÖ Test fonctionnel du d√©tecteur
            logger.info("üß™ Test fonctionnel TinyBERT...")
            test_intent, test_confidence, test_latency = await detector.detect_intent("quel est mon solde")
            logger.info(f"‚úÖ Test r√©ussi - Intent: {test_intent}, Confiance: {test_confidence:.3f}, Latence: {test_latency:.2f}ms")
            
            # ‚úÖ R√©cup√©rer statistiques
            stats = detector.get_stats()
            logger.info(f"üìä TinyBERT Statistics:")
            logger.info(f"   - Mod√®le charg√©: {stats['model_loaded']}")
            logger.info(f"   - Device: {stats['device']}")
            logger.info(f"   - Requ√™tes totales: {stats['total_requests']}")
            logger.info(f"   - Latence moyenne: {stats['average_latency_ms']:.2f}ms")
            
            # ‚úÖ Mettre le d√©tecteur dans app.state pour les routes
            app.state.conversation_service_initialized = True
            app.state.tinybert_detector = detector
            app.state.conversation_architecture = "tinybert_minimal"
            app.state.conversation_initialization_error = None
            
            self.conversation_service_initialized = True
            self.conversation_service_error = None
            
            logger.info("üéâ Conversation Service TinyBERT compl√®tement initialis√©!")
            return True
            
        except Exception as e:
            error_msg = f"Erreur initialisation conversation_service TinyBERT: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            
            # Marquer l'√©chec dans app.state
            app.state.conversation_service_initialized = False
            app.state.tinybert_detector = None
            app.state.conversation_architecture = "failed"
            app.state.conversation_initialization_error = error_msg
            
            self.conversation_service_initialized = False
            self.conversation_service_error = error_msg
            return False
    
    def load_service_router(self, app: FastAPI, service_name: str, router_path: str, prefix: str):
        """Charge et enregistre un router de service"""
        try:
            # Import dynamique du router
            module = __import__(router_path, fromlist=["router"])
            router = getattr(module, "router", None)
            
            if router:
                # Enregistrer le router
                app.include_router(router, prefix=prefix, tags=[service_name])
                routes_count = len(router.routes) if hasattr(router, 'routes') else 0
                
                # Log et statut
                logger.info(f"‚úÖ {service_name}: {routes_count} routes sur {prefix}")
                self.services_status[service_name] = {"status": "ok", "routes": routes_count, "prefix": prefix}
                return True
            else:
                logger.error(f"‚ùå {service_name}: Pas de router trouv√©")
                self.services_status[service_name] = {"status": "error", "error": "Pas de router"}
                return False
                
        except Exception as e:
            logger.error(f"‚ùå {service_name}: {str(e)}")
            self.services_status[service_name] = {"status": "error", "error": str(e)}
            return False
    
    def load_conversation_service_router(self, app: FastAPI):
        """‚úÖ SOLUTION CORRIG√âE: Cr√©er les routes directement dans local_app"""
        try:
            logger.info("üîó Cr√©ation routes conversation_service TinyBERT...")
            
            from conversation_service.models import IntentRequest, IntentResponse, HealthResponse
            
            # Cr√©er router
            router = APIRouter()
            
            @router.post("/detect-intent", response_model=IntentResponse)
            async def detect_intent(request: IntentRequest):
                """üéØ D√©tection intention financi√®re"""
                try:
                    # R√©cup√©rer d√©tecteur depuis app.state
                    detector = getattr(app.state, 'tinybert_detector', None)
                    if not detector:
                        raise HTTPException(status_code=500, detail="TinyBERT detector non disponible")
                    
                    if not detector.is_loaded:
                        raise HTTPException(status_code=500, detail="TinyBERT mod√®le non charg√©")
                    
                    intent, confidence, processing_time_ms = await detector.detect_intent(request.query)
                    
                    response = IntentResponse(
                        intent=intent,
                        confidence=confidence,
                        processing_time_ms=processing_time_ms,
                        query=request.query
                    )
                    
                    logger.info(f"‚úÖ Intent d√©tect√©: {intent} ({confidence:.3f}) en {processing_time_ms:.2f}ms")
                    return response
                    
                except HTTPException:
                    raise  # Re-raise HTTPException as-is
                except Exception as e:
                    logger.error(f"‚ùå Erreur d√©tection: {e}")
                    raise HTTPException(status_code=500, detail=f"Erreur d√©tection: {str(e)}")
            
            @router.get("/health", response_model=HealthResponse)
            async def health_check():
                """Sant√© du service"""
                try:
                    detector = getattr(app.state, 'tinybert_detector', None)
                    if not detector:
                        return HealthResponse(
                            status="unhealthy",
                            model_loaded=False,
                            total_requests=0,
                            average_latency_ms=0.0
                        )
                    
                    stats = detector.get_stats()
                    return HealthResponse(
                        status="healthy" if stats["model_loaded"] else "unhealthy",
                        model_loaded=stats["model_loaded"],
                        total_requests=stats["total_requests"],
                        average_latency_ms=stats["average_latency_ms"]
                    )
                except Exception as e:
                    logger.error(f"‚ùå Erreur health check: {e}")
                    return HealthResponse(
                        status="error",
                        model_loaded=False,
                        total_requests=0,
                        average_latency_ms=0.0
                    )
            
            @router.get("/")
            async def root():
                """Page d'accueil"""
                detector = getattr(app.state, 'tinybert_detector', None)
                model_info = {}
                
                if detector:
                    stats = detector.get_stats()
                    model_info = {
                        "model_loaded": stats["model_loaded"],
                        "total_requests": stats["total_requests"],
                        "average_latency_ms": stats["average_latency_ms"],
                        "device": stats["device"]
                    }
                
                return {
                    "service": "conversation_service",
                    "version": "1.0.0-tinybert",
                    "model": "TinyBERT",
                    "architecture": "minimaliste",
                    "endpoints": {
                        "detect_intent": "/detect-intent",
                        "health": "/health"
                    },
                    "model_info": model_info
                }
            
            # Enregistrer le router
            app.include_router(router, prefix="/api/v1/conversation", tags=["conversation"])
            routes_count = len(router.routes)
            
            logger.info(f"‚úÖ conversation_service: {routes_count} routes cr√©√©es directement")
            self.services_status["conversation_service"] = {
                "status": "ok", 
                "routes": routes_count,
                "prefix": "/api/v1/conversation",
                "architecture": "tinybert_direct_routes",
                "version": "1.0.0-tinybert",
                "initialized": True,
                "endpoints": [
                    "/api/v1/conversation/detect-intent",
                    "/api/v1/conversation/health", 
                    "/api/v1/conversation/"
                ]
            }
            return True
            
        except Exception as e:
            logger.error(f"‚ùå conversation_service routes: {str(e)}")
            self.services_status["conversation_service"] = {"status": "error", "error": str(e)}
            return False
    
    def check_service_health(self, service_name: str, module_path: str):
        """V√©rifie rapidement la sant√© d'un service"""
        try:
            # Pour db_service, pas de main.py √† v√©rifier - juste tester la connexion
            if service_name == "db_service":
                try:
                    from db_service.session import engine
                    from sqlalchemy import text
                    with engine.connect() as conn:
                        conn.execute(text("SELECT 1"))
                    logger.info(f"‚úÖ {service_name}: Connexion DB OK")
                    return True
                except Exception as e:
                    logger.error(f"‚ùå {service_name}: Connexion DB √©chou√©e - {str(e)}")
                    return False
            
            # Pour les autres services, essayer d'importer le main
            try:
                main_module = __import__(f"{module_path}.main", fromlist=["app"])
                
                # V√©rifier l'existence de l'app
                if hasattr(main_module, "app") or hasattr(main_module, "create_app"):
                    logger.info(f"‚úÖ {service_name}: Module principal OK")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è {service_name}: Pas d'app FastAPI trouv√©e")
                    return False
            except ImportError:
                # Si pas de main.py, c'est pas forc√©ment un probl√®me (comme db_service)
                logger.info(f"‚ÑπÔ∏è {service_name}: Pas de main.py (normal pour certains services)")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå {service_name}: √âchec v√©rification - {str(e)}")
            return False

def create_app():
    """Cr√©er l'application FastAPI principale avec nouveau conversation_service"""
    
    app = FastAPI(
        title="Harena Finance Platform - Local Dev",
        description="Plateforme de gestion financi√®re avec IA - Version d√©veloppement avec TinyBERT",
        version="1.0.0-dev"
    )

    # CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    loader = ServiceLoader()

    @app.on_event("startup")
    async def startup():
        logger.info("üöÄ D√©marrage Harena Finance Platform - LOCAL DEV avec TinyBERT CORRIG√â")
        
        # Test DB critique
        try:
            from db_service.session import engine
            from sqlalchemy import text
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            logger.info("‚úÖ Base de donn√©es connect√©e")
        except Exception as e:
            logger.error(f"‚ùå DB critique: {e}")
            raise RuntimeError("Database connection failed")
        
        # V√©rifier sant√© des services existants
        services_health = [
            ("user_service", "user_service"),
            ("db_service", "db_service"),
            ("sync_service", "sync_service"),
            ("enrichment_service", "enrichment_service"),
        ]
        
        for service_name, module_path in services_health:
            loader.check_service_health(service_name, module_path)
        
        # Charger les routers des services
        logger.info("üìã Chargement des routes des services...")
        
        # 1. User Service
        try:
            from user_service.api.endpoints.users import router as user_router
            app.include_router(user_router, prefix="/api/v1/users", tags=["users"])
            routes_count = len(user_router.routes) if hasattr(user_router, 'routes') else 0
            logger.info(f"‚úÖ user_service: {routes_count} routes sur /api/v1/users")
            loader.services_status["user_service"] = {"status": "ok", "routes": routes_count, "prefix": "/api/v1/users"}
        except Exception as e:
            logger.error(f"‚ùå User Service: {e}")
            loader.services_status["user_service"] = {"status": "error", "error": str(e)}

        # 2. Sync Service - modules principaux
        sync_modules = [
            ("sync_service.api.endpoints.sync", "/api/v1/sync", "Synchronisation"),
            ("sync_service.api.endpoints.transactions", "/api/v1/transactions", "Transactions"),
            ("sync_service.api.endpoints.accounts", "/api/v1/accounts", "Comptes"),
            ("sync_service.api.endpoints.categories", "/api/v1/categories", "Cat√©gories"),
            ("sync_service.api.endpoints.items", "/api/v1/items", "Items Bridge"),
            ("sync_service.api.endpoints.webhooks", "/webhooks", "Webhooks"),
        ]

        sync_successful = 0
        for module_path, prefix, description in sync_modules:
            try:
                module = __import__(module_path, fromlist=["router"])
                router = getattr(module, "router")
                service_name = f"sync_{module_path.split('.')[-1]}"
                app.include_router(router, prefix=prefix, tags=[module_path.split('.')[-1]])
                routes_count = len(router.routes) if hasattr(router, 'routes') else 0
                logger.info(f"‚úÖ {service_name}: {routes_count} routes sur {prefix}")
                loader.services_status[service_name] = {"status": "ok", "routes": routes_count, "prefix": prefix}
                sync_successful += 1
            except Exception as e:
                logger.error(f"‚ùå {module_path}: {e}")
                loader.services_status[f"sync_{module_path.split('.')[-1]}"] = {"status": "error", "error": str(e)}

        # 3. Enrichment Service - VERSION ELASTICSEARCH UNIQUEMENT
        logger.info("üîç Chargement et initialisation enrichment_service (Elasticsearch uniquement)...")
        try:
            # V√©rifier BONSAI_URL pour enrichment_service
            bonsai_url = os.environ.get("BONSAI_URL")
            if not bonsai_url:
                logger.warning("‚ö†Ô∏è BONSAI_URL non configur√©e - enrichment_service sera en mode d√©grad√©")
                enrichment_elasticsearch_available = False
                enrichment_init_success = False
            else:
                logger.info(f"üì° BONSAI_URL configur√©e pour enrichment: {bonsai_url[:50]}...")
                enrichment_elasticsearch_available = True
                
                # Initialiser les composants enrichment_service
                try:
                    logger.info("üîç Initialisation des composants enrichment_service...")
                    from enrichment_service.storage.elasticsearch_client import ElasticsearchClient
                    from enrichment_service.core.processor import ElasticsearchTransactionProcessor
                    
                    # Cr√©er et initialiser le client Elasticsearch pour enrichment
                    enrichment_elasticsearch_client = ElasticsearchClient()
                    await enrichment_elasticsearch_client.initialize()
                    logger.info("‚úÖ Enrichment Elasticsearch client initialis√©")
                    
                    # Cr√©er le processeur
                    enrichment_processor = ElasticsearchTransactionProcessor(enrichment_elasticsearch_client)
                    logger.info("‚úÖ Enrichment processor cr√©√©")
                    
                    # Injecter dans les routes enrichment_service
                    import enrichment_service.api.routes as enrichment_routes
                    enrichment_routes.elasticsearch_client = enrichment_elasticsearch_client
                    enrichment_routes.elasticsearch_processor = enrichment_processor
                    logger.info("‚úÖ Instances inject√©es dans enrichment_service routes")
                    
                    enrichment_init_success = True
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur initialisation composants enrichment: {e}")
                    enrichment_init_success = False
            
            # Charger les routes enrichment_service
            from enrichment_service.api.routes import router as enrichment_router
            app.include_router(enrichment_router, prefix="/api/v1/enrichment", tags=["enrichment"])
            routes_count = len(enrichment_router.routes) if hasattr(enrichment_router, 'routes') else 0
            
            if enrichment_elasticsearch_available and enrichment_init_success:
                logger.info(f"‚úÖ enrichment_service: {routes_count} routes sur /api/v1/enrichment (AVEC initialisation)")
                loader.services_status["enrichment_service"] = {
                    "status": "ok", 
                    "routes": routes_count, 
                    "prefix": "/api/v1/enrichment",
                    "architecture": "elasticsearch_only",
                    "version": "2.0.0-elasticsearch",
                    "elasticsearch_available": True,
                    "initialized": True
                }
            else:
                logger.warning(f"‚ö†Ô∏è enrichment_service: {routes_count} routes charg√©es en mode d√©grad√©")
                loader.services_status["enrichment_service"] = {
                    "status": "degraded", 
                    "routes": routes_count, 
                    "prefix": "/api/v1/enrichment",
                    "architecture": "elasticsearch_only",
                    "version": "2.0.0-elasticsearch",
                    "elasticsearch_available": enrichment_elasticsearch_available,
                    "initialized": enrichment_init_success,
                    "error": "BONSAI_URL not configured" if not enrichment_elasticsearch_available else "Initialization failed"
                }
                
        except Exception as e:
            logger.error(f"‚ùå Enrichment Service: {e}")
            loader.services_status["enrichment_service"] = {
                "status": "error", 
                "error": str(e),
                "architecture": "elasticsearch_only",
                "version": "2.0.0-elasticsearch"
            }

        # 4. Search Service
        logger.info("üîç Chargement et initialisation du search_service...")
        try:
            # D'abord initialiser les composants Elasticsearch
            search_init_success = await loader.initialize_search_service(app)
            
            # Ensuite charger les routes avec la m√©thode standardis√©e
            if search_init_success:
                router_success = loader.load_service_router(
                    app, 
                    "search_service", 
                    "search_service.api.routes", 
                    "/api/v1/search"
                )
                
                if router_success:
                    # Initialiser le moteur dans les routes
                    try:
                        from search_service.api import initialize_search_engine
                        elasticsearch_client = getattr(app.state, 'elasticsearch_client', None)
                        if elasticsearch_client:
                            initialize_search_engine(elasticsearch_client)
                            logger.info("‚úÖ Search engine initialis√© dans les routes")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur initialisation search engine dans routes: {e}")
                    
                    loader.services_status["search_service"]["initialized"] = True
                    loader.services_status["search_service"]["architecture"] = "simplified_unified"
                    logger.info("‚úÖ search_service: Compl√®tement initialis√©")
                else:
                    logger.error("‚ùå search_service: Initialisation OK mais router non charg√©")
                    loader.services_status["search_service"] = {
                        "status": "degraded", 
                        "routes": 0, 
                        "prefix": "/api/v1/search",
                        "initialized": True,
                        "error": "Router loading failed",
                        "architecture": "simplified_unified"
                    }
            else:
                logger.error("‚ùå search_service: Initialisation des composants √©chou√©e")
                loader.services_status["search_service"] = {
                    "status": "error", 
                    "error": loader.search_service_error,
                    "architecture": "simplified_unified"
                }
                    
        except Exception as e:
            logger.error(f"‚ùå search_service: Erreur g√©n√©rale - {str(e)}")
            loader.services_status["search_service"] = {
                "status": "error", 
                "error": str(e),
                "architecture": "simplified_unified"
            }

        # 5. ‚úÖ CONVERSATION SERVICE CORRIG√â - ROUTER DIRECT
        logger.info("ü§ñ Chargement et initialisation du conversation_service - TinyBERT CORRIG√â...")
        try:
            # √âTAPE 1: Initialiser le TinyBERT Detector
            conversation_init_success = await loader.initialize_conversation_service(app)
            
            # √âTAPE 2: Cr√©er les routes directement (SOLUTION CORRIG√âE)
            if conversation_init_success:
                router_success = loader.load_conversation_service_router(app)
                
                if router_success:
                    loader.services_status["conversation_service"]["initialized"] = True
                    logger.info("‚úÖ conversation_service: TinyBERT compl√®tement initialis√© avec routes directes")
                else:
                    logger.error("‚ùå conversation_service: Initialisation OK mais routes non cr√©√©es")
                    loader.services_status["conversation_service"] = {
                        "status": "degraded", 
                        "routes": 0, 
                        "prefix": "/api/v1/conversation",
                        "initialized": True,
                        "error": "Routes creation failed",
                        "architecture": "tinybert_direct_routes",
                        "version": "1.0.0-tinybert"
                    }
            else:
                logger.error("‚ùå conversation_service: Initialisation TinyBERT √©chou√©e")
                loader.services_status["conversation_service"] = {
                    "status": "error", 
                    "error": loader.conversation_service_error,
                    "architecture": "tinybert_direct_routes",
                    "version": "1.0.0-tinybert"
                }
                        
        except Exception as e:
            logger.error(f"‚ùå conversation_service: Erreur g√©n√©rale TinyBERT - {str(e)}")
            loader.services_status["conversation_service"] = {
                "status": "error", 
                "error": str(e),
                "architecture": "tinybert_direct_routes",
                "version": "1.0.0-tinybert"
            }

        # Compter les services r√©ussis
        successful_services = len([s for s in loader.services_status.values() if s.get("status") in ["ok", "degraded"]])
        logger.info(f"‚úÖ D√©marrage termin√©: {successful_services} services charg√©s")
        
        # Rapport final d√©taill√©
        ok_services = [name for name, status in loader.services_status.items() if status.get("status") == "ok"]
        degraded_services = [name for name, status in loader.services_status.items() if status.get("status") == "degraded"]
        failed_services = [name for name, status in loader.services_status.items() if status.get("status") == "error"]
        
        logger.info(f"üìä Services OK: {', '.join(ok_services)}")
        if degraded_services:
            logger.warning(f"üìä Services d√©grad√©s: {', '.join(degraded_services)}")
        if failed_services:
            logger.warning(f"üìä Services en erreur: {', '.join(failed_services)}")
        
        logger.info("üéâ Plateforme Harena compl√®tement d√©ploy√©e avec TinyBERT CORRIG√â!")

    @app.get("/health")
    async def health():
        """Health check global avec nouveau conversation_service"""
        ok_services = [name for name, status in loader.services_status.items() 
                      if status.get("status") == "ok"]
        degraded_services = [name for name, status in loader.services_status.items() 
                           if status.get("status") == "degraded"]
        
        # D√©tails sp√©ciaux pour search_service, conversation_service et enrichment_service
        search_status = loader.services_status.get("search_service", {})
        conversation_status = loader.services_status.get("conversation_service", {})
        enrichment_status = loader.services_status.get("enrichment_service", {})
        
        return {
            "status": "healthy" if ok_services else ("degraded" if degraded_services else "unhealthy"),
            "services_ok": len(ok_services),
            "services_degraded": len(degraded_services),
            "total_services": len(loader.services_status),
            "services": {
                "ok": list(ok_services),
                "degraded": list(degraded_services)
            },
            "search_service": {
                "status": search_status.get("status"),
                "initialized": search_status.get("initialized", False),
                "error": search_status.get("error"),
                "architecture": search_status.get("architecture")
            },
            "conversation_service": {
                "status": conversation_status.get("status"),
                "initialized": conversation_status.get("initialized", False),
                "error": conversation_status.get("error"),
                "architecture": conversation_status.get("architecture"),
                "version": conversation_status.get("version"),
                "endpoints": conversation_status.get("endpoints", [])
            },
            "enrichment_service": {
                "status": enrichment_status.get("status"),
                "architecture": enrichment_status.get("architecture"),
                "version": enrichment_status.get("version"),
                "elasticsearch_available": enrichment_status.get("elasticsearch_available", False),
                "initialized": enrichment_status.get("initialized", False),
                "error": enrichment_status.get("error")
            }
        }

    @app.get("/status")
    async def status():
        """Statut d√©taill√© avec nouveau conversation_service"""
        return {
            "platform": "Harena Finance",
            "services": loader.services_status,
            "environment": os.environ.get("ENVIRONMENT", "development"),
            "search_service_details": {
                "initialized": loader.search_service_initialized,
                "error": loader.search_service_error,
                "architecture": "simplified_unified"
            },
            "conversation_service_details": {
                "initialized": loader.conversation_service_initialized,
                "error": loader.conversation_service_error,
                "architecture": "tinybert_direct_routes",
                "version": "1.0.0-tinybert-fixed",
                "model": "TinyBERT",
                "fix_applied": "Router direct dans local_app.py - TinyBERT partag√© via app.state",
                "features": [
                    "D√©tection intentions financi√®res ultra-rapide",
                    "Router direct (pas de mount) - CORRIG√â",
                    "TinyBERT partag√© via app.state - CORRIG√â",
                    "Mesure pr√©cise latence < 50ms",
                    "M√©triques int√©gr√©es temps r√©el",
                    "Pr√™t pour fine-tuning donn√©es fran√ßaises"
                ],
                "endpoints": {
                    "main": "/api/v1/conversation/detect-intent",
                    "health": "/api/v1/conversation/health",
                    "root": "/api/v1/conversation/"
                },
                "performance_targets": {
                    "latency_ms": "< 50",
                    "accuracy": "> 70%",
                    "model_size": "TinyBERT (50MB)",
                    "memory_usage": "< 500MB"
                }
            },
            "enrichment_service_details": {
                "architecture": "elasticsearch_only",
                "version": "2.0.0-elasticsearch",
                "features": [
                    "Transaction structuring",
                    "Elasticsearch indexing",
                    "Batch processing",
                    "User sync operations"
                ]
            }
        }

    @app.get("/")
    async def root():
        """Page d'accueil avec conversation_service TinyBERT CORRIG√â"""
        return {
            "message": "üè¶ Harena Finance Platform - LOCAL DEVELOPMENT avec TinyBERT CORRIG√â",
            "version": "1.0.0-dev-fixed",
            "services_available": [
                "user_service - Gestion utilisateurs",
                "sync_service - Synchronisation Bridge API", 
                "enrichment_service - Enrichissement Elasticsearch (v2.0)",
                "search_service - Recherche lexicale (Architecture simplifi√©e)",
                "conversation_service - TinyBERT D√©tection Intentions CORRIG√â (<50ms)"
            ],
            "conversation_service_fixed": {
                "description": "Service TinyBERT avec router direct CORRIG√â",
                "architecture": "Input ‚Üí TinyBERT (via app.state) ‚Üí Intent Classification ‚Üí JSON Response",
                "main_endpoint": "/api/v1/conversation/detect-intent",
                "performance_target": "< 50ms latency, > 70% accuracy",
                "fix_applied": {
                    "problem": "Mod√®le TinyBERT non charg√© - mount app isolation",
                    "solution": "Router direct dans local_app.py + TinyBERT via app.state",
                    "status": "CORRIG√â ‚úÖ"
                },
                "capabilities": [
                    "D√©tection intentions financi√®res",
                    "Acc√®s direct au mod√®le TinyBERT",
                    "Mesure pr√©cise latence",
                    "M√©triques temps r√©el",
                    "Pr√™t fine-tuning"
                ],
                "test_query": {
                    "url": "POST /api/v1/conversation/detect-intent",
                    "example": '{"query": "quel est mon solde"}',
                    "expected_response": {
                        "intent": "BALANCE_CHECK",
                        "confidence": 0.87,
                        "processing_time_ms": 37.2,
                        "query": "quel est mon solde",
                        "model": "TinyBERT"
                    }
                }
            },
            "endpoints": {
                "/health": "Contr√¥le sant√©",
                "/status": "Statut des services",
                "/docs": "Documentation interactive",
                "/api/v1/users/*": "Gestion utilisateurs",
                "/api/v1/sync/*": "Synchronisation",
                "/api/v1/transactions/*": "Transactions",
                "/api/v1/accounts/*": "Comptes",
                "/api/v1/categories/*": "Cat√©gories",
                "/api/v1/enrichment/elasticsearch/*": "Enrichissement Elasticsearch (v2.0)",
                "/api/v1/search/*": "Recherche lexicale (Architecture unifi√©e)",
                "/api/v1/conversation/detect-intent": "üéØ TinyBERT D√©tection Intentions CORRIG√â",
                "/api/v1/conversation/health": "Sant√© TinyBERT CORRIG√â",
                "/api/v1/conversation/": "Info conversation service CORRIG√â"
            },
            "development_mode": {
                "hot_reload": True,
                "debug_logs": True,
                "local_services": ["PostgreSQL", "Redis", "Elasticsearch (requis pour enrichment + search)"],
                "docs_url": "http://localhost:8000/docs",
                "tinybert_test": "http://localhost:8000/api/v1/conversation/detect-intent"
            },
            "architecture_updates": {
                "conversation_service": {
                    "version": "1.0.0-tinybert-fixed",
                    "architecture": "router_direct_dans_local_app",
                    "fix_details": {
                        "problem_original": "app.mount() isolait TinyBERT dans sous-application",
                        "solution_applied": "Router direct avec acc√®s app.state.tinybert_detector",
                        "benefits": [
                            "TinyBERT partag√© entre local_app et routes",
                            "Pas d'isolation de contexte",
                            "Acc√®s direct au mod√®le charg√©",
                            "Gestion d'erreurs robuste"
                        ]
                    },
                    "changes": [
                        "üîß FIX: Router direct au lieu de app.mount()",
                        "üîß FIX: TinyBERT via app.state au lieu d'instance locale",
                        "üîß FIX: Gestion d'erreurs HTTP explicites",
                        "‚úÖ Architecture ultra-minimaliste conserv√©e",
                        "‚úÖ Un seul endpoint: /detect-intent",
                        "‚úÖ Mesure pr√©cise latence (<50ms)",
                        "‚úÖ M√©triques temps r√©el int√©gr√©es"
                    ],
                    "performance_goals": {
                        "latency": "< 50ms (objectif: < 30ms)",
                        "accuracy": "> 70% intentions financi√®res",
                        "memory": "< 500MB RAM",
                        "startup": "< 10s chargement mod√®le"
                    },
                    "supported_intents": [
                        "BALANCE_CHECK - Consultation soldes",
                        "TRANSFER - Virements", 
                        "EXPENSE_ANALYSIS - Analyse d√©penses",
                        "CARD_MANAGEMENT - Gestion cartes",
                        "GREETING - Salutations",
                        "HELP - Aide",
                        "GOODBYE - Au revoir",
                        "UNKNOWN - Non reconnu"
                    ],
                    "next_steps": [
                        "1. Tester avec requ√™tes r√©elles (MAINTENANT POSSIBLE)",
                        "2. Mesurer latence et pr√©cision",
                        "3. Fine-tuner sur donn√©es fran√ßaises",
                        "4. Optimiser si < 70% pr√©cision"
                    ]
                },
                "enrichment_service": {
                    "version": "2.0.0-elasticsearch",
                    "changes": [
                        "Suppression compl√®te de Qdrant et embeddings",
                        "Architecture Elasticsearch uniquement",
                        "Nouveaux endpoints: /api/v1/enrichment/elasticsearch/*",
                        "Performance optimis√©e pour l'indexation bulk",
                        "Simplification drastique du code"
                    ]
                }
            },
            "testing_conversation_service": {
                "status": "MAINTENANT FONCTIONNEL ‚úÖ",
                "quick_test": {
                    "command": "curl -X POST http://localhost:8000/api/v1/conversation/detect-intent -H 'Content-Type: application/json' -d '{\"query\": \"quel est mon solde\"}'",
                    "expected_response": {
                        "intent": "BALANCE_CHECK",
                        "confidence": "0.8+",
                        "processing_time_ms": "< 50",
                        "success": "true"
                    }
                },
                "test_queries": [
                    "quel est mon solde",
                    "faire un virement de 100 euros",
                    "mes d√©penses ce mois",
                    "bloquer ma carte",
                    "bonjour",
                    "aide",
                    "au revoir"
                ],
                "performance_monitoring": {
                    "health_endpoint": "GET /api/v1/conversation/health",
                    "metrics": [
                        "total_requests",
                        "average_latency_ms", 
                        "model_loaded",
                        "device (cpu/cuda)"
                    ]
                },
                "troubleshooting": {
                    "previous_error": "Mod√®le TinyBERT non charg√©",
                    "fix_applied": "Router direct + app.state",
                    "status": "R√âSOLU ‚úÖ"
                }
            }
        }

    return app

# Cr√©er l'app
app = create_app()

if __name__ == "__main__":
    import uvicorn
    logger.info("üî• Lancement du serveur de d√©veloppement avec hot reload")
    logger.info("üì° Acc√®s: http://localhost:8000")
    logger.info("üìö Docs: http://localhost:8000/docs")
    logger.info("üîç Status: http://localhost:8000/status")
    logger.info("ü§ñ TinyBERT Conversation Service CORRIG√â: http://localhost:8000/api/v1/conversation/")
    logger.info("üéØ Endpoint principal CORRIG√â: http://localhost:8000/api/v1/conversation/detect-intent")
    logger.info("üìä Sant√© TinyBERT CORRIG√â: http://localhost:8000/api/v1/conversation/health")
    logger.info("üß™ Test rapide MAINTENANT FONCTIONNEL: curl -X POST http://localhost:8000/api/v1/conversation/detect-intent -H 'Content-Type: application/json' -d '{\"query\": \"quel est mon solde\"}'")
    logger.info("‚úÖ PROBL√àME 'Mod√®le TinyBERT non charg√©' R√âSOLU avec router direct!")
    
    uvicorn.run(
        "local_app:app", 
        host="0.0.0.0", 
        port=8000,
        reload=True,
        log_level="info"
    )