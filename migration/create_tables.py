#!/usr/bin/env python
"""
Cr√©er toutes les tables directement depuis les models SQLAlchemy
Sans passer par les migrations Alembic qui ont des probl√®mes avec une base vide
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

print("üîß Importation des modules...")

from config.database import Base, engine
from sqlalchemy import text

# Import de tous les models pour qu'ils soient enregistr√©s dans Base.metadata
print("üì¶ Chargement des models...")
from user_service.models import User
from conversation_service.models import (
    ConversationHistory,
    ConversationMetrics,
    ConversationTurn
)
from sync_service.models import (
    BankAccount,
    BankConnection,
    RawTransaction,
    Transaction,
    Category,
    CategoryGroup
)
from enrichment_service.models import EnrichedTransaction
from metric_service.models import (
    MetricDefinition,
    MetricValue,
    MetricAlert
)

print(f"‚úÖ {len(Base.metadata.tables)} tables trouv√©es dans les models")
print("\nTables √† cr√©er:")
for table_name in sorted(Base.metadata.tables.keys()):
    print(f"  - {table_name}")

print("\n" + "="*50)
print("CR√âATION DES TABLES DANS RDS")
print("="*50)

try:
    # Cr√©er toutes les tables
    print("\nüèóÔ∏è  Cr√©ation des tables...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables cr√©√©es avec succ√®s!")

    # V√©rifier les tables cr√©√©es
    print("\nüîç V√©rification...")
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT tablename
            FROM pg_tables
            WHERE schemaname = 'public'
            ORDER BY tablename
        """))
        tables = [row[0] for row in result]

        print(f"\n‚úÖ {len(tables)} tables cr√©√©es dans RDS:")
        for table in tables:
            print(f"  ‚úì {table}")

    # Marquer Alembic comme √† jour (sur la derni√®re migration)
    print("\nüìã Marquage Alembic √† la derni√®re version...")
    with engine.connect() as conn:
        # Cr√©er la table alembic_version si elle n'existe pas
        conn.execute(text("""
            CREATE TABLE IF NOT EXISTS alembic_version (
                version_num VARCHAR(32) NOT NULL,
                CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
            )
        """))

        # Marquer comme √©tant √† la derni√®re migration
        conn.execute(text("DELETE FROM alembic_version"))
        conn.execute(text("INSERT INTO alembic_version (version_num) VALUES ('065c1780d509')"))
        conn.commit()

    print("‚úÖ Alembic marqu√© √† la version: 065c1780d509 (head)")

    print("\n" + "="*50)
    print("‚úÖ SCH√âMA RDS CR√â√â AVEC SUCC√àS!")
    print("="*50)
    print("\nProcha√Æne √©tape: importer les donn√©es depuis Heroku")

except Exception as e:
    print(f"\n‚ùå ERREUR: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
