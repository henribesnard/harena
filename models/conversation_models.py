"""Conversation related models."""
from __future__ import annotations

from datetime import datetime
from typing import List

from pydantic import BaseModel, Field, field_validator

from .enums import MessageRole
from core.validators import non_empty_str


class Message(BaseModel):
    """A single message in a conversation."""

    role: MessageRole = Field(...)
    content: str = Field(...)
    timestamp: datetime = Field(default_factory=datetime.utcnow)

    @field_validator("content")
    @classmethod
    def _validate_content(cls, v: str) -> str:
        return non_empty_str(v)


class ConversationRequest(BaseModel):
    """Incoming user request to the conversation service."""

    user_id: str = Field(...)
    message: str = Field(...)

    @field_validator("user_id", "message")
    @classmethod
    def _non_empty(cls, v: str) -> str:
        return non_empty_str(v)


class ConversationResponse(BaseModel):
    """Response generated by the conversation service."""

    agent_name: str = Field(...)
    response: str = Field(...)

    @field_validator("agent_name", "response")
    @classmethod
    def _non_empty(cls, v: str) -> str:
        return non_empty_str(v)


class ConversationTurn(BaseModel):
    """A full conversation turn consisting of request and response."""

    request: ConversationRequest
    response: ConversationResponse
    messages: List[Message] = Field(default_factory=list)


__all__ = [
    "Message",
    "ConversationRequest",
    "ConversationResponse",
    "ConversationTurn",
]
