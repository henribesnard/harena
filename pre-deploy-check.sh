#!/bin/bash

# ============================================
# SCRIPT DE V√âRIFICATION PR√â-D√âPLOIEMENT
# ============================================
# Ce script v√©rifie que l'environnement est pr√™t
# pour le d√©ploiement des services backend Harena
# ============================================

set -e

echo "============================================"
echo "üîç V√âRIFICATION PR√â-D√âPLOIEMENT HARENA"
echo "============================================"
echo ""

EXIT_CODE=0

# ============================================
# 1. V√©rifier les conteneurs existants
# ============================================
echo "üì¶ 1. V√©rification des conteneurs existants..."

if docker ps | grep -q "harena-postgres"; then
    echo "  ‚úÖ PostgreSQL (harena-postgres) - Running"
else
    echo "  ‚ùå PostgreSQL (harena-postgres) - NOT FOUND ou STOPPED"
    echo "     Action : D√©marrer PostgreSQL avant de continuer"
    EXIT_CODE=1
fi

if docker ps | grep -q "harena-redis"; then
    echo "  ‚úÖ Redis (harena-redis) - Running"
else
    echo "  ‚ùå Redis (harena-redis) - NOT FOUND ou STOPPED"
    echo "     Action : D√©marrer Redis avant de continuer"
    EXIT_CODE=1
fi

if docker ps | grep -q "harena-elasticsearch"; then
    echo "  ‚ö†Ô∏è  Elasticsearch local d√©tect√© - Consomme 1.14GB RAM"
    echo "     Recommandation : Arr√™ter et utiliser Bonsai (Heroku)"
    echo "     Commande : docker stop harena-elasticsearch && docker rm harena-elasticsearch"
fi

echo ""

# ============================================
# 2. V√©rifier la RAM disponible
# ============================================
echo "üíæ 2. V√©rification de la RAM disponible..."

AVAILABLE_RAM_MB=$(free -m | awk 'NR==2{print $7}')
REQUIRED_RAM_MB=1200

echo "  RAM disponible : ${AVAILABLE_RAM_MB}MB"
echo "  RAM requise : ${REQUIRED_RAM_MB}MB"

if [ "$AVAILABLE_RAM_MB" -lt "$REQUIRED_RAM_MB" ]; then
    echo "  ‚ùå RAM insuffisante !"
    echo "     Solutions :"
    echo "     1. Arr√™ter Elasticsearch local (lib√®re 1.14GB)"
    echo "     2. Upgrader l'instance √† t4g.medium (4GB RAM)"
    EXIT_CODE=1
else
    echo "  ‚úÖ RAM suffisante"
fi

echo ""

# ============================================
# 3. V√©rifier le disque disponible
# ============================================
echo "üíø 3. V√©rification du disque disponible..."

AVAILABLE_DISK_GB=$(df -BG / | awk 'NR==2{print $4}' | sed 's/G//')
REQUIRED_DISK_GB=5

echo "  Disque disponible : ${AVAILABLE_DISK_GB}GB"
echo "  Disque requis : ${REQUIRED_DISK_GB}GB"

if [ "$AVAILABLE_DISK_GB" -lt "$REQUIRED_DISK_GB" ]; then
    echo "  ‚ùå Disque insuffisant !"
    echo "     Action : Nettoyer les images Docker inutilis√©es"
    echo "     Commande : docker system prune -a"
    EXIT_CODE=1
else
    echo "  ‚úÖ Disque suffisant"
fi

echo ""

# ============================================
# 4. V√©rifier le fichier .env
# ============================================
echo "üîë 4. V√©rification du fichier .env..."

if [ ! -f .env ]; then
    echo "  ‚ùå Fichier .env manquant !"
    echo "     Action : Cr√©er le fichier .env avec les variables n√©cessaires"
    EXIT_CODE=1
else
    echo "  ‚úÖ Fichier .env trouv√©"

    # V√©rifier les variables critiques
    MISSING_VARS=()

    if ! grep -q "DATABASE_URL=" .env; then
        MISSING_VARS+=("DATABASE_URL")
    fi

    if ! grep -q "REDIS_URL=" .env; then
        MISSING_VARS+=("REDIS_URL")
    fi

    if ! grep -q "ELASTICSEARCH_URL=" .env; then
        MISSING_VARS+=("ELASTICSEARCH_URL")
    fi

    if ! grep -q "SECRET_KEY=" .env; then
        MISSING_VARS+=("SECRET_KEY")
    fi

    if ! grep -q "OPENAI_API_KEY=" .env; then
        MISSING_VARS+=("OPENAI_API_KEY")
    fi

    if ! grep -q "DEEPSEEK_API_KEY=" .env; then
        MISSING_VARS+=("DEEPSEEK_API_KEY")
    fi

    if [ ${#MISSING_VARS[@]} -gt 0 ]; then
        echo "  ‚ö†Ô∏è  Variables manquantes dans .env :"
        for var in "${MISSING_VARS[@]}"; do
            echo "     - $var"
        done
        EXIT_CODE=1
    else
        echo "  ‚úÖ Toutes les variables critiques sont pr√©sentes"
    fi
fi

echo ""

# ============================================
# 5. V√©rifier Docker et Docker Compose
# ============================================
echo "üê≥ 5. V√©rification de Docker..."

if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    echo "  ‚úÖ Docker install√© : $DOCKER_VERSION"
else
    echo "  ‚ùå Docker n'est pas install√©"
    echo "     Action : Installer Docker"
    echo "     Commande : curl -fsSL https://get.docker.com | sh"
    EXIT_CODE=1
fi

if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version)
    echo "  ‚úÖ Docker Compose install√© : $COMPOSE_VERSION"
else
    echo "  ‚ùå Docker Compose n'est pas install√©"
    echo "     Action : Installer Docker Compose"
    EXIT_CODE=1
fi

echo ""

# ============================================
# 6. V√©rifier Nginx
# ============================================
echo "üåê 6. V√©rification de Nginx..."

if command -v nginx &> /dev/null; then
    NGINX_VERSION=$(nginx -v 2>&1)
    echo "  ‚úÖ Nginx install√© : $NGINX_VERSION"

    # V√©rifier si Nginx est en cours d'ex√©cution
    if systemctl is-active --quiet nginx; then
        echo "  ‚úÖ Nginx est en cours d'ex√©cution"
    else
        echo "  ‚ö†Ô∏è  Nginx n'est pas en cours d'ex√©cution"
        echo "     Action : D√©marrer Nginx"
        echo "     Commande : sudo systemctl start nginx"
    fi
else
    echo "  ‚ùå Nginx n'est pas install√©"
    echo "     Action : Installer Nginx"
    echo "     Commande : sudo yum install -y nginx (Amazon Linux)"
    echo "              : sudo apt install -y nginx (Ubuntu)"
    EXIT_CODE=1
fi

echo ""

# ============================================
# 7. V√©rifier la connexion aux bases de donn√©es
# ============================================
echo "üîå 7. V√©rification de la connexion aux bases de donn√©es..."

# Test PostgreSQL
if docker exec harena-postgres pg_isready -U harena_admin &> /dev/null; then
    echo "  ‚úÖ PostgreSQL accessible"
else
    echo "  ‚ùå PostgreSQL non accessible"
    EXIT_CODE=1
fi

# Test Redis
if docker exec harena-redis redis-cli --no-auth-warning -a "HaReNa2024-Redis-Auth-Token-Secure-Key-123456" ping &> /dev/null; then
    echo "  ‚úÖ Redis accessible"
else
    echo "  ‚ùå Redis non accessible"
    EXIT_CODE=1
fi

# Test Elasticsearch (Bonsai)
if curl -s -o /dev/null -w "%{http_code}" "https://37r8v9zfzn:4o7ydjkcc8@fir-178893546.eu-west-1.bonsaisearch.net:443" | grep -q "200\|401"; then
    echo "  ‚úÖ Elasticsearch (Bonsai) accessible"
else
    echo "  ‚ö†Ô∏è  Elasticsearch (Bonsai) non accessible"
    echo "     V√©rifier l'URL dans .env : ELASTICSEARCH_URL"
fi

echo ""

# ============================================
# 8. V√©rifier les fichiers n√©cessaires
# ============================================
echo "üìÅ 8. V√©rification des fichiers n√©cessaires..."

REQUIRED_FILES=(
    "docker-compose.prod.yml"
    "nginx.conf"
    "user_service/Dockerfile"
    "metric_service/Dockerfile"
    "budget_profiling_service/Dockerfile"
    "search_service/Dockerfile"
    "conversation_service_v3/Dockerfile"
)

ALL_FILES_PRESENT=true

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file manquant"
        ALL_FILES_PRESENT=false
        EXIT_CODE=1
    fi
done

echo ""

# ============================================
# 9. R√©sum√©
# ============================================
echo "============================================"
if [ $EXIT_CODE -eq 0 ]; then
    echo "‚úÖ TOUS LES CHECKS SONT PASS√âS !"
    echo "============================================"
    echo ""
    echo "üöÄ Vous pouvez proc√©der au d√©ploiement :"
    echo "   ./deploy.sh"
    echo ""
else
    echo "‚ùå CERTAINS CHECKS ONT √âCHOU√â"
    echo "============================================"
    echo ""
    echo "‚ö†Ô∏è  Corrigez les probl√®mes ci-dessus avant de d√©ployer."
    echo ""
fi

exit $EXIT_CODE
