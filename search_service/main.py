"""
Module principal am√©lior√© du service de recherche avec logging complet.

Cette version int√®gre tous les am√©liorations de logging, monitoring et diagnostic.
"""
import logging
import time
import sys
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Imports du service de recherche
from search_service.api.routes import router
from search_service.core.embeddings import embedding_service
from search_service.core.reranker import reranker_service
from search_service.storage.elastic_client import ElasticClient  # Version am√©lior√©e
from search_service.storage.qdrant_client import QdrantClient   # Version am√©lior√©e
from search_service.utils.cache import SearchCache

# Imports des nouveaux modules de monitoring
from search_service.monitoring.search_monitor import search_monitor
from search_service.monitoring.middleware import setup_middleware, setup_metrics_logging
from search_service.monitoring.diagnostic import setup_diagnostic_routes

from config_service.config import settings

# Configuration du logging principal
def setup_logging():
    """Configure le syst√®me de logging complet."""
    
    # Configuration du format de base
    log_format = (
        '%(asctime)s - %(name)s - %(levelname)s - '
        '%(module)s:%(funcName)s:%(lineno)d - %(message)s'
    )
    
    # Configuration du logger racine
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Loggers sp√©cialis√©s avec niveaux diff√©rents
    loggers_config = {
        "search_service": logging.INFO,
        "search_service.elasticsearch": logging.INFO,
        "search_service.qdrant": logging.INFO,
        "search_service.monitoring": logging.INFO,
        "search_service.middleware": logging.INFO,
        "search_service.diagnostic": logging.INFO,
        "search_service.metrics": logging.INFO,
        "search_service.access": logging.INFO,
    }
    
    # Configurer chaque logger
    for logger_name, level in loggers_config.items():
        logger = logging.getLogger(logger_name)
        logger.setLevel(level)
    
    # Logger de d√©bogage (seulement si DEBUG activ√©)
    if settings.DEBUG:
        logging.getLogger("search_service").setLevel(logging.DEBUG)
        logging.getLogger("search_service.elasticsearch").setLevel(logging.DEBUG)
        logging.getLogger("search_service.qdrant").setLevel(logging.DEBUG)
    
    # Configurer les loggers externes (r√©duire le bruit)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("elasticsearch").setLevel(logging.WARNING)
    logging.getLogger("qdrant_client").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    
    print("üìä Syst√®me de logging configur√©")


# Configuration du logging d√®s l'import
setup_logging()
logger = logging.getLogger("search_service.main")

# Instances globales
elastic_client = None
qdrant_client = None
search_cache = None
startup_time = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie am√©lior√© avec monitoring complet."""
    global elastic_client, qdrant_client, search_cache, startup_time
    
    # =============================================================================
    # PHASE D'INITIALISATION
    # =============================================================================
    
    logger.info("üöÄ === D√âMARRAGE DU SERVICE DE RECHERCHE HYBRIDE ===")
    startup_time = time.time()
    
    # Configuration des m√©triques
    setup_metrics_logging()
    
    # V√©rification des configurations critiques
    logger.info("üîß V√©rification des configurations...")
    config_issues = []
    
    if not settings.SEARCHBOX_URL and not settings.BONSAI_URL:
        config_issues.append("‚ùå ELASTICSEARCH: Aucune URL configur√©e (SEARCHBOX_URL/BONSAI_URL)")
    else:
        logger.info("‚úÖ ELASTICSEARCH: URL configur√©e")
    
    if not settings.QDRANT_URL:
        config_issues.append("‚ùå QDRANT: URL non configur√©e (QDRANT_URL)")
    else:
        logger.info("‚úÖ QDRANT: URL configur√©e")
    
    if not settings.COHERE_KEY:
        config_issues.append("‚ö†Ô∏è COHERE: Cl√© non configur√©e (reranking indisponible)")
    else:
        logger.info("‚úÖ COHERE: Cl√© configur√©e")
    
    if not settings.OPENAI_API_KEY:
        config_issues.append("‚ö†Ô∏è OPENAI: Cl√© non configur√©e (embeddings indisponibles)")
    else:
        logger.info("‚úÖ OPENAI: Cl√© configur√©e")
    
    # Log des probl√®mes de configuration
    if config_issues:
        logger.warning("‚ö†Ô∏è Probl√®mes de configuration d√©tect√©s:")
        for issue in config_issues:
            logger.warning(f"  {issue}")
    
    # =============================================================================
    # INITIALISATION DES SERVICES EXTERNES
    # =============================================================================
    
    logger.info("üîå Initialisation des services externes...")
    
    # Service d'embeddings
    try:
        logger.info("ü§ñ Initialisation service d'embeddings...")
        await embedding_service.initialize()
        logger.info("‚úÖ Service d'embeddings pr√™t")
    except Exception as e:
        logger.error(f"‚ùå √âchec initialisation embeddings: {e}")
        logger.error(f"üìç D√©tails", exc_info=True)
    
    # Service de reranking
    try:
        logger.info("üéØ Initialisation service de reranking...")
        await reranker_service.initialize()
        logger.info("‚úÖ Service de reranking pr√™t")
    except Exception as e:
        logger.error(f"‚ùå √âchec initialisation reranking: {e}")
        logger.error(f"üìç D√©tails", exc_info=True)
    
    # =============================================================================
    # INITIALISATION DES CLIENTS DE STOCKAGE
    # =============================================================================
    
    logger.info("üíæ Initialisation des clients de stockage...")
    
    # Client Elasticsearch (avec logging am√©lior√©)
    try:
        logger.info("üîç Initialisation client Elasticsearch...")
        elastic_client = ElasticClient()  # Version am√©lior√©e
        await elastic_client.initialize()
        
        if elastic_client._initialized:
            logger.info("‚úÖ Client Elasticsearch op√©rationnel")
        else:
            logger.error("‚ùå Client Elasticsearch non op√©rationnel")
            
    except Exception as e:
        logger.error(f"üí• Erreur critique Elasticsearch: {e}")
        logger.error(f"üìç D√©tails", exc_info=True)
        elastic_client = None
    
    # Client Qdrant (avec logging am√©lior√©)
    try:
        logger.info("üéØ Initialisation client Qdrant...")
        qdrant_client = QdrantClient()  # Version am√©lior√©e
        await qdrant_client.initialize()
        
        if qdrant_client._initialized:
            logger.info("‚úÖ Client Qdrant op√©rationnel")
        else:
            logger.error("‚ùå Client Qdrant non op√©rationnel")
            
    except Exception as e:
        logger.error(f"üí• Erreur critique Qdrant: {e}")
        logger.error(f"üìç D√©tails", exc_info=True)
        qdrant_client = None
    
    # =============================================================================
    # INITIALISATION DU CACHE ET MONITORING
    # =============================================================================
    
    logger.info("üóÉÔ∏è Initialisation cache et monitoring...")
    
    # Cache de recherche
    search_cache = SearchCache()
    logger.info("‚úÖ Cache de recherche initialis√©")
    
    # Configuration du monitor avec les clients
    search_monitor.set_clients(
        elasticsearch_client=elastic_client,
        qdrant_client=qdrant_client
    )
    
    # D√©marrage du monitoring en arri√®re-plan
    await search_monitor.start_monitoring()
    logger.info("‚úÖ Monitoring d√©marr√©")
    
    # =============================================================================
    # INJECTION DES D√âPENDANCES
    # =============================================================================
    
    logger.info("üîó Injection des d√©pendances...")
    
    # Injecter les instances dans le module routes
    import search_service.api.routes as routes
    routes.elastic_client = elastic_client
    routes.qdrant_client = qdrant_client
    routes.search_cache = search_cache
    routes.metrics_collector = search_monitor  # Le monitor fait office de collector
    
    logger.info("‚úÖ D√©pendances inject√©es")
    
    # =============================================================================
    # TESTS DE SANT√â INITIAUX
    # =============================================================================
    
    logger.info("ü©∫ Tests de sant√© initiaux...")
    
    # Test Elasticsearch
    if elastic_client:
        es_healthy = await elastic_client.is_healthy()
        logger.info(f"üîç Elasticsearch: {'‚úÖ Sain' if es_healthy else '‚ùå Probl√®me'}")
    else:
        logger.warning("üîç Elasticsearch: ‚ùå Non disponible")
    
    # Test Qdrant
    if qdrant_client:
        qdrant_healthy = await qdrant_client.is_healthy()
        logger.info(f"üéØ Qdrant: {'‚úÖ Sain' if qdrant_healthy else '‚ùå Probl√®me'}")
    else:
        logger.warning("üéØ Qdrant: ‚ùå Non disponible")
    
    # =============================================================================
    # R√âSUM√â DE D√âMARRAGE
    # =============================================================================
    
    startup_duration = time.time() - startup_time
    
    # D√©terminer l'√©tat global
    services_available = []
    if elastic_client and elastic_client._initialized:
        services_available.append("Elasticsearch")
    if qdrant_client and qdrant_client._initialized:
        services_available.append("Qdrant")
    
    if len(services_available) == 2:
        status_icon = "üéâ"
        status_msg = "COMPLET"
    elif len(services_available) == 1:
        status_icon = "‚ö†Ô∏è"
        status_msg = "PARTIEL"
    else:
        status_icon = "üö®"
        status_msg = "D√âGRAD√â"
    
    logger.info("=" * 70)
    logger.info(f"{status_icon} SERVICE DE RECHERCHE D√âMARR√â - √âTAT: {status_msg}")
    logger.info(f"‚è±Ô∏è Temps de d√©marrage: {startup_duration:.2f}s")
    logger.info(f"üîß Services disponibles: {', '.join(services_available) if services_available else 'Aucun'}")
    logger.info("üìä Monitoring actif: M√©triques et alertes disponibles")
    logger.info("ü©∫ Endpoints de diagnostic: /diagnostic/health")
    logger.info("=" * 70)
    
    # Marquer le temps de d√©marrage pour le monitor
    search_monitor._start_time = startup_time
    
    # =============================================================================
    # EX√âCUTION DE L'APPLICATION
    # =============================================================================
    
    yield  # L'application s'ex√©cute ici
    
    # =============================================================================
    # PHASE D'ARR√äT
    # =============================================================================
    
    logger.info("üõë === ARR√äT DU SERVICE DE RECHERCHE ===")
    shutdown_start = time.time()
    
    # Arr√™ter le monitoring
    logger.info("üìä Arr√™t du monitoring...")
    await search_monitor.stop_monitoring()
    
    # Fermer les connexions
    if elastic_client:
        logger.info("üîç Fermeture connexion Elasticsearch...")
        await elastic_client.close()
    
    if qdrant_client:
        logger.info("üéØ Fermeture connexion Qdrant...")
        await qdrant_client.close()
    
    # Arr√™ter les services
    if embedding_service:
        logger.info("ü§ñ Arr√™t service embeddings...")
        await embedding_service.close()
    
    if reranker_service:
        logger.info("üéØ Arr√™t service reranking...")
        await reranker_service.close()
    
    shutdown_duration = time.time() - shutdown_start
    total_uptime = time.time() - startup_time
    
    logger.info("=" * 50)
    logger.info("‚úÖ ARR√äT PROPRE TERMIN√â")
    logger.info(f"‚è±Ô∏è Temps d'arr√™t: {shutdown_duration:.2f}s")
    logger.info(f"‚è±Ô∏è Uptime total: {total_uptime:.2f}s")
    logger.info("=" * 50)


def create_app() -> FastAPI:
    """Cr√©e et configure l'application FastAPI avec monitoring complet."""
    
    logger.info("üèóÔ∏è Cr√©ation de l'application FastAPI...")
    
    app = FastAPI(
        title="Harena Search Service",
        description="Service de recherche hybride pour les transactions financi√®res",
        version="2.0.0",  # Version avec monitoring
        lifespan=lifespan
    )
    
    # =============================================================================
    # CONFIGURATION CORS
    # =============================================================================
    
    logger.info("üåê Configuration CORS...")
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.CORS_ORIGINS.split(","),
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # =============================================================================
    # CONFIGURATION DES MIDDLEWARES (avec monitoring)
    # =============================================================================
    
    logger.info("üîß Configuration des middlewares...")
    setup_middleware(app, monitor=search_monitor)
    
    # =============================================================================
    # CONFIGURATION DES ROUTES
    # =============================================================================
    
    logger.info("üõ£Ô∏è Configuration des routes...")
    
    # Routes principales
    app.include_router(router, prefix="/api/v1")
    
    # Routes de diagnostic
    setup_diagnostic_routes(app, monitor=search_monitor)
    
    # Endpoint de sant√© simple (compatible avec les load balancers)
    @app.get("/")
    async def root():
        """Endpoint racine simple."""
        return {
            "service": "harena-search-service",
            "version": "2.0.0",
            "status": "running",
            "timestamp": time.time()
        }
    
    # Endpoint de ping simple
    @app.get("/ping")
    async def ping():
        """Ping simple pour les health checks."""
        return {"status": "pong", "timestamp": time.time()}
    
    # Endpoint de sant√© d√©taill√© (utilise le monitor)
    @app.get("/health")
    async def health_check():
        """V√©rification d√©taill√©e de l'√©tat du service."""
        try:
            health_summary = search_monitor.get_health_summary()
            
            # Calculer l'uptime
            uptime = time.time() - startup_time if startup_time else 0
            
            return {
                "service": "harena-search-service",
                "version": "2.0.0",
                "status": health_summary["overall_status"],
                "timestamp": time.time(),
                "uptime_seconds": uptime,
                "components": {
                    "elasticsearch": {
                        "status": health_summary["elasticsearch"]["status"],
                        "response_time_ms": health_summary["elasticsearch"]["response_time_ms"]
                    },
                    "qdrant": {
                        "status": health_summary["qdrant"]["status"],
                        "response_time_ms": health_summary["qdrant"]["response_time_ms"]
                    }
                },
                "metrics": health_summary["search_metrics"],
                "alerts_count": len(health_summary["active_alerts"])
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur health check: {e}")
            return {
                "service": "harena-search-service",
                "version": "2.0.0",
                "status": "error",
                "error": str(e),
                "timestamp": time.time()
            }
    
    logger.info("‚úÖ Application FastAPI configur√©e")
    return app


# =============================================================================
# CR√âATION DE L'APPLICATION
# =============================================================================

app = create_app()

# =============================================================================
# POINT D'ENTR√âE PRINCIPAL
# =============================================================================

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ D√©marrage du serveur uvicorn...")
    
    # Configuration du serveur
    server_config = {
        "app": "main:app",
        "host": "0.0.0.0",
        "port": 8004,
        "reload": settings.DEBUG,
        "log_level": "info",
        "access_log": True,
    }
    
    # Log de la configuration
    logger.info(f"üåê Serveur: {server_config['host']}:{server_config['port']}")
    logger.info(f"üîÑ Reload: {server_config['reload']}")
    logger.info(f"üìä Log level: {server_config['log_level']}")
    
    try:
        uvicorn.run(**server_config)
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale du serveur: {e}")
        sys.exit(1)