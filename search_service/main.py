"""
Module principal du service de recherche avec logging am√©lior√©.

Ce module initialise et configure le service de recherche hybride de Harena,
combinant recherche lexicale, s√©mantique et reranking.
"""
import logging
import time
import sys
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from search_service.api.routes import router
from search_service.core.embeddings import embedding_service
from search_service.core.reranker import reranker_service
from search_service.storage.elastic_client import ElasticClient
from search_service.storage.qdrant_client import QdrantClient
from search_service.utils.cache import SearchCache
from search_service.utils.metrics import MetricsCollector
from config_service.config import settings

# Configuration du logging am√©lior√©
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(module)s:%(funcName)s:%(lineno)d - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("search_service")

# R√©duire le bruit des libs externes
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("elasticsearch").setLevel(logging.WARNING)
logging.getLogger("qdrant_client").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)

# Instances globales
elastic_client = None
qdrant_client = None
search_cache = None
metrics_collector = None
startup_time = None


def log_configuration_status():
    """Log d√©taill√© de l'√©tat des configurations."""
    logger.info("üîß === V√âRIFICATION DES CONFIGURATIONS ===")
    
    config_status = []
    
    # Elasticsearch
    if settings.SEARCHBOX_URL:
        logger.info("‚úÖ ELASTICSEARCH: SearchBox URL configur√©e")
        # Masquer les credentials
        safe_url = settings.SEARCHBOX_URL.split('@')[-1] if '@' in settings.SEARCHBOX_URL else settings.SEARCHBOX_URL
        logger.info(f"üì° SearchBox endpoint: {safe_url}")
        config_status.append(("elasticsearch", "searchbox", True))
    elif settings.BONSAI_URL:
        logger.info("‚úÖ ELASTICSEARCH: Bonsai URL configur√©e")
        safe_url = settings.BONSAI_URL.split('@')[-1] if '@' in settings.BONSAI_URL else settings.BONSAI_URL
        logger.info(f"üì° Bonsai endpoint: {safe_url}")
        config_status.append(("elasticsearch", "bonsai", True))
    else:
        logger.error("‚ùå ELASTICSEARCH: Aucune URL configur√©e (SEARCHBOX_URL/BONSAI_URL)")
        logger.error("   La recherche lexicale sera INDISPONIBLE")
        config_status.append(("elasticsearch", "none", False))
    
    # Qdrant
    if settings.QDRANT_URL:
        logger.info("‚úÖ QDRANT: URL configur√©e")
        logger.info(f"üì° Qdrant endpoint: {settings.QDRANT_URL}")
        if settings.QDRANT_API_KEY:
            logger.info("üîë Qdrant: API Key configur√©e")
        else:
            logger.info("üîì Qdrant: Connexion sans API Key")
        config_status.append(("qdrant", "configured", True))
    else:
        logger.error("‚ùå QDRANT: URL non configur√©e (QDRANT_URL)")
        logger.error("   La recherche s√©mantique sera INDISPONIBLE")
        config_status.append(("qdrant", "none", False))
    
    # Services externes
    if settings.COHERE_KEY:
        logger.info("‚úÖ COHERE: Cl√© API configur√©e (reranking disponible)")
        config_status.append(("cohere", "configured", True))
    else:
        logger.warning("‚ö†Ô∏è COHERE: Cl√© non configur√©e (reranking indisponible)")
        config_status.append(("cohere", "none", False))
    
    if settings.OPENAI_API_KEY:
        logger.info("‚úÖ OPENAI: Cl√© API configur√©e (embeddings disponibles)")
        config_status.append(("openai", "configured", True))
    else:
        logger.warning("‚ö†Ô∏è OPENAI: Cl√© non configur√©e (embeddings indisponibles)")
        config_status.append(("openai", "none", False))
    
    # R√©sum√©
    critical_services = [status for status in config_status 
                        if status[0] in ["elasticsearch", "qdrant"] and status[2]]
    
    if len(critical_services) == 2:
        logger.info("üéâ Configuration: Tous les services critiques configur√©s")
    elif len(critical_services) == 1:
        logger.warning("‚ö†Ô∏è Configuration: Service de recherche PARTIELLEMENT configur√©")
    else:
        logger.error("üö® Configuration: AUCUN service de recherche configur√©")
    
    return config_status


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie du service de recherche avec diagnostic complet."""
    global elastic_client, qdrant_client, search_cache, metrics_collector, startup_time
    
    # =============================================================================
    # PHASE D'INITIALISATION
    # =============================================================================
    
    logger.info("üöÄ === D√âMARRAGE DU SERVICE DE RECHERCHE HYBRIDE ===")
    startup_time = time.time()
    
    # Log de la configuration
    config_status = log_configuration_status()
    
    # =============================================================================
    # INITIALISATION DES SERVICES EXTERNES
    # =============================================================================
    
    logger.info("ü§ñ === INITIALISATION DES SERVICES EXTERNES ===")
    
    # Service d'embeddings
    embedding_success = False
    try:
        logger.info("ü§ñ Initialisation du service d'embeddings...")
        start_time = time.time()
        await embedding_service.initialize()
        init_time = time.time() - start_time
        logger.info(f"‚úÖ Service d'embeddings initialis√© en {init_time:.2f}s")
        embedding_success = True
    except Exception as e:
        logger.error(f"‚ùå √âchec initialisation embeddings: {type(e).__name__}: {str(e)}")
        logger.error("üìç V√©rifiez OPENAI_API_KEY et la connectivit√© internet")
        logger.debug("D√©tails de l'erreur", exc_info=True)
    
    # Service de reranking
    reranking_success = False
    try:
        logger.info("üéØ Initialisation du service de reranking...")
        start_time = time.time()
        await reranker_service.initialize()
        init_time = time.time() - start_time
        logger.info(f"‚úÖ Service de reranking initialis√© en {init_time:.2f}s")
        reranking_success = True
    except Exception as e:
        logger.error(f"‚ùå √âchec initialisation reranking: {type(e).__name__}: {str(e)}")
        logger.error("üìç V√©rifiez COHERE_KEY et la connectivit√© internet")
        logger.debug("D√©tails de l'erreur", exc_info=True)
    
    # =============================================================================
    # INITIALISATION DES CLIENTS DE STOCKAGE
    # =============================================================================
    
    logger.info("üíæ === INITIALISATION DES CLIENTS DE STOCKAGE ===")
    
    # Client Elasticsearch
    elastic_success = False
    try:
        logger.info("üîç Initialisation du client Elasticsearch...")
        start_time = time.time()
        
        elastic_client = ElasticClient()
        
        # Test de connexion d√©taill√©
        logger.info("üîó Test de connexion Elasticsearch...")
        await elastic_client.initialize()
        
        if elastic_client._initialized:
            init_time = time.time() - start_time
            logger.info(f"‚úÖ Client Elasticsearch op√©rationnel en {init_time:.2f}s")
            
            # Test de sant√©
            health_start = time.time()
            is_healthy = await elastic_client.is_healthy()
            health_time = time.time() - health_start
            
            if is_healthy:
                logger.info(f"ü©∫ Elasticsearch en bonne sant√© (ping: {health_time:.3f}s)")
                elastic_success = True
            else:
                logger.error("üö® Elasticsearch r√©pond mais n'est pas en bonne sant√©")
        else:
            logger.error("‚ùå Client Elasticsearch initialis√© mais non op√©rationnel")
            
    except Exception as e:
        init_time = time.time() - start_time
        logger.error(f"üí• Erreur critique Elasticsearch apr√®s {init_time:.2f}s:")
        logger.error(f"   Type: {type(e).__name__}")
        logger.error(f"   Message: {str(e)}")
        
        # Diagnostic sp√©cifique
        if "connection" in str(e).lower():
            logger.error("üîå DIAGNOSTIC: Probl√®me de connexion r√©seau")
            logger.error("   - V√©rifiez l'URL Elasticsearch")
            logger.error("   - Testez la connectivit√© r√©seau")
            logger.error("   - V√©rifiez les credentials")
        elif "auth" in str(e).lower() or "401" in str(e):
            logger.error("üîë DIAGNOSTIC: Probl√®me d'authentification")
            logger.error("   - V√©rifiez les credentials dans l'URL")
            logger.error("   - V√©rifiez les permissions du compte")
        elif "timeout" in str(e).lower():
            logger.error("‚è±Ô∏è DIAGNOSTIC: Timeout de connexion")
            logger.error("   - Le service Elasticsearch peut √™tre surcharg√©")
            logger.error("   - Augmentez le timeout de connexion")
        
        logger.debug("Trace compl√®te de l'erreur", exc_info=True)
        elastic_client = None
    
    # Client Qdrant
    qdrant_success = False
    try:
        logger.info("üéØ Initialisation du client Qdrant...")
        start_time = time.time()
        
        qdrant_client = QdrantClient()
        
        # Test de connexion d√©taill√©
        logger.info("üîó Test de connexion Qdrant...")
        await qdrant_client.initialize()
        
        if qdrant_client._initialized:
            init_time = time.time() - start_time
            logger.info(f"‚úÖ Client Qdrant op√©rationnel en {init_time:.2f}s")
            
            # Test de sant√©
            health_start = time.time()
            is_healthy = await qdrant_client.is_healthy()
            health_time = time.time() - health_start
            
            if is_healthy:
                logger.info(f"ü©∫ Qdrant en bonne sant√© (ping: {health_time:.3f}s)")
                qdrant_success = True
            else:
                logger.error("üö® Qdrant r√©pond mais n'est pas en bonne sant√©")
        else:
            logger.error("‚ùå Client Qdrant initialis√© mais non op√©rationnel")
            
    except Exception as e:
        init_time = time.time() - start_time
        logger.error(f"üí• Erreur critique Qdrant apr√®s {init_time:.2f}s:")
        logger.error(f"   Type: {type(e).__name__}")
        logger.error(f"   Message: {str(e)}")
        
        # Diagnostic sp√©cifique
        if "connection" in str(e).lower():
            logger.error("üîå DIAGNOSTIC: Probl√®me de connexion r√©seau")
            logger.error("   - V√©rifiez l'URL Qdrant")
            logger.error("   - Testez la connectivit√© r√©seau")
        elif "401" in str(e) or "auth" in str(e).lower():
            logger.error("üîë DIAGNOSTIC: Probl√®me d'authentification")
            logger.error("   - V√©rifiez QDRANT_API_KEY")
        elif "404" in str(e):
            logger.error("üìÇ DIAGNOSTIC: Collection non trouv√©e")
            logger.error("   - La collection 'financial_transactions' doit √™tre cr√©√©e")
            logger.error("   - Lancez d'abord l'enrichment_service")
        elif "timeout" in str(e).lower():
            logger.error("‚è±Ô∏è DIAGNOSTIC: Timeout de connexion")
            logger.error("   - Le service Qdrant peut √™tre indisponible")
        
        logger.debug("Trace compl√®te de l'erreur", exc_info=True)
        qdrant_client = None
    
    # =============================================================================
    # INITIALISATION DU CACHE ET M√âTRIQUES
    # =============================================================================
    
    logger.info("üóÉÔ∏è === INITIALISATION CACHE ET M√âTRIQUES ===")
    
    try:
        search_cache = SearchCache()
        logger.info("‚úÖ Cache de recherche initialis√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation cache: {e}")
        search_cache = None
    
    try:
        metrics_collector = MetricsCollector()
        logger.info("‚úÖ Collecteur de m√©triques initialis√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation m√©triques: {e}")
        metrics_collector = None
    
    # =============================================================================
    # INJECTION DES D√âPENDANCES
    # =============================================================================
    
    logger.info("üîó === INJECTION DES D√âPENDANCES ===")
    
    # Injecter les instances dans le module routes
    import search_service.api.routes as routes
    routes.elastic_client = elastic_client
    routes.qdrant_client = qdrant_client
    routes.search_cache = search_cache
    routes.metrics_collector = metrics_collector
    
    logger.info("‚úÖ D√©pendances inject√©es dans les routes")
    
    # =============================================================================
    # R√âSUM√â DE D√âMARRAGE
    # =============================================================================
    
    startup_duration = time.time() - startup_time
    
    # Compter les services op√©rationnels
    operational_services = []
    if elastic_success:
        operational_services.append("Elasticsearch")
    if qdrant_success:
        operational_services.append("Qdrant")
    if embedding_success:
        operational_services.append("Embeddings")
    if reranking_success:
        operational_services.append("Reranking")
    
    # D√©terminer l'√©tat global
    if elastic_success and qdrant_success:
        status_icon = "üéâ"
        status_msg = "OP√âRATIONNEL COMPLET"
        service_level = "FULL"
    elif elastic_success or qdrant_success:
        status_icon = "‚ö†Ô∏è"
        status_msg = "OP√âRATIONNEL PARTIEL"
        service_level = "PARTIAL"
    else:
        status_icon = "üö®"
        status_msg = "NON OP√âRATIONNEL"
        service_level = "FAILED"
    
    logger.info("=" * 80)
    logger.info(f"{status_icon} SERVICE DE RECHERCHE - √âTAT: {status_msg}")
    logger.info(f"‚è±Ô∏è Temps de d√©marrage: {startup_duration:.2f}s")
    logger.info(f"üéØ Services op√©rationnels ({len(operational_services)}/4): {', '.join(operational_services) if operational_services else 'Aucun'}")
    
    if service_level == "FULL":
        logger.info("‚ú® Toutes les fonctionnalit√©s de recherche sont disponibles")
    elif service_level == "PARTIAL":
        logger.info("‚ö†Ô∏è Fonctionnalit√©s limit√©es - v√©rifiez les erreurs ci-dessus")
    else:
        logger.info("üö® Service de recherche indisponible - v√©rifiez la configuration")
    
    logger.info("üìä Health check disponible sur: GET /health")
    logger.info("üîç API de recherche disponible sur: POST /api/v1/search")
    logger.info("=" * 80)
    
    # =============================================================================
    # EX√âCUTION DE L'APPLICATION
    # =============================================================================
    
    yield  # L'application s'ex√©cute ici
    
    # =============================================================================
    # PHASE D'ARR√äT
    # =============================================================================
    
    logger.info("üõë === ARR√äT DU SERVICE DE RECHERCHE ===")
    shutdown_start = time.time()
    
    # Fermer les connexions
    if elastic_client:
        logger.info("üîç Fermeture connexion Elasticsearch...")
        try:
            await elastic_client.close()
            logger.info("‚úÖ Elasticsearch ferm√© proprement")
        except Exception as e:
            logger.error(f"‚ùå Erreur fermeture Elasticsearch: {e}")
    
    if qdrant_client:
        logger.info("üéØ Fermeture connexion Qdrant...")
        try:
            await qdrant_client.close()
            logger.info("‚úÖ Qdrant ferm√© proprement")
        except Exception as e:
            logger.error(f"‚ùå Erreur fermeture Qdrant: {e}")
    
    # Arr√™ter les services
    if embedding_service:
        logger.info("ü§ñ Arr√™t service embeddings...")
        try:
            await embedding_service.close()
            logger.info("‚úÖ Service embeddings arr√™t√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t embeddings: {e}")
    
    if reranker_service:
        logger.info("üéØ Arr√™t service reranking...")
        try:
            await reranker_service.close()
            logger.info("‚úÖ Service reranking arr√™t√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t reranking: {e}")
    
    shutdown_duration = time.time() - shutdown_start
    total_uptime = time.time() - startup_time
    
    logger.info("=" * 60)
    logger.info("‚úÖ ARR√äT PROPRE TERMIN√â")
    logger.info(f"‚è±Ô∏è Temps d'arr√™t: {shutdown_duration:.2f}s")
    logger.info(f"‚è±Ô∏è Uptime total: {total_uptime:.2f}s")
    logger.info("=" * 60)


def create_app() -> FastAPI:
    """Cr√©e et configure l'application FastAPI."""
    
    logger.info("üèóÔ∏è Cr√©ation de l'application FastAPI...")
    
    app = FastAPI(
        title="Harena Search Service",
        description="Service de recherche hybride pour les transactions financi√®res",
        version="1.0.0",
        lifespan=lifespan
    )
    
    # Configuration CORS
    logger.info("üåê Configuration CORS...")
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.CORS_ORIGINS.split(","),
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Middleware de m√©triques am√©lior√©
    @app.middleware("http")
    async def enhanced_metrics_middleware(request, call_next):
        """Middleware de m√©triques avec logging am√©lior√©."""
        start_time = time.time()
        path = request.url.path
        method = request.method
        
        # Log des requ√™tes importantes
        if path.startswith("/api/v1/search"):
            logger.info(f"üîç {method} {path} - D√©but de traitement")
        
        try:
            response = await call_next(request)
            process_time = time.time() - start_time
            
            # Log des r√©sultats
            if path.startswith("/api/v1/search"):
                status_icon = "‚úÖ" if response.status_code < 400 else "‚ùå"
                logger.info(f"{status_icon} {method} {path} - {response.status_code} en {process_time:.3f}s")
            
            # Enregistrer les m√©triques
            if metrics_collector:
                metrics_collector.record_request(
                    path=path,
                    method=method,
                    status_code=response.status_code,
                    duration=process_time
                )
            
            response.headers["X-Process-Time"] = str(process_time)
            return response
            
        except Exception as e:
            process_time = time.time() - start_time
            logger.error(f"üí• {method} {path} - Erreur apr√®s {process_time:.3f}s: {type(e).__name__}: {str(e)}")
            raise
    
    # Enregistrement des routes
    logger.info("üõ£Ô∏è Configuration des routes...")
    app.include_router(router, prefix="/api/v1", tags=["search"])
    
    # Endpoint de sant√© racine
    @app.get("/")
    def root():
        """Endpoint racine pour v√©rification rapide."""
        return {
            "service": "search_service",
            "version": "1.0.0",
            "status": "running",
            "timestamp": time.time()
        }
    
    # Endpoint de sant√© d√©taill√©
    @app.get("/health")
    async def health_check():
        """V√©rification d√©taill√©e de l'√©tat du service."""
        logger.debug("ü©∫ Health check demand√©")
        
        try:
            # V√©rifier l'√©tat des composants
            elasticsearch_ok = elastic_client is not None and await elastic_client.is_healthy()
            qdrant_ok = qdrant_client is not None and await qdrant_client.is_healthy()
            
            # √âtat des services externes
            embedding_ok = embedding_service is not None and hasattr(embedding_service, 'client')
            reranking_ok = reranker_service is not None and hasattr(reranker_service, 'client')
            
            # Calculer l'√©tat global
            all_ok = elasticsearch_ok and qdrant_ok and embedding_ok and reranking_ok
            some_ok = elasticsearch_ok or qdrant_ok
            
            if all_ok:
                status = "healthy"
            elif some_ok:
                status = "degraded"
            else:
                status = "unhealthy"
            
            # Calculer l'uptime
            uptime = time.time() - startup_time if startup_time else 0
            
            health_data = {
                "service": "search_service",
                "version": "1.0.0",
                "status": status,
                "timestamp": time.time(),
                "uptime_seconds": uptime,
                "components": {
                    "elasticsearch": {
                        "available": elastic_client is not None,
                        "healthy": elasticsearch_ok,
                        "status": "ok" if elasticsearch_ok else "error"
                    },
                    "qdrant": {
                        "available": qdrant_client is not None,
                        "healthy": qdrant_ok,
                        "status": "ok" if qdrant_ok else "error"
                    },
                    "embeddings": {
                        "available": embedding_service is not None,
                        "initialized": embedding_ok,
                        "status": "ok" if embedding_ok else "error"
                    },
                    "reranking": {
                        "available": reranker_service is not None,
                        "initialized": reranking_ok,
                        "status": "ok" if reranking_ok else "error"
                    }
                }
            }
            
            logger.debug(f"ü©∫ Health check: {status}")
            return health_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans health check: {e}")
            return {
                "service": "search_service",
                "version": "1.0.0", 
                "status": "error",
                "error": str(e),
                "timestamp": time.time()
            }
    
    logger.info("‚úÖ Application FastAPI configur√©e")
    return app


# Cr√©ation de l'application
app = create_app()

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ D√©marrage du serveur uvicorn...")
    
    try:
        uvicorn.run(
            "main:app", 
            host="0.0.0.0", 
            port=8004, 
            reload=True,
            log_level="info"
        )
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale du serveur: {e}")
        sys.exit(1)