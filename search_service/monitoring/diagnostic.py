"""
Endpoints de diagnostic et monitoring pour le service de recherche.

Ce module fournit des endpoints d√©taill√©s pour diagnostiquer l'√©tat
des services Elasticsearch et Qdrant.
"""
import logging
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel

logger = logging.getLogger("search_service.diagnostic")

# Instance du router
diagnostic_router = APIRouter(prefix="/diagnostic", tags=["diagnostic"])

# R√©f√©rence vers le monitor (sera inject√©e)
search_monitor = None


class ServiceDiagnostic(BaseModel):
    """Mod√®le pour le diagnostic d'un service."""
    service_name: str
    status: str
    is_healthy: bool
    last_check: datetime
    response_time_ms: Optional[float] = None
    consecutive_failures: int = 0
    error_message: Optional[str] = None
    
    # M√©triques additionnelles
    connection_info: Dict[str, Any] = {}
    performance_metrics: Dict[str, Any] = {}


class SystemDiagnostic(BaseModel):
    """Mod√®le pour le diagnostic complet du syst√®me."""
    overall_status: str
    timestamp: datetime
    uptime_seconds: float
    
    # Services
    elasticsearch: ServiceDiagnostic
    qdrant: ServiceDiagnostic
    
    # M√©triques globales
    search_metrics: Dict[str, Any]
    active_alerts: List[Dict[str, Any]]
    
    # Statistiques
    uptime_stats: Dict[str, float]


@diagnostic_router.get("/health", response_model=SystemDiagnostic)
async def get_system_health():
    """
    Endpoint de diagnostic complet du syst√®me de recherche.
    
    Retourne l'√©tat d√©taill√© de tous les composants avec m√©triques.
    """
    if not search_monitor:
        raise HTTPException(status_code=503, detail="Monitor not available")
    
    logger.info("ü©∫ Diagnostic complet du syst√®me demand√©")
    
    try:
        # Forcer une v√©rification de sant√©
        await search_monitor._perform_health_checks()
        
        # R√©cup√©rer le r√©sum√© de sant√©
        health_summary = search_monitor.get_health_summary()
        
        # Cr√©er le diagnostic d√©taill√©
        system_diagnostic = SystemDiagnostic(
            overall_status=health_summary["overall_status"],
            timestamp=datetime.now(),
            uptime_seconds=time.time() - search_monitor._start_time if hasattr(search_monitor, '_start_time') else 0,
            
            elasticsearch=ServiceDiagnostic(
                service_name="elasticsearch",
                status=health_summary["elasticsearch"]["status"],
                is_healthy=health_summary["elasticsearch"]["status"] == "healthy",
                last_check=datetime.fromisoformat(health_summary["elasticsearch"]["last_check"]),
                response_time_ms=health_summary["elasticsearch"]["response_time_ms"],
                consecutive_failures=health_summary["elasticsearch"]["consecutive_failures"],
                error_message=health_summary["elasticsearch"]["error_message"],
                connection_info=await _get_elasticsearch_info(),
                performance_metrics=await _get_elasticsearch_metrics()
            ),
            
            qdrant=ServiceDiagnostic(
                service_name="qdrant",
                status=health_summary["qdrant"]["status"],
                is_healthy=health_summary["qdrant"]["status"] == "healthy",
                last_check=datetime.fromisoformat(health_summary["qdrant"]["last_check"]),
                response_time_ms=health_summary["qdrant"]["response_time_ms"],
                consecutive_failures=health_summary["qdrant"]["consecutive_failures"],
                error_message=health_summary["qdrant"]["error_message"],
                connection_info=await _get_qdrant_info(),
                performance_metrics=await _get_qdrant_metrics()
            ),
            
            search_metrics=health_summary["search_metrics"],
            active_alerts=health_summary["active_alerts"],
            uptime_stats=search_monitor.get_uptime_stats()
        )
        
        logger.info(f"‚úÖ Diagnostic g√©n√©r√©: {system_diagnostic.overall_status}")
        return system_diagnostic
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du diagnostic: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Diagnostic failed: {str(e)}")


@diagnostic_router.get("/elasticsearch")
async def get_elasticsearch_diagnostic():
    """Diagnostic d√©taill√© d'Elasticsearch."""
    logger.info("üîç Diagnostic Elasticsearch demand√©")
    
    if not search_monitor or not search_monitor.elasticsearch_client:
        raise HTTPException(status_code=503, detail="Elasticsearch client not available")
    
    try:
        client = search_monitor.elasticsearch_client
        
        # Test de connexion
        start_time = time.time()
        is_healthy = await client.is_healthy()
        response_time = (time.time() - start_time) * 1000
        
        # Informations d√©taill√©es
        diagnostic = {
            "service": "elasticsearch",
            "timestamp": datetime.now().isoformat(),
            "is_healthy": is_healthy,
            "response_time_ms": response_time,
            "connection_info": await _get_elasticsearch_info(),
            "cluster_health": await _get_elasticsearch_cluster_health(),
            "index_info": await _get_elasticsearch_index_info(),
            "performance_metrics": await _get_elasticsearch_metrics()
        }
        
        logger.info(f"‚úÖ Diagnostic Elasticsearch: {'healthy' if is_healthy else 'unhealthy'}")
        return diagnostic
        
    except Exception as e:
        logger.error(f"‚ùå Erreur diagnostic Elasticsearch: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@diagnostic_router.get("/qdrant")
async def get_qdrant_diagnostic():
    """Diagnostic d√©taill√© de Qdrant."""
    logger.info("üéØ Diagnostic Qdrant demand√©")
    
    if not search_monitor or not search_monitor.qdrant_client:
        raise HTTPException(status_code=503, detail="Qdrant client not available")
    
    try:
        client = search_monitor.qdrant_client
        
        # Test de connexion
        start_time = time.time()
        is_healthy = await client.is_healthy()
        response_time = (time.time() - start_time) * 1000
        
        # Informations d√©taill√©es
        diagnostic = {
            "service": "qdrant",
            "timestamp": datetime.now().isoformat(),
            "is_healthy": is_healthy,
            "response_time_ms": response_time,
            "connection_info": await _get_qdrant_info(),
            "collection_info": await _get_qdrant_collection_info(),
            "performance_metrics": await _get_qdrant_metrics()
        }
        
        logger.info(f"‚úÖ Diagnostic Qdrant: {'healthy' if is_healthy else 'unhealthy'}")
        return diagnostic
        
    except Exception as e:
        logger.error(f"‚ùå Erreur diagnostic Qdrant: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@diagnostic_router.post("/test-search")
async def test_search_functionality(
    test_query: str = Query("transaction test", description="Requ√™te de test"),
    test_user_id: int = Query(1, description="ID utilisateur pour le test")
):
    """
    Test complet de la fonctionnalit√© de recherche.
    
    Ex√©cute une recherche de test pour valider que tous les composants fonctionnent.
    """
    logger.info(f"üß™ Test de recherche: '{test_query}' pour user_id={test_user_id}")
    
    test_results = {
        "test_query": test_query,
        "test_user_id": test_user_id,
        "timestamp": datetime.now().isoformat(),
        "results": {}
    }
    
    # Test Elasticsearch
    if search_monitor and search_monitor.elasticsearch_client:
        try:
            logger.info("üîç Test recherche Elasticsearch...")
            start_time = time.time()
            
            # Construire une requ√™te simple
            es_query = {
                "bool": {
                    "must": [
                        {"match": {"searchable_text": test_query}},
                        {"term": {"user_id": test_user_id}}
                    ]
                }
            }
            
            es_results = await search_monitor.elasticsearch_client.search(
                user_id=test_user_id,
                query=es_query,
                limit=5
            )
            
            es_time = (time.time() - start_time) * 1000
            
            test_results["results"]["elasticsearch"] = {
                "success": True,
                "response_time_ms": es_time,
                "results_count": len(es_results),
                "error": None
            }
            
            logger.info(f"‚úÖ Elasticsearch test: {len(es_results)} r√©sultats en {es_time:.2f}ms")
            
        except Exception as e:
            logger.error(f"‚ùå Elasticsearch test failed: {e}")
            test_results["results"]["elasticsearch"] = {
                "success": False,
                "response_time_ms": None,
                "results_count": 0,
                "error": str(e)
            }
    else:
        test_results["results"]["elasticsearch"] = {
            "success": False,
            "error": "Client not available"
        }
    
    # Test Qdrant (n√©cessite un embedding)
    if search_monitor and search_monitor.qdrant_client:
        try:
            logger.info("üéØ Test recherche Qdrant...")
            start_time = time.time()
            
            # Cr√©er un vecteur de test (z√©ros pour simplicit√©)
            test_vector = [0.0] * 1536  # Dimension OpenAI
            
            qdrant_results = await search_monitor.qdrant_client.search(
                query_vector=test_vector,
                user_id=test_user_id,
                limit=5
            )
            
            qdrant_time = (time.time() - start_time) * 1000
            
            test_results["results"]["qdrant"] = {
                "success": True,
                "response_time_ms": qdrant_time,
                "results_count": len(qdrant_results),
                "error": None
            }
            
            logger.info(f"‚úÖ Qdrant test: {len(qdrant_results)} r√©sultats en {qdrant_time:.2f}ms")
            
        except Exception as e:
            logger.error(f"‚ùå Qdrant test failed: {e}")
            test_results["results"]["qdrant"] = {
                "success": False,
                "response_time_ms": None,
                "results_count": 0,
                "error": str(e)
            }
    else:
        test_results["results"]["qdrant"] = {
            "success": False,
            "error": "Client not available"
        }
    
    # R√©sum√© du test
    successful_tests = sum(1 for result in test_results["results"].values() 
                          if result.get("success", False))
    total_tests = len(test_results["results"])
    
    test_results["summary"] = {
        "successful_tests": successful_tests,
        "total_tests": total_tests,
        "all_passed": successful_tests == total_tests
    }
    
    status_icon = "‚úÖ" if test_results["summary"]["all_passed"] else "‚ùå"
    logger.info(f"{status_icon} Test search: {successful_tests}/{total_tests} composants fonctionnels")
    
    return test_results


# Fonctions utilitaires pour r√©cup√©rer les informations d√©taill√©es

async def _get_elasticsearch_info() -> Dict[str, Any]:
    """R√©cup√®re les informations de connexion Elasticsearch."""
    if not search_monitor or not search_monitor.elasticsearch_client:
        return {"error": "Client not available"}
    
    try:
        client = search_monitor.elasticsearch_client.client
        if not client:
            return {"error": "Client not initialized"}
        
        info = await client.info()
        return {
            "cluster_name": info.get("cluster_name"),
            "version": info.get("version", {}).get("number"),
            "lucene_version": info.get("version", {}).get("lucene_version"),
            "cluster_uuid": info.get("cluster_uuid")
        }
    except Exception as e:
        return {"error": str(e)}


async def _get_elasticsearch_cluster_health() -> Dict[str, Any]:
    """R√©cup√®re la sant√© du cluster Elasticsearch."""
    if not search_monitor or not search_monitor.elasticsearch_client:
        return {"error": "Client not available"}
    
    try:
        client = search_monitor.elasticsearch_client.client
        health = await client.cluster.health()
        return {
            "status": health.get("status"),
            "number_of_nodes": health.get("number_of_nodes"),
            "number_of_data_nodes": health.get("number_of_data_nodes"),
            "active_primary_shards": health.get("active_primary_shards"),
            "active_shards": health.get("active_shards"),
            "relocating_shards": health.get("relocating_shards"),
            "initializing_shards": health.get("initializing_shards"),
            "unassigned_shards": health.get("unassigned_shards")
        }
    except Exception as e:
        return {"error": str(e)}


async def _get_elasticsearch_index_info() -> Dict[str, Any]:
    """R√©cup√®re les informations sur l'index Elasticsearch."""
    if not search_monitor or not search_monitor.elasticsearch_client:
        return {"error": "Client not available"}
    
    try:
        client = search_monitor.elasticsearch_client.client
        index_name = search_monitor.elasticsearch_client.index_name
        
        # V√©rifier si l'index existe
        exists = await client.indices.exists(index=index_name)
        if not exists:
            return {"error": f"Index {index_name} does not exist"}
        
        # Statistiques de l'index
        stats = await client.indices.stats(index=index_name)
        index_stats = stats.get("indices", {}).get(index_name, {})
        
        return {
            "index_name": index_name,
            "exists": exists,
            "document_count": index_stats.get("total", {}).get("docs", {}).get("count", 0),
            "store_size_bytes": index_stats.get("total", {}).get("store", {}).get("size_in_bytes", 0),
            "primary_shards": index_stats.get("primaries", {}).get("docs", {}).get("count", 0)
        }
    except Exception as e:
        return {"error": str(e)}


async def _get_elasticsearch_metrics() -> Dict[str, Any]:
    """R√©cup√®re les m√©triques de performance Elasticsearch."""
    # Placeholder pour m√©triques de performance
    return {
        "avg_query_time_ms": 0,
        "cache_hit_ratio": 0,
        "indexing_rate": 0
    }


async def _get_qdrant_info() -> Dict[str, Any]:
    """R√©cup√®re les informations de connexion Qdrant."""
    if not search_monitor or not search_monitor.qdrant_client:
        return {"error": "Client not available"}
    
    try:
        client = search_monitor.qdrant_client.client
        if not client:
            return {"error": "Client not initialized"}
        
        collections = await client.get_collections()
        return {
            "total_collections": len(collections.collections),
            "collections": [col.name for col in collections.collections],
            "target_collection": search_monitor.qdrant_client.collection_name
        }
    except Exception as e:
        return {"error": str(e)}


async def _get_qdrant_collection_info() -> Dict[str, Any]:
    """R√©cup√®re les informations sur la collection Qdrant."""
    if not search_monitor or not search_monitor.qdrant_client:
        return {"error": "Client not available"}
    
    try:
        client = search_monitor.qdrant_client.client
        collection_name = search_monitor.qdrant_client.collection_name
        
        collection_info = await client.get_collection(collection_name)
        
        return {
            "collection_name": collection_name,
            "points_count": collection_info.points_count,
            "vectors_count": getattr(collection_info, 'vectors_count', 'unknown'),
            "indexed_vectors_count": getattr(collection_info, 'indexed_vectors_count', 'unknown'),
            "config": {
                "vector_size": collection_info.config.params.vectors.size,
                "distance": collection_info.config.params.vectors.distance.value
            } if collection_info.config else {}
        }
    except Exception as e:
        return {"error": str(e)}


async def _get_qdrant_metrics() -> Dict[str, Any]:
    """R√©cup√®re les m√©triques de performance Qdrant."""
    # Placeholder pour m√©triques de performance
    return {
        "avg_search_time_ms": 0,
        "index_efficiency": 0
    }


def setup_diagnostic_routes(app, monitor):
    """Configure les routes de diagnostic."""
    global search_monitor
    search_monitor = monitor
    
    app.include_router(diagnostic_router)
    logger.info("üîß Routes de diagnostic configur√©es")