# Architecture optimisée All-in-One
# Coût estimé: ~$11/mois
#
# CHANGEMENTS MAJEURS:
# - Suppression de RDS (PostgreSQL en Docker)
# - Suppression d'ElastiCache (Redis en Docker)
# - Suppression du NAT Gateway (instance en public subnet)
# - Tout tourne sur une seule instance EC2 t4g.small

terraform {
  required_version = ">= 1.5.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region

  default_tags {
    tags = {
      Project     = "Harena"
      Environment = var.environment
      ManagedBy   = "Terraform"
      CostCenter  = "Optimized"
      Architecture = "All-in-One"
    }
  }
}

# VPC Simple (pas de NAT Gateway)
module "vpc_simple" {
  source = "./modules/vpc-simple"

  environment = var.environment
  vpc_cidr    = var.vpc_cidr
}

# EC2 All-in-One avec Docker
module "ec2_allinone" {
  source = "./modules/ec2-allinone"

  environment         = var.environment
  instance_type       = var.ec2_instance_type
  use_spot_instances  = var.use_spot_instances
  spot_max_price      = var.spot_max_price
  ebs_volume_size     = var.ebs_volume_size
  vpc_id              = module.vpc_simple.vpc_id
  public_subnet_id    = module.vpc_simple.public_subnet_id

  # Variables d'environnement pour Docker Compose
  db_name              = var.db_name
  db_username          = var.db_username
  db_password          = var.db_password
  redis_auth_token     = var.redis_auth_token
  deepseek_api_key     = var.deepseek_api_key
  secret_key           = var.secret_key
}

# S3 + CloudFront pour le frontend (inchangé)
module "s3_cloudfront" {
  source = "./modules/s3-cloudfront"

  environment = var.environment
  domain_name = var.domain_name
}

# Monitoring simplifié
module "monitoring_simple" {
  source = "./modules/monitoring-simple"

  environment           = var.environment
  enable_auto_shutdown  = var.enable_auto_shutdown
  shutdown_night        = var.shutdown_night
  shutdown_weekend      = var.shutdown_weekend
  ec2_instance_id       = module.ec2_allinone.instance_id
  alert_email           = var.alert_email
}

# S3 Bucket pour les backups
resource "aws_s3_bucket" "backups" {
  bucket = "harena-backups-${var.environment}-${data.aws_caller_identity.current.account_id}"

  tags = {
    Name = "harena-backups-${var.environment}"
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "backups" {
  bucket = aws_s3_bucket.backups.id

  rule {
    id     = "delete-old-backups"
    status = "Enabled"

    filter {
      prefix = ""
    }

    expiration {
      days = 30
    }
  }
}

resource "aws_s3_bucket_public_access_block" "backups" {
  bucket = aws_s3_bucket.backups.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# IAM policy pour permettre à EC2 de pusher les backups vers S3
resource "aws_iam_role_policy" "ec2_backup_to_s3" {
  name = "harena-ec2-backup-s3-${var.environment}"
  role = module.ec2_allinone.iam_role_name

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket"
        ]
        Resource = [
          aws_s3_bucket.backups.arn,
          "${aws_s3_bucket.backups.arn}/*"
        ]
      }
    ]
  })
}

data "aws_caller_identity" "current" {}
