"""
Test complet pour le nouveau conversation_service TinyBERT
Teste sp√©cifiquement l'endpoint /detect-intent avec m√©triques d√©taill√©es

Focus sur:
- Latence TinyBERT (<50ms objectif)
- Pr√©cision intentions financi√®res (>70% objectif)
- Robustesse sur requ√™tes vari√©es
- Analyse performance d√©taill√©e
"""

import requests
import json
import time
import statistics
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, Counter
import asyncio
import concurrent.futures

# Configuration URLs
BASE_URL = "http://localhost:8000/api/v1/conversation"
DETECT_INTENT_URL = f"{BASE_URL}/detect-intent"
HEALTH_URL = f"{BASE_URL}/health"
ROOT_URL = f"{BASE_URL}/"

@dataclass
class IntentTestResult:
    """R√©sultat de test d√©tection intention TinyBERT"""
    query: str
    intent_detected: str
    confidence: float
    processing_time_ms: float
    total_latency_ms: float
    success: bool
    expected_intent: Optional[str] = None
    intent_correct: Optional[bool] = None
    model_used: str = "TinyBERT"
    timestamp: float = 0.0
    error_message: Optional[str] = None

class TinyBERTIntentTester:
    """Testeur sp√©cialis√© pour TinyBERT d√©tection intentions"""
    
    def __init__(self):
        self.results: List[IntentTestResult] = []
        self.intent_distribution = Counter()
        self.confidence_ranges = {"low": 0, "medium": 0, "high": 0}
        self.latency_stats = []
        self.accuracy_stats = {"correct": 0, "incorrect": 0, "unknown": 0}
        
    def test_single_intent(self, query: str, expected_intent: str = None, timeout: float = 10.0) -> IntentTestResult:
        """Test une requ√™te unique avec TinyBERT"""
        
        payload = {
            "query": query,
            "user_id": f"test_user_{int(time.time())}"
        }
        
        start_time = time.time()
        
        try:
            response = requests.post(
                DETECT_INTENT_URL,
                headers={'Content-Type': 'application/json'},
                json=payload,
                timeout=timeout
            )
            
            total_latency_ms = (time.time() - start_time) * 1000
            
            if response.status_code == 200:
                data = response.json()
                
                # Extraction donn√©es r√©ponse
                intent_detected = data.get("intent", "UNKNOWN")
                confidence = float(data.get("confidence", 0.0))
                processing_time_ms = float(data.get("processing_time_ms", 0.0))
                model_used = data.get("model", "TinyBERT")
                timestamp = data.get("timestamp", time.time())
                
                # Validation intention si attendue
                intent_correct = None
                if expected_intent:
                    intent_correct = (intent_detected == expected_intent)
                    if intent_correct:
                        self.accuracy_stats["correct"] += 1
                    elif intent_detected == "UNKNOWN":
                        self.accuracy_stats["unknown"] += 1
                    else:
                        self.accuracy_stats["incorrect"] += 1
                
                # Classification confiance
                if confidence >= 0.8:
                    self.confidence_ranges["high"] += 1
                elif confidence >= 0.5:
                    self.confidence_ranges["medium"] += 1
                else:
                    self.confidence_ranges["low"] += 1
                
                # Statistiques
                self.intent_distribution[intent_detected] += 1
                self.latency_stats.append(processing_time_ms)
                
                result = IntentTestResult(
                    query=query,
                    intent_detected=intent_detected,
                    confidence=confidence,
                    processing_time_ms=processing_time_ms,
                    total_latency_ms=total_latency_ms,
                    success=True,
                    expected_intent=expected_intent,
                    intent_correct=intent_correct,
                    model_used=model_used,
                    timestamp=timestamp
                )
                
                return result
                
            else:
                return IntentTestResult(
                    query=query,
                    intent_detected="ERROR",
                    confidence=0.0,
                    processing_time_ms=0.0,
                    total_latency_ms=total_latency_ms,
                    success=False,
                    expected_intent=expected_intent,
                    error_message=f"HTTP {response.status_code}: {response.text[:200]}"
                )
                
        except Exception as e:
            return IntentTestResult(
                query=query,
                intent_detected="ERROR",
                confidence=0.0,
                processing_time_ms=0.0,
                total_latency_ms=(time.time() - start_time) * 1000,
                success=False,
                expected_intent=expected_intent,
                error_message=f"Exception: {str(e)}"
            )
    
    def run_comprehensive_test_suite(self) -> Dict[str, Any]:
        """Suite de tests compl√®te pour TinyBERT"""
        
        print("ü§ñ TESTS COMPLETS TINYBERT D√âTECTION INTENTIONS")
        print("="*80)
        print(f"üéØ Endpoint: {DETECT_INTENT_URL}")
        print(f"üìä Objectifs: <50ms latence, >70% pr√©cision")
        print("="*80)
        
        # Test sant√© service d'abord
        self._test_service_health()
        
        # ==========================================
        # 1. TESTS INTENTIONS FINANCI√àRES DE BASE
        # ==========================================
        print("\nüí∞ TESTS INTENTIONS FINANCI√àRES DE BASE")
        print("-" * 60)
        
        basic_financial_tests = [
            ("solde", "BALANCE_CHECK"),
            ("mon solde", "BALANCE_CHECK"),
            ("quel est mon solde", "BALANCE_CHECK"),
            ("combien j'ai sur mon compte", "BALANCE_CHECK"),
            ("argent disponible", "BALANCE_CHECK"),
            
            ("virement", "TRANSFER"),
            ("faire un virement", "TRANSFER"),
            ("transf√©rer de l'argent", "TRANSFER"),
            ("envoyer 100 euros", "TRANSFER"),
            ("virer 50‚Ç¨ √† Paul", "TRANSFER"),
            
            ("d√©penses", "EXPENSE_ANALYSIS"),
            ("mes d√©penses", "EXPENSE_ANALYSIS"),
            ("d√©penses restaurant", "EXPENSE_ANALYSIS"),
            ("combien j'ai d√©pens√©", "EXPENSE_ANALYSIS"),
            ("analyse de mes d√©penses", "EXPENSE_ANALYSIS"),
            
            ("carte", "CARD_MANAGEMENT"),
            ("ma carte", "CARD_MANAGEMENT"),
            ("bloquer ma carte", "CARD_MANAGEMENT"),
            ("activer carte", "CARD_MANAGEMENT"),
            ("opposition carte", "CARD_MANAGEMENT"),
        ]
        
        for query, expected_intent in basic_financial_tests:
            result = self.test_single_intent(query, expected_intent)
            self.results.append(result)
            self._print_test_result(result)
        
        # ==========================================
        # 2. TESTS INTENTIONS CONVERSATIONNELLES
        # ==========================================
        print("\nüí¨ TESTS INTENTIONS CONVERSATIONNELLES")
        print("-" * 60)
        
        conversational_tests = [
            ("bonjour", "GREETING"),
            ("salut", "GREETING"),
            ("bonsoir", "GREETING"),
            ("hello", "GREETING"),
            
            ("aide", "HELP"),
            ("help", "HELP"),
            ("comment √ßa marche", "HELP"),
            ("j'ai besoin d'aide", "HELP"),
            
            ("au revoir", "GOODBYE"),
            ("bye", "GOODBYE"),
            ("√† bient√¥t", "GOODBYE"),
            ("merci et au revoir", "GOODBYE"),
        ]
        
        for query, expected_intent in conversational_tests:
            result = self.test_single_intent(query, expected_intent)
            self.results.append(result)
            self._print_test_result(result)
        
        # ==========================================
        # 3. TESTS REQU√äTES COMPLEXES ET VARIATIONS
        # ==========================================
        print("\nüîÑ TESTS REQU√äTES COMPLEXES ET VARIATIONS")
        print("-" * 60)
        
        complex_tests = [
            ("Peux-tu me dire mon solde s'il te pla√Æt ?", "BALANCE_CHECK"),
            ("J'aimerais conna√Ætre le montant sur mon compte courant", "BALANCE_CHECK"),
            ("Est-ce que tu peux m'aider √† faire un virement urgent ?", "TRANSFER"),
            ("Comment puis-je bloquer ma carte bancaire imm√©diatement ?", "CARD_MANAGEMENT"),
            ("Montre-moi un r√©sum√© de toutes mes d√©penses du mois", "EXPENSE_ANALYSIS"),
            ("Bonjour, comment allez-vous aujourd'hui ?", "GREETING"),
            ("Pourriez-vous m'expliquer comment utiliser cette application ?", "HELP"),
        ]
        
        for query, expected_intent in complex_tests:
            result = self.test_single_intent(query, expected_intent)
            self.results.append(result)
            self._print_test_result(result)
        
        # ==========================================
        # 4. TESTS EDGE CASES ET ROBUSTESSE
        # ==========================================
        print("\nüîç TESTS EDGE CASES ET ROBUSTESSE")
        print("-" * 60)
        
        edge_cases = [
            ("", "UNKNOWN"),
            ("   ", "UNKNOWN"),
            ("a", "UNKNOWN"),
            ("123", "UNKNOWN"),
            ("üè¶üí∞üìä", "UNKNOWN"),
            ("qwertyuiop", "UNKNOWN"),
            ("Blablabla test xyz", "UNKNOWN"),
            ("What is the weather today?", "UNKNOWN"),
            ("Comment cuisiner des p√¢tes ?", "UNKNOWN"),
            ("SOLDE SOLDE SOLDE", "BALANCE_CHECK"),
            ("Solde? Solde! SOLDE.", "BALANCE_CHECK"),
        ]
        
        for query, expected_intent in edge_cases:
            result = self.test_single_intent(query, expected_intent)
            self.results.append(result)
            self._print_test_result(result)
        
        # ==========================================
        # 5. TESTS DE PERFORMANCE ET CHARGE
        # ==========================================
        print(f"\n‚ö° TESTS DE PERFORMANCE")
        print("-" * 60)
        
        self._run_performance_tests()
        
        # ==========================================
        # 6. G√âN√âRATION RAPPORT FINAL
        # ==========================================
        return self._generate_comprehensive_report()
    
    def _test_service_health(self):
        """Test sant√© du service TinyBERT"""
        print("\nüè• SANT√â DU SERVICE")
        print("-" * 30)
        
        try:
            response = requests.get(HEALTH_URL, timeout=5)
            if response.status_code == 200:
                health_data = response.json()
                status = health_data.get("status", "unknown")
                model_loaded = health_data.get("model_loaded", False)
                total_requests = health_data.get("total_requests", 0)
                avg_latency = health_data.get("average_latency_ms", 0.0)
                
                print(f"‚úÖ Status: {status}")
                print(f"ü§ñ Mod√®le charg√©: {'Oui' if model_loaded else 'Non'}")
                print(f"üìä Requ√™tes totales: {total_requests}")
                print(f"‚ö° Latence moyenne: {avg_latency:.2f}ms")
                
                if status != "healthy" or not model_loaded:
                    print("‚ö†Ô∏è  Service en mode d√©grad√© - r√©sultats peuvent √™tre affect√©s")
                    
            else:
                print(f"‚ùå Health check √©chou√©: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur health check: {e}")
            print("‚ö†Ô∏è  Impossible de v√©rifier l'√©tat du service")
    
    def _run_performance_tests(self):
        """Tests de performance sp√©cialis√©s"""
        
        # Test latence sur requ√™te standard
        standard_query = "quel est mon solde"
        latencies = []
        
        print(f"üî• Test latence sur '{standard_query}' (20 requ√™tes):")
        
        for i in range(20):
            result = self.test_single_intent(standard_query, "BALANCE_CHECK")
            if result.success:
                latencies.append(result.processing_time_ms)
        
        if latencies:
            avg_latency = statistics.mean(latencies)
            median_latency = statistics.median(latencies)
            min_latency = min(latencies)
            max_latency = max(latencies)
            
            print(f"   Moyenne: {avg_latency:.2f}ms")
            print(f"   M√©diane: {median_latency:.2f}ms")  
            print(f"   Min: {min_latency:.2f}ms")
            print(f"   Max: {max_latency:.2f}ms")
            
            # √âvaluation performance
            if avg_latency < 30:
                print("   ‚úÖ Performance EXCELLENTE (<30ms)")
            elif avg_latency < 50:
                print("   ‚úÖ Performance BONNE (<50ms)")
            elif avg_latency < 100:
                print("   ‚ö†Ô∏è  Performance ACCEPTABLE (<100ms)")
            else:
                print("   ‚ùå Performance FAIBLE (>100ms)")
        
        # Test concurrence
        print(f"\nüîÑ Test concurrence (10 requ√™tes simultan√©es):")
        concurrent_results = self._test_concurrent_requests(standard_query, 10)
        
        if concurrent_results:
            successful = [r for r in concurrent_results if r.success]
            success_rate = len(successful) / len(concurrent_results) * 100
            
            if successful:
                concurrent_latencies = [r.processing_time_ms for r in successful]
                avg_concurrent_latency = statistics.mean(concurrent_latencies)
                
                print(f"   Taux succ√®s: {success_rate:.1f}%")
                print(f"   Latence moyenne: {avg_concurrent_latency:.2f}ms")
                
                if success_rate >= 95:
                    print("   ‚úÖ Robustesse concurrence EXCELLENTE")
                elif success_rate >= 80:
                    print("   ‚úÖ Robustesse concurrence BONNE")
                else:
                    print("   ‚ö†Ô∏è  Probl√®mes de concurrence d√©tect√©s")
    
    def _test_concurrent_requests(self, query: str, num_concurrent: int) -> List[IntentTestResult]:
        """Test requ√™tes simultan√©es"""
        
        def make_request():
            return self.test_single_intent(query, "BALANCE_CHECK")
        
        results = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=num_concurrent) as executor:
            futures = [executor.submit(make_request) for _ in range(num_concurrent)]
            
            for future in concurrent.futures.as_completed(futures):
                try:
                    result = future.result(timeout=10)
                    results.append(result)
                except Exception as e:
                    # Cr√©er un r√©sultat d'erreur
                    error_result = IntentTestResult(
                        query=query,
                        intent_detected="ERROR",
                        confidence=0.0,
                        processing_time_ms=0.0,
                        total_latency_ms=0.0,
                        success=False,
                        error_message=f"Concurrent test error: {str(e)}"
                    )
                    results.append(error_result)
        
        return results
    
    def _print_test_result(self, result: IntentTestResult):
        """Affichage format√© du r√©sultat"""
        
        # Emojis selon intention
        intent_emojis = {
            "BALANCE_CHECK": "üí∞",
            "TRANSFER": "üí∏", 
            "EXPENSE_ANALYSIS": "üìä",
            "CARD_MANAGEMENT": "üí≥",
            "GREETING": "üëã",
            "HELP": "‚ùì",
            "GOODBYE": "üëã",
            "UNKNOWN": "‚ùî",
            "ERROR": "‚ùå"
        }
        
        emoji = intent_emojis.get(result.intent_detected, "‚ùì")
        
        # Status intention
        if result.intent_correct is True:
            intent_status = "‚úÖ"
        elif result.intent_correct is False:
            intent_status = "‚ùå"
        else:
            intent_status = "‚ûñ"
        
        # Status performance
        if result.success and result.processing_time_ms < 50:
            perf_status = "‚ö°"
        elif result.success and result.processing_time_ms < 100:
            perf_status = "üîÑ"
        else:
            perf_status = "‚è±Ô∏è"
        
        # Affichage principal
        query_display = result.query[:40].ljust(40)
        intent_display = result.intent_detected.ljust(15)
        
        print(f"{emoji} {query_display} ‚Üí {intent_display} "
              f"({result.confidence:.3f}) {result.processing_time_ms:6.1f}ms "
              f"{intent_status}{perf_status}")
        
        # D√©tails erreur si n√©cessaire
        if not result.success and result.error_message:
            print(f"    ‚ùå Erreur: {result.error_message[:60]}")
    
    def _generate_comprehensive_report(self) -> Dict[str, Any]:
        """G√©n√©ration du rapport complet"""
        
        total_tests = len(self.results)
        successful_tests = [r for r in self.results if r.success]
        failed_tests = [r for r in self.results if not r.success]
        
        print("\n" + "="*80)
        print("üìä RAPPORT COMPLET TINYBERT D√âTECTION INTENTIONS")
        print("="*80)
        
        # ==========================================
        # M√âTRIQUES GLOBALES
        # ==========================================
        print(f"\nüìà M√âTRIQUES GLOBALES:")
        print(f"   Tests total: {total_tests}")
        print(f"   Tests r√©ussis: {len(successful_tests)}")
        print(f"   Tests √©chou√©s: {len(failed_tests)}")
        print(f"   Taux de succ√®s: {len(successful_tests)/total_tests*100:.1f}%")
        
        # ==========================================
        # PERFORMANCE LATENCE
        # ==========================================
        if self.latency_stats:
            avg_latency = statistics.mean(self.latency_stats)
            median_latency = statistics.median(self.latency_stats)
            min_latency = min(self.latency_stats)
            max_latency = max(self.latency_stats)
            
            print(f"\n‚ö° PERFORMANCE LATENCE:")
            print(f"   Latence moyenne: {avg_latency:.2f}ms")
            print(f"   Latence m√©diane: {median_latency:.2f}ms")
            print(f"   Latence min: {min_latency:.2f}ms")
            print(f"   Latence max: {max_latency:.2f}ms")
            
            # √âvaluation objectif <50ms
            fast_requests = sum(1 for lat in self.latency_stats if lat < 50)
            fast_percentage = fast_requests / len(self.latency_stats) * 100
            print(f"   Requ√™tes <50ms: {fast_requests}/{len(self.latency_stats)} ({fast_percentage:.1f}%)")
            
            if avg_latency < 50:
                print("   ‚úÖ OBJECTIF LATENCE ATTEINT (<50ms)")
            else:
                print("   ‚ùå OBJECTIF LATENCE NON ATTEINT (>50ms)")
        
        # ==========================================
        # PR√âCISION INTENTIONS
        # ==========================================
        total_with_expected = sum(1 for r in self.results if r.expected_intent)
        
        if total_with_expected > 0:
            accuracy_rate = self.accuracy_stats["correct"] / total_with_expected * 100
            
            print(f"\nüéØ PR√âCISION INTENTIONS:")
            print(f"   Intentions correctes: {self.accuracy_stats['correct']}")
            print(f"   Intentions incorrectes: {self.accuracy_stats['incorrect']}")
            print(f"   Intentions inconnues: {self.accuracy_stats['unknown']}")
            print(f"   Taux de pr√©cision: {accuracy_rate:.1f}%")
            
            if accuracy_rate >= 70:
                print("   ‚úÖ OBJECTIF PR√âCISION ATTEINT (‚â•70%)")
            else:
                print("   ‚ùå OBJECTIF PR√âCISION NON ATTEINT (<70%)")
        
        # ==========================================
        # DISTRIBUTION INTENTIONS
        # ==========================================
        print(f"\nüìä DISTRIBUTION INTENTIONS:")
        total_successful = len(successful_tests)
        for intent, count in self.intent_distribution.most_common():
            percentage = count / total_successful * 100 if total_successful > 0 else 0
            print(f"   {intent}: {count} ({percentage:.1f}%)")
        
        # ==========================================
        # DISTRIBUTION CONFIANCE
        # ==========================================
        total_confidence = sum(self.confidence_ranges.values())
        if total_confidence > 0:
            print(f"\nüé≤ DISTRIBUTION CONFIANCE:")
            high_pct = self.confidence_ranges["high"] / total_confidence * 100
            medium_pct = self.confidence_ranges["medium"] / total_confidence * 100
            low_pct = self.confidence_ranges["low"] / total_confidence * 100
            
            print(f"   Confiance haute (‚â•0.8): {self.confidence_ranges['high']} ({high_pct:.1f}%)")
            print(f"   Confiance moyenne (0.5-0.8): {self.confidence_ranges['medium']} ({medium_pct:.1f}%)")
            print(f"   Confiance faible (<0.5): {self.confidence_ranges['low']} ({low_pct:.1f}%)")
        
        # ==========================================
        # ANALYSE DES √âCHECS
        # ==========================================
        if failed_tests:
            print(f"\n‚ùå ANALYSE DES √âCHECS:")
            error_types = Counter(r.error_message.split(':')[0] if r.error_message else "Unknown" 
                                for r in failed_tests)
            
            for error_type, count in error_types.items():
                print(f"   {error_type}: {count}")
        
        # ==========================================
        # RECOMMANDATIONS
        # ==========================================
        recommendations = self._generate_recommendations()
        print(f"\nüí° RECOMMANDATIONS:")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")
        
        # ==========================================
        # VERDICT FINAL
        # ==========================================
        print(f"\n" + "="*80)
        print("üèÜ VERDICT FINAL")
        print("="*80)
        
        success_rate = len(successful_tests) / total_tests * 100
        meets_latency = statistics.mean(self.latency_stats) < 50 if self.latency_stats else False
        meets_accuracy = (self.accuracy_stats["correct"] / max(total_with_expected, 1) * 100) >= 70
        
        if success_rate >= 95 and meets_latency and meets_accuracy:
            print("üü¢ EXCELLENT - TinyBERT pr√™t pour production")
        elif success_rate >= 80 and (meets_latency or meets_accuracy):
            print("üü° BON - TinyBERT n√©cessite optimisations mineures")
        else:
            print("üî¥ INSUFFISANT - TinyBERT n√©cessite am√©liorations importantes")
        
        return {
            "summary": {
                "total_tests": total_tests,
                "successful_tests": len(successful_tests),
                "failed_tests": len(failed_tests),
                "success_rate": success_rate,
                "avg_latency_ms": statistics.mean(self.latency_stats) if self.latency_stats else 0,
                "accuracy_rate": self.accuracy_stats["correct"] / max(total_with_expected, 1) * 100,
                "meets_latency_target": meets_latency,
                "meets_accuracy_target": meets_accuracy
            },
            "performance": {
                "latency_stats": {
                    "mean": statistics.mean(self.latency_stats) if self.latency_stats else 0,
                    "median": statistics.median(self.latency_stats) if self.latency_stats else 0,
                    "min": min(self.latency_stats) if self.latency_stats else 0,
                    "max": max(self.latency_stats) if self.latency_stats else 0,
                },
                "fast_requests_percentage": sum(1 for lat in self.latency_stats if lat < 50) / len(self.latency_stats) * 100 if self.latency_stats else 0
            },
            "accuracy": dict(self.accuracy_stats),
            "intent_distribution": dict(self.intent_distribution),
            "confidence_distribution": dict(self.confidence_ranges),
            "recommendations": recommendations,
            "detailed_results": [
                {
                    "query": r.query,
                    "intent_detected": r.intent_detected,
                    "expected_intent": r.expected_intent,
                    "confidence": r.confidence,
                    "processing_time_ms": r.processing_time_ms,
                    "success": r.success,
                    "intent_correct": r.intent_correct
                }
                for r in self.results
            ]
        }
    
    def _generate_recommendations(self) -> List[str]:
        """G√©n√©ration recommandations bas√©es sur l'analyse"""
        recommendations = []
        
        # Recommandations latence
        if self.latency_stats:
            avg_latency = statistics.mean(self.latency_stats)
            if avg_latency > 100:
                recommendations.append("Optimiser TinyBERT - latence trop √©lev√©e (>100ms)")
            elif avg_latency > 50:
                recommendations.append("Am√©liorer performance TinyBERT - objectif <50ms non atteint")
        
        # Recommandations pr√©cision
        total_with_expected = sum(1 for r in self.results if r.expected_intent)
        if total_with_expected > 0:
            accuracy_rate = self.accuracy_stats["correct"] / total_with_expected * 100
            if accuracy_rate < 50:
                recommendations.append("Fine-tuner TinyBERT sur donn√©es fran√ßaises - pr√©cision critique")
            elif accuracy_rate < 70:
                recommendations.append("Am√©liorer dataset d'entra√Ænement TinyBERT - objectif 70% non atteint")
        
        # Recommandations UNKNOWN
        unknown_rate = self.intent_distribution.get("UNKNOWN", 0) / len(self.results) * 100
        if unknown_rate > 30:
            recommendations.append("R√©duire taux UNKNOWN - ajouter plus d'exemples d'entra√Ænement")
        
        # Recommandations confiance
        low_confidence = self.confidence_ranges.get("low", 0)
        total_confidence = sum(self.confidence_ranges.values())
        if total_confidence > 0 and low_confidence / total_confidence > 0.5:
            recommendations.append("Am√©liorer confiance mod√®le - trop de pr√©dictions incertaines")
        
        # Recommandations √©checs
        failed_tests = [r for r in self.results if not r.success]
        if len(failed_tests) > len(self.results) * 0.1:
            recommendations.append("R√©soudre probl√®mes techniques - taux d'√©chec √©lev√©")
        
        if not recommendations:
            recommendations.append("TinyBERT fonctionne correctement - pr√™t pour mise en production")
        
        return recommendations

def test_service_availability():
    """Test disponibilit√© du service"""
    print("üîç V√âRIFICATION DISPONIBILIT√â SERVICE")
    print("-" * 50)
    
    try:
        # Test endpoint root
        response = requests.get(ROOT_URL, timeout=5)
        if response.status_code == 200:
            print("‚úÖ Service disponible")
            data = response.json()
            print(f"   Service: {data.get('service', 'Unknown')}")
            print(f"   Version: {data.get('version', 'Unknown')}")
            print(f"   Mod√®le: {data.get('model', 'Unknown')}")
        else:
            print(f"‚ùå Service indisponible: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur connexion service: {e}")
        return False
    
    return True

def main():
    """Fonction principale des tests TinyBERT"""
    print("ü§ñ TESTS COMPLETS TINYBERT D√âTECTION INTENTIONS")
    print("="*80)
    print(f"‚è∞ Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ Endpoint: {DETECT_INTENT_URL}")
    print(f"üìä Objectifs: <50ms latence, >70% pr√©cision intentions")
    
    # V√©rifier disponibilit√© service
    if not test_service_availability():
        print("\n‚ùå Service indisponible - arr√™t des tests")
        return None
    
    # Lancer suite de tests
    tester = TinyBERTIntentTester()
    report = tester.run_comprehensive_test_suite()
    
    # Sauvegarder rapport
    timestamp = int(time.time())
    report_filename = f"tinybert_test_report_{timestamp}.json"
    
    try:
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        print(f"\nüíæ Rapport sauvegard√©: {report_filename}")
    except Exception as e:
        print(f"\n‚ùå Erreur sauvegarde rapport: {e}")
    
    # Conclusion finale
    print("\n" + "="*80)
    print("üéØ CONCLUSION ET ACTIONS RECOMMAND√âES")
    print("="*80)
    
    summary = report["summary"]
    success_rate = summary["success_rate"]
    avg_latency = summary["avg_latency_ms"]
    accuracy_rate = summary["accuracy_rate"]
    meets_latency = summary["meets_latency_target"]
    meets_accuracy = summary["meets_accuracy_target"]
    
    # Status global
    if success_rate >= 95 and meets_latency and meets_accuracy:
        print("üü¢ STATUS: EXCELLENT")
        print("   TinyBERT est pr√™t pour la production")
        print("   ‚úÖ Latence cible atteinte")
        print("   ‚úÖ Pr√©cision cible atteinte")
        print("   ‚úÖ Taux de succ√®s √©lev√©")
        action = "D√âPLOYER EN PRODUCTION"
        
    elif success_rate >= 80 and (meets_latency or meets_accuracy):
        print("üü° STATUS: BON")
        print("   TinyBERT n√©cessite optimisations mineures")
        if not meets_latency:
            print("   ‚ö†Ô∏è  Objectif latence non atteint")
        if not meets_accuracy:
            print("   ‚ö†Ô∏è  Objectif pr√©cision non atteint")
        action = "OPTIMISER PUIS D√âPLOYER"
        
    else:
        print("üî¥ STATUS: INSUFFISANT")
        print("   TinyBERT n√©cessite am√©liorations importantes")
        print(f"   ‚ùå Taux succ√®s: {success_rate:.1f}% (objectif: >95%)")
        if not meets_latency:
            print(f"   ‚ùå Latence moyenne: {avg_latency:.1f}ms (objectif: <50ms)")
        if not meets_accuracy:
            print(f"   ‚ùå Pr√©cision: {accuracy_rate:.1f}% (objectif: >70%)")
        action = "AM√âLIORER AVANT D√âPLOIEMENT"
    
    print(f"\nüöÄ ACTION RECOMMAND√âE: {action}")
    
    # M√©triques cl√©s finales
    print(f"\nüìä M√âTRIQUES CL√âS:")
    print(f"   Taux de succ√®s: {success_rate:.1f}%")
    print(f"   Latence moyenne: {avg_latency:.1f}ms")
    print(f"   Pr√©cision intentions: {accuracy_rate:.1f}%")
    print(f"   Tests r√©ussis: {summary['successful_tests']}/{summary['total_tests']}")
    
    # Prochaines √©tapes
    print(f"\nüìã PROCHAINES √âTAPES:")
    if meets_latency and meets_accuracy:
        print("   1. Valider avec donn√©es r√©elles utilisateurs")
        print("   2. Tester charge en production")
        print("   3. Monitorer m√©triques en continu")
        print("   4. Optimiser patterns si n√©cessaire")
    else:
        print("   1. Analyser cas d'√©chec d√©taill√©s")
        print("   2. Fine-tuner mod√®le sur donn√©es fran√ßaises")
        print("   3. Optimiser architecture si latence √©lev√©e")
        print("   4. Re-tester jusqu'√† atteinte objectifs")
    
    return report

def run_quick_test():
    """Test rapide pour v√©rification de base"""
    print("‚ö° TEST RAPIDE TINYBERT")
    print("-" * 30)
    
    tester = TinyBERTIntentTester()
    
    # Quelques tests de base
    quick_tests = [
        ("bonjour", "GREETING"),
        ("quel est mon solde", "BALANCE_CHECK"),
        ("faire un virement", "TRANSFER"),
        ("mes d√©penses", "EXPENSE_ANALYSIS"),
        ("bloquer ma carte", "CARD_MANAGEMENT"),
        ("aide", "HELP"),
        ("au revoir", "GOODBYE"),
        ("test xyz", "UNKNOWN")
    ]
    
    print("Tests en cours...")
    for query, expected in quick_tests:
        result = tester.test_single_intent(query, expected)
        tester.results.append(result)
        
        status = "‚úÖ" if result.success and result.intent_correct else "‚ùå"
        print(f"{status} '{query}' ‚Üí {result.intent_detected} ({result.confidence:.2f}) {result.processing_time_ms:.1f}ms")
    
    # M√©triques rapides
    successful = [r for r in tester.results if r.success]
    correct_intents = [r for r in tester.results if r.intent_correct]
    
    if successful:
        avg_latency = sum(r.processing_time_ms for r in successful) / len(successful)
        accuracy = len(correct_intents) / len(tester.results) * 100
        
        print(f"\nüìä R√©sultats rapides:")
        print(f"   Succ√®s: {len(successful)}/{len(tester.results)} ({len(successful)/len(tester.results)*100:.1f}%)")
        print(f"   Pr√©cision: {accuracy:.1f}%")
        print(f"   Latence moyenne: {avg_latency:.1f}ms")
        
        if avg_latency < 50 and accuracy > 70:
            print("‚úÖ Test rapide R√âUSSI - TinyBERT fonctionne correctement")
        else:
            print("‚ö†Ô∏è  Test rapide PARTIEL - optimisations recommand√©es")
    else:
        print("‚ùå Test rapide √âCHOU√â - probl√®me technique")

def run_load_test():
    """Test de charge sp√©cialis√©"""
    print("üî• TEST DE CHARGE TINYBERT")
    print("-" * 40)
    
    test_query = "quel est mon solde"
    num_requests = 50
    
    print(f"üéØ Requ√™te test: '{test_query}'")
    print(f"üìä Nombre de requ√™tes: {num_requests}")
    print("‚è±Ô∏è  Test en cours...")
    
    tester = TinyBERTIntentTester()
    start_time = time.time()
    
    # Test s√©quentiel
    sequential_latencies = []
    for i in range(num_requests):
        result = tester.test_single_intent(test_query, "BALANCE_CHECK")
        if result.success:
            sequential_latencies.append(result.processing_time_ms)
    
    sequential_duration = time.time() - start_time
    
    # Test concurrent
    print("üîÑ Test concurrent...")
    concurrent_results = tester._test_concurrent_requests(test_query, min(num_requests, 20))
    concurrent_latencies = [r.processing_time_ms for r in concurrent_results if r.success]
    
    # R√©sultats
    print(f"\nüìä R√âSULTATS TEST DE CHARGE:")
    
    if sequential_latencies:
        print(f"üîÑ S√©quentiel ({len(sequential_latencies)} requ√™tes):")
        print(f"   Latence moyenne: {statistics.mean(sequential_latencies):.2f}ms")
        print(f"   Latence m√©diane: {statistics.median(sequential_latencies):.2f}ms")
        print(f"   Temps total: {sequential_duration:.2f}s")
        print(f"   D√©bit: {len(sequential_latencies)/sequential_duration:.1f} req/s")
    
    if concurrent_latencies:
        success_rate = len(concurrent_latencies) / len(concurrent_results) * 100
        print(f"‚ö° Concurrent ({len(concurrent_results)} requ√™tes):")
        print(f"   Taux succ√®s: {success_rate:.1f}%")
        print(f"   Latence moyenne: {statistics.mean(concurrent_latencies):.2f}ms")
        print(f"   Latence m√©diane: {statistics.median(concurrent_latencies):.2f}ms")
        
        if success_rate >= 95:
            print("   ‚úÖ Excellente robustesse concurrentielle")
        elif success_rate >= 80:
            print("   ‚úÖ Bonne robustesse concurrentielle")
        else:
            print("   ‚ö†Ô∏è  Probl√®mes de concurrence d√©tect√©s")
    
    # Recommandations performance
    if sequential_latencies:
        p95_latency = sorted(sequential_latencies)[int(0.95 * len(sequential_latencies))]
        print(f"\nüí° Analyse performance:")
        print(f"   P95 latence: {p95_latency:.2f}ms")
        
        if p95_latency < 50:
            print("   ‚úÖ Performance P95 excellente (<50ms)")
        elif p95_latency < 100:
            print("   ‚úÖ Performance P95 acceptable (<100ms)")
        else:
            print("   ‚ö†Ô∏è  Performance P95 √† am√©liorer (>100ms)")

if __name__ == "__main__":
    import sys
    
    # Options de test
    if len(sys.argv) > 1:
        if sys.argv[1] == "--quick":
            run_quick_test()
        elif sys.argv[1] == "--load":
            run_load_test()
        elif sys.argv[1] == "--help":
            print("ü§ñ Tests TinyBERT D√©tection Intentions")
            print("")
            print("Usage:")
            print("  python test_tinybert_intentions.py           # Test complet")
            print("  python test_tinybert_intentions.py --quick   # Test rapide")
            print("  python test_tinybert_intentions.py --load    # Test de charge")
            print("  python test_tinybert_intentions.py --help    # Cette aide")
        else:
            print(f"‚ùå Option inconnue: {sys.argv[1]}")
            print("Utilisez --help pour voir les options disponibles")
    else:
        # Test complet par d√©faut
        report = main()
        
        # Code de sortie selon r√©sultats
        if report:
            summary = report["summary"]
            if summary["meets_latency_target"] and summary["meets_accuracy_target"] and summary["success_rate"] >= 95:
                sys.exit(0)  # Succ√®s complet
            elif summary["success_rate"] >= 80:
                sys.exit(1)  # Succ√®s partiel
            else:
                sys.exit(2)  # √âchec
        else:
            sys.exit(3)  # Erreur technique